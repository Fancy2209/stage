var AssetLibrary = require("awayjs-core/lib/library/AssetLibrary");
var URLRequest = require("awayjs-core/lib/net/URLRequest");
var LoaderEvent = require("awayjs-core/lib/events/LoaderEvent");
var CoordinateSystem = require("awayjs-core/lib/projections/CoordinateSystem");
var RequestAnimationFrame = require("awayjs-core/lib/utils/RequestAnimationFrame");
var View = require("awayjs-display/lib/containers/View");
var HoverController = require("awayjs-display/lib/controllers/HoverController");
var Billboard = require("awayjs-display/lib/entities/Billboard");
var AwayMouseEvent = require("awayjs-display/lib/events/MouseEvent");
var DefaultRenderer = require("awayjs-stagegl/lib/render/DefaultRenderer");
var TriangleMethodMaterial = require("awayjs-stagegl/lib/materials/TriangleMethodMaterial");
var LayoutTest = (function () {
    function LayoutTest() {
        var _this = this;
        this._move = false;
        this._billboards = new Array();
        //listen for a resource complete event
        AssetLibrary.addEventListener(LoaderEvent.RESOURCE_COMPLETE, function (event) { return _this.onResourceComplete(event); });
        //load an image
        AssetLibrary.load(new URLRequest('assets/256x256.png'));
    }
    /**
     * Listener for resource complete event
     *
     * @param event
     */
    LayoutTest.prototype.onResourceComplete = function (event) {
        var _this = this;
        //get the image texture
        this._imageTexture = event.assets[0];
        //create the view
        this._view = new View(new DefaultRenderer());
        this._projection = this._view.camera.projection;
        this._projection.coordinateSystem = CoordinateSystem.RIGHT_HANDED;
        this._projection.focalLength = 1000;
        this._projection.preserveFocalLength = true;
        this._projection.originX = 0;
        this._projection.originY = 0;
        //create a bitmap material
        this._bitmapMaterial = new TriangleMethodMaterial(this._imageTexture);
        var billboard;
        var numHBillboards = 2;
        var numVBillboards = 2;
        for (var i = 0; i < numHBillboards; i++) {
            for (var j = 0; j < numVBillboards; j++) {
                billboard = new Billboard(this._bitmapMaterial);
                //billboard.width = 50;
                //billboard.height = 50;
                //billboard.pivot = new Vector3D(billboard.billboardWidth/2, billboard.billboardHeight/2, 0);
                billboard.x = j * 300;
                billboard.y = i * 300;
                billboard.z = 0;
                billboard.addEventListener(AwayMouseEvent.MOUSE_MOVE, this.onMouseEvent);
                //billboard.orientationMode = away.base.OrientationMode.CAMERA_PLANE;
                //billboard.alignmentMode = away.base.AlignmentMode.PIVOT_POINT;
                this._billboards.push(billboard);
                //add billboard to the scene
                this._view.scene.addChild(billboard);
            }
        }
        this._hoverControl = new HoverController(this._view.camera, null, 180, 0, 1000);
        document.onmousedown = function (event) { return _this.onMouseDownHandler(event); };
        document.onmouseup = function (event) { return _this.onMouseUpHandler(event); };
        document.onmousemove = function (event) { return _this.onMouseMove(event); };
        window.onresize = function (event) { return _this.onResize(event); };
        //trigger an initial resize for the view
        this.onResize(null);
        //setup the RAF for a render listener
        this._timer = new RequestAnimationFrame(this.render, this);
        this._timer.start();
    };
    LayoutTest.prototype.onMouseEvent = function (event) {
        console.log(event);
    };
    LayoutTest.prototype.onResize = function (event) {
        this._view.x = 0;
        this._view.y = 0;
        this._view.width = window.innerWidth;
        this._view.height = window.innerHeight;
    };
    LayoutTest.prototype.render = function (dt) {
        for (var i = 0; i < this._billboards.length; i++) {
        }
        this._view.render();
    };
    LayoutTest.prototype.onMouseUpHandler = function (event) {
        this._move = false;
    };
    LayoutTest.prototype.onMouseMove = function (event) {
        if (this._move) {
            this._hoverControl.panAngle = 0.3 * (event.clientX - this._lastMouseX) + this._lastPanAngle;
            this._hoverControl.tiltAngle = -0.3 * (event.clientY - this._lastMouseY) + this._lastTiltAngle;
        }
    };
    LayoutTest.prototype.onMouseDownHandler = function (event) {
        this._lastPanAngle = this._hoverControl.panAngle;
        this._lastTiltAngle = this._hoverControl.tiltAngle;
        this._lastMouseX = event.clientX;
        this._lastMouseY = event.clientY;
        this._move = true;
    };
    return LayoutTest;
})();

//# sourceMappingURL=data:application/json;base64,