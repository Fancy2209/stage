var Filter3DBase = (function () {
    function Filter3DBase() {
        this._tasks = new Array();
    }
    Object.defineProperty(Filter3DBase.prototype, "requireDepthRender", {
        get: function () {
            return this._requireDepthRender;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DBase.prototype.pAddTask = function (filter) {
        this._tasks.push(filter);
        if (this._requireDepthRender == null)
            this._requireDepthRender = filter.requireDepthRender;
    };
    Object.defineProperty(Filter3DBase.prototype, "tasks", {
        get: function () {
            return this._tasks;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DBase.prototype.getMainInputTexture = function (stage) {
        return this._tasks[0].getMainInputTexture(stage);
    };
    Object.defineProperty(Filter3DBase.prototype, "textureWidth", {
        get: function () {
            return this._textureWidth;
        },
        set: function (value) {
            this._textureWidth = value;
            for (var i = 0; i < this._tasks.length; ++i)
                this._tasks[i].textureWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter3DBase.prototype, "textureHeight", {
        get: function () {
            return this._textureHeight;
        },
        set: function (value) {
            this._textureHeight = value;
            for (var i = 0; i < this._tasks.length; ++i)
                this._tasks[i].textureHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    // link up the filters correctly with the next filter
    Filter3DBase.prototype.setRenderTargets = function (mainTarget, stage) {
        this._tasks[this._tasks.length - 1].target = mainTarget;
    };
    Filter3DBase.prototype.dispose = function () {
        for (var i = 0; i < this._tasks.length; ++i)
            this._tasks[i].dispose();
    };
    Filter3DBase.prototype.update = function (stage, camera) {
    };
    return Filter3DBase;
})();
module.exports = Filter3DBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZpbHRlcnMvZmlsdGVyM2RiYXNlLnRzIl0sIm5hbWVzIjpbIkZpbHRlcjNEQmFzZSIsIkZpbHRlcjNEQmFzZS5jb25zdHJ1Y3RvciIsIkZpbHRlcjNEQmFzZS5yZXF1aXJlRGVwdGhSZW5kZXIiLCJGaWx0ZXIzREJhc2UucEFkZFRhc2siLCJGaWx0ZXIzREJhc2UudGFza3MiLCJGaWx0ZXIzREJhc2UuZ2V0TWFpbklucHV0VGV4dHVyZSIsIkZpbHRlcjNEQmFzZS50ZXh0dXJlV2lkdGgiLCJGaWx0ZXIzREJhc2UudGV4dHVyZUhlaWdodCIsIkZpbHRlcjNEQmFzZS5zZXRSZW5kZXJUYXJnZXRzIiwiRmlsdGVyM0RCYXNlLmRpc3Bvc2UiLCJGaWx0ZXIzREJhc2UudXBkYXRlIl0sIm1hcHBpbmdzIjoiQUFNQSxJQUFNLFlBQVk7SUFPakJBLFNBUEtBLFlBQVlBO1FBU2hCQyxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFvQkEsQ0FBQ0E7SUFDN0NBLENBQUNBO0lBRURELHNCQUFXQSw0Q0FBa0JBO2FBQTdCQTtZQUVDRSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLENBQUNBO1FBQ2pDQSxDQUFDQTs7O09BQUFGO0lBRU1BLCtCQUFRQSxHQUFmQSxVQUFnQkEsTUFBdUJBO1FBRXRDRyxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQTtRQUV6QkEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxJQUFJQSxJQUFJQSxDQUFDQTtZQUNwQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxNQUFNQSxDQUFDQSxrQkFBa0JBLENBQUNBO0lBQ3ZEQSxDQUFDQTtJQUVESCxzQkFBV0EsK0JBQUtBO2FBQWhCQTtZQUVDSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQTtRQUNwQkEsQ0FBQ0E7OztPQUFBSjtJQUVNQSwwQ0FBbUJBLEdBQTFCQSxVQUEyQkEsS0FBV0E7UUFFckNLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7SUFDbERBLENBQUNBO0lBRURMLHNCQUFXQSxzQ0FBWUE7YUFBdkJBO1lBRUNNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBO1FBQzNCQSxDQUFDQTthQUVETixVQUF3QkEsS0FBWUE7WUFFbkNNLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLEtBQUtBLENBQUNBO1lBRTNCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDakRBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLFlBQVlBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3RDQSxDQUFDQTs7O09BUkFOO0lBVURBLHNCQUFXQSx1Q0FBYUE7YUFBeEJBO1lBRUNPLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBO1FBQzVCQSxDQUFDQTthQUVEUCxVQUF5QkEsS0FBWUE7WUFFcENPLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLEtBQUtBLENBQUNBO1lBRTVCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDakRBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGFBQWFBLEdBQUdBLEtBQUtBLENBQUNBO1FBQ3ZDQSxDQUFDQTs7O09BUkFQO0lBVURBLHFEQUFxREE7SUFDOUNBLHVDQUFnQkEsR0FBdkJBLFVBQXdCQSxVQUFtQkEsRUFBRUEsS0FBV0E7UUFFdkRRLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBLENBQUNBLE1BQU1BLEdBQUdBLFVBQVVBLENBQUNBO0lBQ3pEQSxDQUFDQTtJQUVNUiw4QkFBT0EsR0FBZEE7UUFFQ1MsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0E7WUFDakRBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO0lBQzNCQSxDQUFDQTtJQUVNVCw2QkFBTUEsR0FBYkEsVUFBY0EsS0FBV0EsRUFBRUEsTUFBYUE7SUFHeENVLENBQUNBO0lBQ0ZWLG1CQUFDQTtBQUFEQSxDQTdFQSxBQTZFQ0EsSUFBQTtBQUVELEFBQXNCLGlCQUFiLFlBQVksQ0FBQyIsImZpbGUiOiJmaWx0ZXJzL0ZpbHRlcjNEQmFzZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1zdGFnZWdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgQ2FtZXJhXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2VudGl0aWVzL0NhbWVyYVwiKTtcblxuaW1wb3J0IElUZXh0dXJlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JVGV4dHVyZVwiKTtcbmltcG9ydCBGaWx0ZXIzRFRhc2tCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvZmlsdGVycy90YXNrcy9GaWx0ZXIzRFRhc2tCYXNlXCIpO1xuXG5jbGFzcyBGaWx0ZXIzREJhc2Vcbntcblx0cHJpdmF0ZSBfdGFza3M6QXJyYXk8RmlsdGVyM0RUYXNrQmFzZT47XG5cdHByaXZhdGUgX3JlcXVpcmVEZXB0aFJlbmRlcjpib29sZWFuO1xuXHRwcml2YXRlIF90ZXh0dXJlV2lkdGg6bnVtYmVyO1xuXHRwcml2YXRlIF90ZXh0dXJlSGVpZ2h0Om51bWJlcjtcblxuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblx0XHR0aGlzLl90YXNrcyA9IG5ldyBBcnJheTxGaWx0ZXIzRFRhc2tCYXNlPigpO1xuXHR9XG5cblx0cHVibGljIGdldCByZXF1aXJlRGVwdGhSZW5kZXIoKTpib29sZWFuXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fcmVxdWlyZURlcHRoUmVuZGVyO1xuXHR9XG5cblx0cHVibGljIHBBZGRUYXNrKGZpbHRlcjpGaWx0ZXIzRFRhc2tCYXNlKVxuXHR7XG5cdFx0dGhpcy5fdGFza3MucHVzaChmaWx0ZXIpO1xuXG5cdFx0aWYgKHRoaXMuX3JlcXVpcmVEZXB0aFJlbmRlciA9PSBudWxsKVxuXHRcdFx0dGhpcy5fcmVxdWlyZURlcHRoUmVuZGVyID0gZmlsdGVyLnJlcXVpcmVEZXB0aFJlbmRlcjtcblx0fVxuXG5cdHB1YmxpYyBnZXQgdGFza3MoKTpGaWx0ZXIzRFRhc2tCYXNlW11cblx0e1xuXHRcdHJldHVybiB0aGlzLl90YXNrcztcblx0fVxuXG5cdHB1YmxpYyBnZXRNYWluSW5wdXRUZXh0dXJlKHN0YWdlOlN0YWdlKTpJVGV4dHVyZVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3Rhc2tzWzBdLmdldE1haW5JbnB1dFRleHR1cmUoc3RhZ2UpO1xuXHR9XG5cblx0cHVibGljIGdldCB0ZXh0dXJlV2lkdGgoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl90ZXh0dXJlV2lkdGg7XG5cdH1cblxuXHRwdWJsaWMgc2V0IHRleHR1cmVXaWR0aCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl90ZXh0dXJlV2lkdGggPSB2YWx1ZTtcblxuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IHRoaXMuX3Rhc2tzLmxlbmd0aDsgKytpKVxuXHRcdFx0dGhpcy5fdGFza3NbaV0udGV4dHVyZVdpZHRoID0gdmFsdWU7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHRleHR1cmVIZWlnaHQoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl90ZXh0dXJlSGVpZ2h0O1xuXHR9XG5cblx0cHVibGljIHNldCB0ZXh0dXJlSGVpZ2h0KHZhbHVlOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX3RleHR1cmVIZWlnaHQgPSB2YWx1ZTtcblxuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IHRoaXMuX3Rhc2tzLmxlbmd0aDsgKytpKVxuXHRcdFx0dGhpcy5fdGFza3NbaV0udGV4dHVyZUhlaWdodCA9IHZhbHVlO1xuXHR9XG5cblx0Ly8gbGluayB1cCB0aGUgZmlsdGVycyBjb3JyZWN0bHkgd2l0aCB0aGUgbmV4dCBmaWx0ZXJcblx0cHVibGljIHNldFJlbmRlclRhcmdldHMobWFpblRhcmdldDpJVGV4dHVyZSwgc3RhZ2U6U3RhZ2UpXG5cdHtcblx0XHR0aGlzLl90YXNrc1t0aGlzLl90YXNrcy5sZW5ndGggLSAxXS50YXJnZXQgPSBtYWluVGFyZ2V0O1xuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5fdGFza3MubGVuZ3RoOyArK2kpXG5cdFx0XHR0aGlzLl90YXNrc1tpXS5kaXNwb3NlKCk7XG5cdH1cblxuXHRwdWJsaWMgdXBkYXRlKHN0YWdlOlN0YWdlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cblx0fVxufVxuXG5leHBvcnQgPSBGaWx0ZXIzREJhc2U7Il19