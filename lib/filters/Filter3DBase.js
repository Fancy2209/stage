var Filter3DBase = (function () {
    function Filter3DBase() {
        this._tasks = new Array();
    }
    Object.defineProperty(Filter3DBase.prototype, "requireDepthRender", {
        get: function () {
            return this._requireDepthRender;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DBase.prototype.pAddTask = function (filter) {
        this._tasks.push(filter);
        if (this._requireDepthRender == null)
            this._requireDepthRender = filter.requireDepthRender;
    };
    Object.defineProperty(Filter3DBase.prototype, "tasks", {
        get: function () {
            return this._tasks;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DBase.prototype.getMainInputTexture = function (stage) {
        return this._tasks[0].getMainInputTexture(stage);
    };
    Object.defineProperty(Filter3DBase.prototype, "textureWidth", {
        get: function () {
            return this._textureWidth;
        },
        set: function (value) {
            this._textureWidth = value;
            for (var i = 0; i < this._tasks.length; ++i)
                this._tasks[i].textureWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter3DBase.prototype, "textureHeight", {
        get: function () {
            return this._textureHeight;
        },
        set: function (value) {
            this._textureHeight = value;
            for (var i = 0; i < this._tasks.length; ++i)
                this._tasks[i].textureHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    // link up the filters correctly with the next filter
    Filter3DBase.prototype.setRenderTargets = function (mainTarget, stage) {
        this._tasks[this._tasks.length - 1].target = mainTarget;
    };
    Filter3DBase.prototype.dispose = function () {
        for (var i = 0; i < this._tasks.length; ++i)
            this._tasks[i].dispose();
    };
    Filter3DBase.prototype.update = function (stage, camera) {
    };
    return Filter3DBase;
})();
module.exports = Filter3DBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9maWx0ZXJzL2ZpbHRlcjNkYmFzZS50cyJdLCJuYW1lcyI6WyJGaWx0ZXIzREJhc2UiLCJGaWx0ZXIzREJhc2UuY29uc3RydWN0b3IiLCJGaWx0ZXIzREJhc2UucmVxdWlyZURlcHRoUmVuZGVyIiwiRmlsdGVyM0RCYXNlLnBBZGRUYXNrIiwiRmlsdGVyM0RCYXNlLnRhc2tzIiwiRmlsdGVyM0RCYXNlLmdldE1haW5JbnB1dFRleHR1cmUiLCJGaWx0ZXIzREJhc2UudGV4dHVyZVdpZHRoIiwiRmlsdGVyM0RCYXNlLnRleHR1cmVIZWlnaHQiLCJGaWx0ZXIzREJhc2Uuc2V0UmVuZGVyVGFyZ2V0cyIsIkZpbHRlcjNEQmFzZS5kaXNwb3NlIiwiRmlsdGVyM0RCYXNlLnVwZGF0ZSJdLCJtYXBwaW5ncyI6IkFBTUEsSUFBTSxZQUFZO0lBT2pCQSxTQVBLQSxZQUFZQTtRQVNoQkMsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsS0FBS0EsRUFBb0JBLENBQUNBO0lBQzdDQSxDQUFDQTtJQUVERCxzQkFBV0EsNENBQWtCQTthQUE3QkE7WUFFQ0UsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7OztPQUFBRjtJQUVNQSwrQkFBUUEsR0FBZkEsVUFBZ0JBLE1BQXVCQTtRQUV0Q0csSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsSUFBSUEsSUFBSUEsQ0FBQ0E7WUFDcENBLElBQUlBLENBQUNBLG1CQUFtQkEsR0FBR0EsTUFBTUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFREgsc0JBQVdBLCtCQUFLQTthQUFoQkE7WUFFQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDcEJBLENBQUNBOzs7T0FBQUo7SUFFTUEsMENBQW1CQSxHQUExQkEsVUFBMkJBLEtBQVdBO1FBRXJDSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxtQkFBbUJBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQ2xEQSxDQUFDQTtJQUVETCxzQkFBV0Esc0NBQVlBO2FBQXZCQTtZQUVDTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7YUFFRE4sVUFBd0JBLEtBQVlBO1lBRW5DTSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUUzQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQ2pEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxZQUFZQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN0Q0EsQ0FBQ0E7OztPQVJBTjtJQVVEQSxzQkFBV0EsdUNBQWFBO2FBQXhCQTtZQUVDTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7YUFFRFAsVUFBeUJBLEtBQVlBO1lBRXBDTyxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUU1QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQ2pEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN2Q0EsQ0FBQ0E7OztPQVJBUDtJQVVEQSxxREFBcURBO0lBQzlDQSx1Q0FBZ0JBLEdBQXZCQSxVQUF3QkEsVUFBbUJBLEVBQUVBLEtBQVdBO1FBRXZEUSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxHQUFHQSxVQUFVQSxDQUFDQTtJQUN6REEsQ0FBQ0E7SUFFTVIsOEJBQU9BLEdBQWRBO1FBRUNTLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLENBQUNBO1lBQ2pEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7SUFFTVQsNkJBQU1BLEdBQWJBLFVBQWNBLEtBQVdBLEVBQUVBLE1BQWFBO0lBR3hDVSxDQUFDQTtJQUNGVixtQkFBQ0E7QUFBREEsQ0E3RUEsQUE2RUNBLElBQUE7QUFFRCxBQUFzQixpQkFBYixZQUFZLENBQUMiLCJmaWxlIjoiZmlsdGVycy9GaWx0ZXIzREJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuaW1wb3J0IElUZXh0dXJlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSVRleHR1cmVcIik7XG5pbXBvcnQgRmlsdGVyM0RUYXNrQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2ZpbHRlcnMvdGFza3MvRmlsdGVyM0RUYXNrQmFzZVwiKTtcblxuY2xhc3MgRmlsdGVyM0RCYXNlXG57XG5cdHByaXZhdGUgX3Rhc2tzOkFycmF5PEZpbHRlcjNEVGFza0Jhc2U+O1xuXHRwcml2YXRlIF9yZXF1aXJlRGVwdGhSZW5kZXI6Ym9vbGVhbjtcblx0cHJpdmF0ZSBfdGV4dHVyZVdpZHRoOm51bWJlcjtcblx0cHJpdmF0ZSBfdGV4dHVyZUhlaWdodDpudW1iZXI7XG5cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0dGhpcy5fdGFza3MgPSBuZXcgQXJyYXk8RmlsdGVyM0RUYXNrQmFzZT4oKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgcmVxdWlyZURlcHRoUmVuZGVyKCk6Ym9vbGVhblxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3JlcXVpcmVEZXB0aFJlbmRlcjtcblx0fVxuXG5cdHB1YmxpYyBwQWRkVGFzayhmaWx0ZXI6RmlsdGVyM0RUYXNrQmFzZSlcblx0e1xuXHRcdHRoaXMuX3Rhc2tzLnB1c2goZmlsdGVyKTtcblxuXHRcdGlmICh0aGlzLl9yZXF1aXJlRGVwdGhSZW5kZXIgPT0gbnVsbClcblx0XHRcdHRoaXMuX3JlcXVpcmVEZXB0aFJlbmRlciA9IGZpbHRlci5yZXF1aXJlRGVwdGhSZW5kZXI7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHRhc2tzKCk6RmlsdGVyM0RUYXNrQmFzZVtdXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fdGFza3M7XG5cdH1cblxuXHRwdWJsaWMgZ2V0TWFpbklucHV0VGV4dHVyZShzdGFnZTpTdGFnZSk6SVRleHR1cmVcblx0e1xuXHRcdHJldHVybiB0aGlzLl90YXNrc1swXS5nZXRNYWluSW5wdXRUZXh0dXJlKHN0YWdlKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgdGV4dHVyZVdpZHRoKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fdGV4dHVyZVdpZHRoO1xuXHR9XG5cblx0cHVibGljIHNldCB0ZXh0dXJlV2lkdGgodmFsdWU6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fdGV4dHVyZVdpZHRoID0gdmFsdWU7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCB0aGlzLl90YXNrcy5sZW5ndGg7ICsraSlcblx0XHRcdHRoaXMuX3Rhc2tzW2ldLnRleHR1cmVXaWR0aCA9IHZhbHVlO1xuXHR9XG5cblx0cHVibGljIGdldCB0ZXh0dXJlSGVpZ2h0KCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fdGV4dHVyZUhlaWdodDtcblx0fVxuXG5cdHB1YmxpYyBzZXQgdGV4dHVyZUhlaWdodCh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl90ZXh0dXJlSGVpZ2h0ID0gdmFsdWU7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCB0aGlzLl90YXNrcy5sZW5ndGg7ICsraSlcblx0XHRcdHRoaXMuX3Rhc2tzW2ldLnRleHR1cmVIZWlnaHQgPSB2YWx1ZTtcblx0fVxuXG5cdC8vIGxpbmsgdXAgdGhlIGZpbHRlcnMgY29ycmVjdGx5IHdpdGggdGhlIG5leHQgZmlsdGVyXG5cdHB1YmxpYyBzZXRSZW5kZXJUYXJnZXRzKG1haW5UYXJnZXQ6SVRleHR1cmUsIHN0YWdlOlN0YWdlKVxuXHR7XG5cdFx0dGhpcy5fdGFza3NbdGhpcy5fdGFza3MubGVuZ3RoIC0gMV0udGFyZ2V0ID0gbWFpblRhcmdldDtcblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IHRoaXMuX3Rhc2tzLmxlbmd0aDsgKytpKVxuXHRcdFx0dGhpcy5fdGFza3NbaV0uZGlzcG9zZSgpO1xuXHR9XG5cblx0cHVibGljIHVwZGF0ZShzdGFnZTpTdGFnZSwgY2FtZXJhOkNhbWVyYSlcblx0e1xuXG5cdH1cbn1cblxuZXhwb3J0ID0gRmlsdGVyM0RCYXNlOyJdfQ==