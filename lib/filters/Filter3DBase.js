var Filter3DBase = (function () {
    function Filter3DBase() {
        this._tasks = new Array();
    }
    Object.defineProperty(Filter3DBase.prototype, "requireDepthRender", {
        get: function () {
            return this._requireDepthRender;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DBase.prototype.pAddTask = function (filter) {
        this._tasks.push(filter);
        if (this._requireDepthRender == null)
            this._requireDepthRender = filter.requireDepthRender;
    };
    Object.defineProperty(Filter3DBase.prototype, "tasks", {
        get: function () {
            return this._tasks;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DBase.prototype.getMainInputTexture = function (stage) {
        return this._tasks[0].getMainInputTexture(stage);
    };
    Object.defineProperty(Filter3DBase.prototype, "textureWidth", {
        get: function () {
            return this._textureWidth;
        },
        set: function (value) {
            this._textureWidth = value;
            for (var i = 0; i < this._tasks.length; ++i)
                this._tasks[i].textureWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Filter3DBase.prototype, "textureHeight", {
        get: function () {
            return this._textureHeight;
        },
        set: function (value) {
            this._textureHeight = value;
            for (var i = 0; i < this._tasks.length; ++i)
                this._tasks[i].textureHeight = value;
        },
        enumerable: true,
        configurable: true
    });
    // link up the filters correctly with the next filter
    Filter3DBase.prototype.setRenderTargets = function (mainTarget, stage) {
        this._tasks[this._tasks.length - 1].target = mainTarget;
    };
    Filter3DBase.prototype.dispose = function () {
        for (var i = 0; i < this._tasks.length; ++i)
            this._tasks[i].dispose();
    };
    Filter3DBase.prototype.update = function (stage, camera) {
    };
    return Filter3DBase;
})();
module.exports = Filter3DBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9maWx0ZXJzL2ZpbHRlcjNkYmFzZS50cyJdLCJuYW1lcyI6WyJGaWx0ZXIzREJhc2UiLCJGaWx0ZXIzREJhc2UuY29uc3RydWN0b3IiLCJGaWx0ZXIzREJhc2UucmVxdWlyZURlcHRoUmVuZGVyIiwiRmlsdGVyM0RCYXNlLnBBZGRUYXNrIiwiRmlsdGVyM0RCYXNlLnRhc2tzIiwiRmlsdGVyM0RCYXNlLmdldE1haW5JbnB1dFRleHR1cmUiLCJGaWx0ZXIzREJhc2UudGV4dHVyZVdpZHRoIiwiRmlsdGVyM0RCYXNlLnRleHR1cmVIZWlnaHQiLCJGaWx0ZXIzREJhc2Uuc2V0UmVuZGVyVGFyZ2V0cyIsIkZpbHRlcjNEQmFzZS5kaXNwb3NlIiwiRmlsdGVyM0RCYXNlLnVwZGF0ZSJdLCJtYXBwaW5ncyI6IkFBTUEsSUFBTSxZQUFZO0lBT2pCQSxTQVBLQSxZQUFZQTtRQVNoQkMsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsS0FBS0EsRUFBb0JBLENBQUNBO0lBQzdDQSxDQUFDQTtJQUVERCxzQkFBV0EsNENBQWtCQTthQUE3QkE7WUFFQ0UsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQTtRQUNqQ0EsQ0FBQ0E7OztPQUFBRjtJQUVNQSwrQkFBUUEsR0FBZkEsVUFBZ0JBLE1BQXVCQTtRQUV0Q0csSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsQ0FBQ0E7UUFFekJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsSUFBSUEsSUFBSUEsQ0FBQ0E7WUFDcENBLElBQUlBLENBQUNBLG1CQUFtQkEsR0FBR0EsTUFBTUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFREgsc0JBQVdBLCtCQUFLQTthQUFoQkE7WUFFQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7UUFDcEJBLENBQUNBOzs7T0FBQUo7SUFFTUEsMENBQW1CQSxHQUExQkEsVUFBMkJBLEtBQVdBO1FBRXJDSyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxtQkFBbUJBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBO0lBQ2xEQSxDQUFDQTtJQUVETCxzQkFBV0Esc0NBQVlBO2FBQXZCQTtZQUVDTSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQTtRQUMzQkEsQ0FBQ0E7YUFFRE4sVUFBd0JBLEtBQVlBO1lBRW5DTSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUUzQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQ2pEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxZQUFZQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN0Q0EsQ0FBQ0E7OztPQVJBTjtJQVVEQSxzQkFBV0EsdUNBQWFBO2FBQXhCQTtZQUVDTyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUM1QkEsQ0FBQ0E7YUFFRFAsVUFBeUJBLEtBQVlBO1lBRXBDTyxJQUFJQSxDQUFDQSxjQUFjQSxHQUFHQSxLQUFLQSxDQUFDQTtZQUU1QkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBVUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsRUFBRUEsQ0FBQ0E7Z0JBQ2pEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN2Q0EsQ0FBQ0E7OztPQVJBUDtJQVVEQSxxREFBcURBO0lBQzlDQSx1Q0FBZ0JBLEdBQXZCQSxVQUF3QkEsVUFBbUJBLEVBQUVBLEtBQVdBO1FBRXZEUSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxHQUFHQSxVQUFVQSxDQUFDQTtJQUN6REEsQ0FBQ0E7SUFFTVIsOEJBQU9BLEdBQWRBO1FBRUNTLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLE1BQU1BLEVBQUVBLEVBQUVBLENBQUNBO1lBQ2pEQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtJQUMzQkEsQ0FBQ0E7SUFFTVQsNkJBQU1BLEdBQWJBLFVBQWNBLEtBQVdBLEVBQUVBLE1BQWFBO0lBR3hDVSxDQUFDQTtJQUNGVixtQkFBQ0E7QUFBREEsQ0E3RUEsQUE2RUNBLElBQUE7QUFFRCxBQUFzQixpQkFBYixZQUFZLENBQUMiLCJmaWxlIjoiZmlsdGVycy9GaWx0ZXIzREJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgSVRleHR1cmVcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0lUZXh0dXJlXCIpO1xuaW1wb3J0IEZpbHRlcjNEVGFza0Jhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9maWx0ZXJzL3Rhc2tzL0ZpbHRlcjNEVGFza0Jhc2VcIik7XG5cbmNsYXNzIEZpbHRlcjNEQmFzZVxue1xuXHRwcml2YXRlIF90YXNrczpBcnJheTxGaWx0ZXIzRFRhc2tCYXNlPjtcblx0cHJpdmF0ZSBfcmVxdWlyZURlcHRoUmVuZGVyOmJvb2xlYW47XG5cdHByaXZhdGUgX3RleHR1cmVXaWR0aDpudW1iZXI7XG5cdHByaXZhdGUgX3RleHR1cmVIZWlnaHQ6bnVtYmVyO1xuXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHRoaXMuX3Rhc2tzID0gbmV3IEFycmF5PEZpbHRlcjNEVGFza0Jhc2U+KCk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHJlcXVpcmVEZXB0aFJlbmRlcigpOmJvb2xlYW5cblx0e1xuXHRcdHJldHVybiB0aGlzLl9yZXF1aXJlRGVwdGhSZW5kZXI7XG5cdH1cblxuXHRwdWJsaWMgcEFkZFRhc2soZmlsdGVyOkZpbHRlcjNEVGFza0Jhc2UpXG5cdHtcblx0XHR0aGlzLl90YXNrcy5wdXNoKGZpbHRlcik7XG5cblx0XHRpZiAodGhpcy5fcmVxdWlyZURlcHRoUmVuZGVyID09IG51bGwpXG5cdFx0XHR0aGlzLl9yZXF1aXJlRGVwdGhSZW5kZXIgPSBmaWx0ZXIucmVxdWlyZURlcHRoUmVuZGVyO1xuXHR9XG5cblx0cHVibGljIGdldCB0YXNrcygpOkZpbHRlcjNEVGFza0Jhc2VbXVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3Rhc2tzO1xuXHR9XG5cblx0cHVibGljIGdldE1haW5JbnB1dFRleHR1cmUoc3RhZ2U6U3RhZ2UpOklUZXh0dXJlXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fdGFza3NbMF0uZ2V0TWFpbklucHV0VGV4dHVyZShzdGFnZSk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHRleHR1cmVXaWR0aCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3RleHR1cmVXaWR0aDtcblx0fVxuXG5cdHB1YmxpYyBzZXQgdGV4dHVyZVdpZHRoKHZhbHVlOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX3RleHR1cmVXaWR0aCA9IHZhbHVlO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5fdGFza3MubGVuZ3RoOyArK2kpXG5cdFx0XHR0aGlzLl90YXNrc1tpXS50ZXh0dXJlV2lkdGggPSB2YWx1ZTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgdGV4dHVyZUhlaWdodCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3RleHR1cmVIZWlnaHQ7XG5cdH1cblxuXHRwdWJsaWMgc2V0IHRleHR1cmVIZWlnaHQodmFsdWU6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fdGV4dHVyZUhlaWdodCA9IHZhbHVlO1xuXG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5fdGFza3MubGVuZ3RoOyArK2kpXG5cdFx0XHR0aGlzLl90YXNrc1tpXS50ZXh0dXJlSGVpZ2h0ID0gdmFsdWU7XG5cdH1cblxuXHQvLyBsaW5rIHVwIHRoZSBmaWx0ZXJzIGNvcnJlY3RseSB3aXRoIHRoZSBuZXh0IGZpbHRlclxuXHRwdWJsaWMgc2V0UmVuZGVyVGFyZ2V0cyhtYWluVGFyZ2V0OklUZXh0dXJlLCBzdGFnZTpTdGFnZSlcblx0e1xuXHRcdHRoaXMuX3Rhc2tzW3RoaXMuX3Rhc2tzLmxlbmd0aCAtIDFdLnRhcmdldCA9IG1haW5UYXJnZXQ7XG5cdH1cblxuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCB0aGlzLl90YXNrcy5sZW5ndGg7ICsraSlcblx0XHRcdHRoaXMuX3Rhc2tzW2ldLmRpc3Bvc2UoKTtcblx0fVxuXG5cdHB1YmxpYyB1cGRhdGUoc3RhZ2U6U3RhZ2UsIGNhbWVyYTpDYW1lcmEpXG5cdHtcblxuXHR9XG59XG5cbmV4cG9ydCA9IEZpbHRlcjNEQmFzZTsiXX0=