var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/base/BitmapData");
var TextureBaseWebGL = require("awayjs-stagegl/lib/base/TextureBaseWebGL");
var CubeTextureWebGL = (function (_super) {
    __extends(CubeTextureWebGL, _super);
    function CubeTextureWebGL(gl, size) {
        _super.call(this, gl);
        this._textureSelectorDictionary = new Array(6);
        this.textureType = "textureCube";
        this._size = size;
        this._texture = this._gl.createTexture();
        this._textureSelectorDictionary[0] = gl.TEXTURE_CUBE_MAP_POSITIVE_X;
        this._textureSelectorDictionary[1] = gl.TEXTURE_CUBE_MAP_NEGATIVE_X;
        this._textureSelectorDictionary[2] = gl.TEXTURE_CUBE_MAP_POSITIVE_Y;
        this._textureSelectorDictionary[3] = gl.TEXTURE_CUBE_MAP_NEGATIVE_Y;
        this._textureSelectorDictionary[4] = gl.TEXTURE_CUBE_MAP_POSITIVE_Z;
        this._textureSelectorDictionary[5] = gl.TEXTURE_CUBE_MAP_NEGATIVE_Z;
    }
    CubeTextureWebGL.prototype.dispose = function () {
        this._gl.deleteTexture(this._texture);
    };
    CubeTextureWebGL.prototype.uploadFromData = function (data, side, miplevel) {
        if (miplevel === void 0) { miplevel = 0; }
        if (data instanceof BitmapData)
            data = data.imageData;
        this._gl.bindTexture(this._gl.TEXTURE_CUBE_MAP, this._texture);
        this._gl.texImage2D(this._textureSelectorDictionary[side], miplevel, this._gl.RGBA, this._gl.RGBA, this._gl.UNSIGNED_BYTE, data);
        this._gl.bindTexture(this._gl.TEXTURE_CUBE_MAP, null);
    };
    CubeTextureWebGL.prototype.uploadCompressedTextureFromByteArray = function (data, byteArrayOffset /*uint*/, async) {
        if (async === void 0) { async = false; }
    };
    Object.defineProperty(CubeTextureWebGL.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CubeTextureWebGL.prototype, "glTexture", {
        get: function () {
            return this._texture;
        },
        enumerable: true,
        configurable: true
    });
    return CubeTextureWebGL;
})(TextureBaseWebGL);
module.exports = CubeTextureWebGL;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0N1YmVUZXh0dXJlV2ViR0wudHMiXSwibmFtZXMiOlsiQ3ViZVRleHR1cmVXZWJHTCIsIkN1YmVUZXh0dXJlV2ViR0wuY29uc3RydWN0b3IiLCJDdWJlVGV4dHVyZVdlYkdMLmRpc3Bvc2UiLCJDdWJlVGV4dHVyZVdlYkdMLnVwbG9hZEZyb21EYXRhIiwiQ3ViZVRleHR1cmVXZWJHTC51cGxvYWRDb21wcmVzc2VkVGV4dHVyZUZyb21CeXRlQXJyYXkiLCJDdWJlVGV4dHVyZVdlYkdMLnNpemUiLCJDdWJlVGV4dHVyZVdlYkdMLmdsVGV4dHVyZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTyxVQUFVLFdBQWUsaUNBQWlDLENBQUMsQ0FBQztBQUluRSxJQUFPLGdCQUFnQixXQUFjLDBDQUEwQyxDQUFDLENBQUM7QUFFakYsSUFBTSxnQkFBZ0I7SUFBU0EsVUFBekJBLGdCQUFnQkEsVUFBeUJBO0lBUzlDQSxTQVRLQSxnQkFBZ0JBLENBU1RBLEVBQXdCQSxFQUFFQSxJQUFXQTtRQUVoREMsa0JBQU1BLEVBQUVBLENBQUNBLENBQUNBO1FBUkhBLCtCQUEwQkEsR0FBaUJBLElBQUlBLEtBQUtBLENBQVNBLENBQUNBLENBQUNBLENBQUNBO1FBRWpFQSxnQkFBV0EsR0FBVUEsYUFBYUEsQ0FBQ0E7UUFPekNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBQ2xCQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtRQUV6Q0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSwyQkFBMkJBLENBQUNBO1FBQ3BFQSxJQUFJQSxDQUFDQSwwQkFBMEJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLDJCQUEyQkEsQ0FBQ0E7UUFDcEVBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsMkJBQTJCQSxDQUFDQTtRQUNwRUEsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxFQUFFQSxDQUFDQSwyQkFBMkJBLENBQUNBO1FBQ3BFQSxJQUFJQSxDQUFDQSwwQkFBMEJBLENBQUNBLENBQUNBLENBQUNBLEdBQUdBLEVBQUVBLENBQUNBLDJCQUEyQkEsQ0FBQ0E7UUFDcEVBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsRUFBRUEsQ0FBQ0EsMkJBQTJCQSxDQUFDQTtJQUNyRUEsQ0FBQ0E7SUFFTUQsa0NBQU9BLEdBQWRBO1FBRUNFLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQ3ZDQSxDQUFDQTtJQUlNRix5Q0FBY0EsR0FBckJBLFVBQXNCQSxJQUFRQSxFQUFFQSxJQUFXQSxFQUFFQSxRQUFtQkE7UUFBbkJHLHdCQUFtQkEsR0FBbkJBLFlBQW1CQTtRQUUvREEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsWUFBWUEsVUFBVUEsQ0FBQ0E7WUFDOUJBLElBQUlBLEdBQWlCQSxJQUFLQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUV0Q0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUMvREEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsMEJBQTBCQSxDQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUNqSUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsZ0JBQWdCQSxFQUFFQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUN2REEsQ0FBQ0E7SUFFTUgsK0RBQW9DQSxHQUEzQ0EsVUFBNENBLElBQWNBLEVBQUVBLGVBQWVBLENBQVFBLFFBQURBLEFBQVNBLEVBQUVBLEtBQXFCQTtRQUFyQkkscUJBQXFCQSxHQUFyQkEsYUFBcUJBO0lBR2xIQSxDQUFDQTtJQUVESixzQkFBV0Esa0NBQUlBO2FBQWZBO1lBRUNLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1FBQ25CQSxDQUFDQTs7O09BQUFMO0lBRURBLHNCQUFXQSx1Q0FBU0E7YUFBcEJBO1lBRUNNLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBO1FBQ3RCQSxDQUFDQTs7O09BQUFOO0lBQ0ZBLHVCQUFDQTtBQUFEQSxDQXREQSxBQXNEQ0EsRUF0RDhCLGdCQUFnQixFQXNEOUM7QUFFRCxBQUEwQixpQkFBakIsZ0JBQWdCLENBQUMiLCJmaWxlIjoiYmFzZS9DdWJlVGV4dHVyZVdlYkdMLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9iYXNlL0JpdG1hcERhdGFcIik7XHJcbmltcG9ydCBCeXRlQXJyYXlcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheVwiKTtcclxuXHJcbmltcG9ydCBJQ3ViZVRleHR1cmVcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSUN1YmVUZXh0dXJlXCIpO1xyXG5pbXBvcnQgVGV4dHVyZUJhc2VXZWJHTFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvVGV4dHVyZUJhc2VXZWJHTFwiKTtcclxuXHJcbmNsYXNzIEN1YmVUZXh0dXJlV2ViR0wgZXh0ZW5kcyBUZXh0dXJlQmFzZVdlYkdMIGltcGxlbWVudHMgSUN1YmVUZXh0dXJlXHJcbntcclxuXHJcblx0cHJpdmF0ZSBfdGV4dHVyZVNlbGVjdG9yRGljdGlvbmFyeTpBcnJheTxudW1iZXI+ID0gbmV3IEFycmF5PG51bWJlcj4oNik7XHJcblxyXG5cdHB1YmxpYyB0ZXh0dXJlVHlwZTpzdHJpbmcgPSBcInRleHR1cmVDdWJlXCI7XHJcblx0cHJpdmF0ZSBfdGV4dHVyZTpXZWJHTFRleHR1cmU7XHJcblx0cHJpdmF0ZSBfc2l6ZTpudW1iZXI7XHJcblxyXG5cdGNvbnN0cnVjdG9yKGdsOldlYkdMUmVuZGVyaW5nQ29udGV4dCwgc2l6ZTpudW1iZXIpXHJcblx0e1xyXG5cdFx0c3VwZXIoZ2wpO1xyXG5cdFx0dGhpcy5fc2l6ZSA9IHNpemU7XHJcblx0XHR0aGlzLl90ZXh0dXJlID0gdGhpcy5fZ2wuY3JlYXRlVGV4dHVyZSgpO1xyXG5cclxuXHRcdHRoaXMuX3RleHR1cmVTZWxlY3RvckRpY3Rpb25hcnlbMF0gPSBnbC5URVhUVVJFX0NVQkVfTUFQX1BPU0lUSVZFX1g7XHJcblx0XHR0aGlzLl90ZXh0dXJlU2VsZWN0b3JEaWN0aW9uYXJ5WzFdID0gZ2wuVEVYVFVSRV9DVUJFX01BUF9ORUdBVElWRV9YO1xyXG5cdFx0dGhpcy5fdGV4dHVyZVNlbGVjdG9yRGljdGlvbmFyeVsyXSA9IGdsLlRFWFRVUkVfQ1VCRV9NQVBfUE9TSVRJVkVfWTtcclxuXHRcdHRoaXMuX3RleHR1cmVTZWxlY3RvckRpY3Rpb25hcnlbM10gPSBnbC5URVhUVVJFX0NVQkVfTUFQX05FR0FUSVZFX1k7XHJcblx0XHR0aGlzLl90ZXh0dXJlU2VsZWN0b3JEaWN0aW9uYXJ5WzRdID0gZ2wuVEVYVFVSRV9DVUJFX01BUF9QT1NJVElWRV9aO1xyXG5cdFx0dGhpcy5fdGV4dHVyZVNlbGVjdG9yRGljdGlvbmFyeVs1XSA9IGdsLlRFWFRVUkVfQ1VCRV9NQVBfTkVHQVRJVkVfWjtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBkaXNwb3NlKClcclxuXHR7XHJcblx0XHR0aGlzLl9nbC5kZWxldGVUZXh0dXJlKHRoaXMuX3RleHR1cmUpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHVwbG9hZEZyb21EYXRhKGJpdG1hcERhdGE6Qml0bWFwRGF0YSwgc2lkZTpudW1iZXIsIG1pcGxldmVsPzpudW1iZXIpO1xyXG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShpbWFnZTpIVE1MSW1hZ2VFbGVtZW50LCBzaWRlOm51bWJlciwgbWlwbGV2ZWw/Om51bWJlcik7XHJcblx0cHVibGljIHVwbG9hZEZyb21EYXRhKGRhdGE6YW55LCBzaWRlOm51bWJlciwgbWlwbGV2ZWw6bnVtYmVyID0gMClcclxuXHR7XHJcblx0XHRpZiAoZGF0YSBpbnN0YW5jZW9mIEJpdG1hcERhdGEpXHJcblx0XHRcdGRhdGEgPSAoPEJpdG1hcERhdGE+IGRhdGEpLmltYWdlRGF0YTtcclxuXHJcblx0XHR0aGlzLl9nbC5iaW5kVGV4dHVyZSh0aGlzLl9nbC5URVhUVVJFX0NVQkVfTUFQLCB0aGlzLl90ZXh0dXJlKTtcclxuXHRcdHRoaXMuX2dsLnRleEltYWdlMkQodGhpcy5fdGV4dHVyZVNlbGVjdG9yRGljdGlvbmFyeVtzaWRlXSwgbWlwbGV2ZWwsIHRoaXMuX2dsLlJHQkEsIHRoaXMuX2dsLlJHQkEsIHRoaXMuX2dsLlVOU0lHTkVEX0JZVEUsIGRhdGEpO1xyXG5cdFx0dGhpcy5fZ2wuYmluZFRleHR1cmUodGhpcy5fZ2wuVEVYVFVSRV9DVUJFX01BUCwgbnVsbCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdXBsb2FkQ29tcHJlc3NlZFRleHR1cmVGcm9tQnl0ZUFycmF5KGRhdGE6Qnl0ZUFycmF5LCBieXRlQXJyYXlPZmZzZXQ6bnVtYmVyIC8qdWludCovLCBhc3luYzpib29sZWFuID0gZmFsc2UpXHJcblx0e1xyXG5cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgc2l6ZSgpOm51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9zaXplO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGdldCBnbFRleHR1cmUoKTpXZWJHTFRleHR1cmVcclxuXHR7XHJcblx0XHRyZXR1cm4gdGhpcy5fdGV4dHVyZTtcclxuXHR9XHJcbn1cclxuXHJcbmV4cG9ydCA9IEN1YmVUZXh0dXJlV2ViR0w7Il19