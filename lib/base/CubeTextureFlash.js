var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/data/BitmapData");
var ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");
var OpCodes = require("awayjs-stagegl/lib/base/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
var CubeTextureFlash = (function (_super) {
    __extends(CubeTextureFlash, _super);
    function CubeTextureFlash(context, size, format, forRTT, streaming) {
        if (streaming === void 0) { streaming = false; }
        _super.call(this);
        this._context = context;
        this._size = size;
        this._context.addStream(String.fromCharCode(OpCodes.initCubeTexture, (forRTT ? OpCodes.trueValue : OpCodes.falseValue)) + size + "," + streaming + "," + format + "$");
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    Object.defineProperty(CubeTextureFlash.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    CubeTextureFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeCubeTexture) + this._pId.toString() + ",");
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    CubeTextureFlash.prototype.uploadFromData = function (data, side, miplevel) {
        if (miplevel === void 0) { miplevel = 0; }
        if (data instanceof BitmapData) {
            data = data.imageData.data;
        }
        else if (data instanceof HTMLImageElement) {
            var can = document.createElement("canvas");
            var w = data.width;
            var h = data.height;
            can.width = w;
            can.height = h;
            var ctx = can.getContext("2d");
            ctx.drawImage(data, 0, 0);
            data = ctx.getImageData(0, 0, w, h).data;
        }
        var pos = 0;
        var bytes = ByteArrayBase.internalGetBase64String(data.length, function () {
            return data[pos++];
        }, null);
        this._context.addStream(String.fromCharCode(OpCodes.uploadBytesCubeTexture) + this._pId + "," + miplevel + "," + side + "," + (this.size >> miplevel) + "," + bytes + "%");
        this._context.execute();
    };
    CubeTextureFlash.prototype.uploadCompressedTextureFromByteArray = function (data, byteArrayOffset /*uint*/, async) {
        if (async === void 0) { async = false; }
    };
    return CubeTextureFlash;
})(ResourceBaseFlash);
module.exports = CubeTextureFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0N1YmVUZXh0dXJlRmxhc2gudHMiXSwibmFtZXMiOlsiQ3ViZVRleHR1cmVGbGFzaCIsIkN1YmVUZXh0dXJlRmxhc2guY29uc3RydWN0b3IiLCJDdWJlVGV4dHVyZUZsYXNoLnNpemUiLCJDdWJlVGV4dHVyZUZsYXNoLmRpc3Bvc2UiLCJDdWJlVGV4dHVyZUZsYXNoLnVwbG9hZEZyb21EYXRhIiwiQ3ViZVRleHR1cmVGbGFzaC51cGxvYWRDb21wcmVzc2VkVGV4dHVyZUZyb21CeXRlQXJyYXkiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sVUFBVSxXQUFlLGlDQUFpQyxDQUFDLENBQUM7QUFFbkUsSUFBTyxhQUFhLFdBQWMscUNBQXFDLENBQUMsQ0FBQztBQUl6RSxJQUFPLE9BQU8sV0FBZ0IsaUNBQWlDLENBQUMsQ0FBQztBQUNqRSxJQUFPLGlCQUFpQixXQUFhLDJDQUEyQyxDQUFDLENBQUM7QUFFbEYsSUFBTSxnQkFBZ0I7SUFBU0EsVUFBekJBLGdCQUFnQkEsVUFBMEJBO0lBVS9DQSxTQVZLQSxnQkFBZ0JBLENBVVRBLE9BQXNCQSxFQUFFQSxJQUFXQSxFQUFFQSxNQUFhQSxFQUFFQSxNQUFjQSxFQUFFQSxTQUF5QkE7UUFBekJDLHlCQUF5QkEsR0FBekJBLGlCQUF5QkE7UUFFeEdBLGlCQUFPQSxDQUFDQTtRQUVSQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFbEJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLGVBQWVBLEVBQUVBLENBQUNBLE1BQU1BLEdBQUVBLE9BQU9BLENBQUNBLFNBQVNBLEdBQUdBLE9BQU9BLENBQUNBLFVBQVVBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLEdBQUdBLEdBQUdBLFNBQVNBLEdBQUdBLEdBQUdBLEdBQUdBLE1BQU1BLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3RLQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNwQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBO0lBZkRELHNCQUFXQSxrQ0FBSUE7YUFBZkE7WUFFQ0UsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7UUFDbkJBLENBQUNBOzs7T0FBQUY7SUFjTUEsa0NBQU9BLEdBQWRBO1FBRUNHLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLGtCQUFrQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDdEdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRXJDQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFJTUgseUNBQWNBLEdBQXJCQSxVQUFzQkEsSUFBUUEsRUFBRUEsSUFBV0EsRUFBRUEsUUFBbUJBO1FBQW5CSSx3QkFBbUJBLEdBQW5CQSxZQUFtQkE7UUFFL0RBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLFlBQVlBLFVBQVVBLENBQUNBLENBQUNBLENBQUNBO1lBQ2hDQSxJQUFJQSxHQUFpQkEsSUFBS0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDM0NBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLFlBQVlBLGdCQUFnQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0NBLElBQUlBLEdBQUdBLEdBQUdBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO1lBQzNDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQTtZQUNuQkEsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDcEJBLEdBQUdBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBO1lBQ2RBLEdBQUdBLENBQUNBLE1BQU1BLEdBQUdBLENBQUNBLENBQUNBO1lBQ2ZBLElBQUlBLEdBQUdBLEdBQUdBLEdBQUdBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQy9CQSxHQUFHQSxDQUFDQSxTQUFTQSxDQUFDQSxJQUFJQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUMxQkEsSUFBSUEsR0FBR0EsR0FBR0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFDMUNBLENBQUNBO1FBRURBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQ1pBLElBQUlBLEtBQUtBLEdBQUdBLGFBQWFBLENBQUNBLHVCQUF1QkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsRUFBRUE7WUFDOUQsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBQ3BCLENBQUMsRUFBRUEsSUFBSUEsQ0FBQ0EsQ0FBQ0E7UUFFVEEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0Esc0JBQXNCQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFHQSxRQUFRQSxHQUFHQSxHQUFHQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxJQUFJQSxRQUFRQSxDQUFDQSxHQUFHQSxHQUFHQSxHQUFHQSxLQUFLQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUMzS0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFDekJBLENBQUNBO0lBRU1KLCtEQUFvQ0EsR0FBM0NBLFVBQTRDQSxJQUFjQSxFQUFFQSxlQUFlQSxDQUFRQSxRQUFEQSxBQUFTQSxFQUFFQSxLQUFxQkE7UUFBckJLLHFCQUFxQkEsR0FBckJBLGFBQXFCQTtJQUdsSEEsQ0FBQ0E7SUFDRkwsdUJBQUNBO0FBQURBLENBN0RBLEFBNkRDQSxFQTdEOEIsaUJBQWlCLEVBNkQvQztBQUVELEFBQTBCLGlCQUFqQixnQkFBZ0IsQ0FBQyIsImZpbGUiOiJiYXNlL0N1YmVUZXh0dXJlRmxhc2guanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2RhdGEvQml0bWFwRGF0YVwiKTtcclxuaW1wb3J0IEJ5dGVBcnJheVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvQnl0ZUFycmF5XCIpO1xyXG5pbXBvcnQgQnl0ZUFycmF5QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheUJhc2VcIik7XHJcblxyXG5pbXBvcnQgQ29udGV4dFN0YWdlM0RcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRTdGFnZTNEXCIpO1xyXG5pbXBvcnQgSUN1YmVUZXh0dXJlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lDdWJlVGV4dHVyZVwiKTtcclxuaW1wb3J0IE9wQ29kZXNcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9PcENvZGVzXCIpO1xyXG5pbXBvcnQgUmVzb3VyY2VCYXNlRmxhc2hcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9SZXNvdXJjZUJhc2VGbGFzaFwiKTtcclxuXHJcbmNsYXNzIEN1YmVUZXh0dXJlRmxhc2ggZXh0ZW5kcyBSZXNvdXJjZUJhc2VGbGFzaCBpbXBsZW1lbnRzIElDdWJlVGV4dHVyZVxyXG57XHJcblx0cHJpdmF0ZSBfY29udGV4dDpDb250ZXh0U3RhZ2UzRDtcclxuXHRwcml2YXRlIF9zaXplOm51bWJlcjtcclxuXHJcblx0cHVibGljIGdldCBzaXplKCk6bnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX3NpemU7XHJcblx0fVxyXG5cclxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OkNvbnRleHRTdGFnZTNELCBzaXplOm51bWJlciwgZm9ybWF0OnN0cmluZywgZm9yUlRUOmJvb2xlYW4sIHN0cmVhbWluZzpib29sZWFuID0gZmFsc2UpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuXHRcdHRoaXMuX3NpemUgPSBzaXplO1xyXG5cclxuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5pbml0Q3ViZVRleHR1cmUsIChmb3JSVFQ/IE9wQ29kZXMudHJ1ZVZhbHVlIDogT3BDb2Rlcy5mYWxzZVZhbHVlKSkgKyBzaXplICsgXCIsXCIgKyBzdHJlYW1pbmcgKyBcIixcIiArIGZvcm1hdCArIFwiJFwiKTtcclxuXHRcdHRoaXMuX3BJZCA9IHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xyXG5cdFx0dGhpcy5fY29udGV4dC5faUFkZFJlc291cmNlKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGRpc3Bvc2UoKVxyXG5cdHtcclxuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5kaXNwb3NlQ3ViZVRleHR1cmUpICsgdGhpcy5fcElkLnRvU3RyaW5nKCkgKyBcIixcIik7XHJcblx0XHR0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcclxuXHRcdHRoaXMuX2NvbnRleHQuX2lSZW1vdmVSZXNvdXJjZSh0aGlzKTtcclxuXHJcblx0XHR0aGlzLl9jb250ZXh0ID0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShiaXRtYXBEYXRhOkJpdG1hcERhdGEsIHNpZGU6bnVtYmVyLCBtaXBsZXZlbD86bnVtYmVyKTtcclxuXHRwdWJsaWMgdXBsb2FkRnJvbURhdGEoaW1hZ2U6SFRNTEltYWdlRWxlbWVudCwgc2lkZTpudW1iZXIsIG1pcGxldmVsPzpudW1iZXIpO1xyXG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShkYXRhOmFueSwgc2lkZTpudW1iZXIsIG1pcGxldmVsOm51bWJlciA9IDApXHJcblx0e1xyXG5cdFx0aWYgKGRhdGEgaW5zdGFuY2VvZiBCaXRtYXBEYXRhKSB7XHJcblx0XHRcdGRhdGEgPSAoPEJpdG1hcERhdGE+IGRhdGEpLmltYWdlRGF0YS5kYXRhO1xyXG5cdFx0fSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkge1xyXG5cdFx0XHR2YXIgY2FuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuXHRcdFx0dmFyIHcgPSBkYXRhLndpZHRoO1xyXG5cdFx0XHR2YXIgaCA9IGRhdGEuaGVpZ2h0O1xyXG5cdFx0XHRjYW4ud2lkdGggPSB3O1xyXG5cdFx0XHRjYW4uaGVpZ2h0ID0gaDtcclxuXHRcdFx0dmFyIGN0eCA9IGNhbi5nZXRDb250ZXh0KFwiMmRcIik7XHJcblx0XHRcdGN0eC5kcmF3SW1hZ2UoZGF0YSwgMCwgMCk7XHJcblx0XHRcdGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHcsIGgpLmRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBvcyA9IDA7XHJcblx0XHR2YXIgYnl0ZXMgPSBCeXRlQXJyYXlCYXNlLmludGVybmFsR2V0QmFzZTY0U3RyaW5nKGRhdGEubGVuZ3RoLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBkYXRhW3BvcysrXTtcclxuXHRcdH0sIG51bGwpO1xyXG5cclxuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy51cGxvYWRCeXRlc0N1YmVUZXh0dXJlKSArIHRoaXMuX3BJZCArIFwiLFwiICsgbWlwbGV2ZWwgKyBcIixcIiArIHNpZGUgKyBcIixcIiArICh0aGlzLnNpemUgPj4gbWlwbGV2ZWwpICsgXCIsXCIgKyBieXRlcyArIFwiJVwiKTtcclxuXHRcdHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHVwbG9hZENvbXByZXNzZWRUZXh0dXJlRnJvbUJ5dGVBcnJheShkYXRhOkJ5dGVBcnJheSwgYnl0ZUFycmF5T2Zmc2V0Om51bWJlciAvKnVpbnQqLywgYXN5bmM6Ym9vbGVhbiA9IGZhbHNlKVxyXG5cdHtcclxuXHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBDdWJlVGV4dHVyZUZsYXNoOyJdfQ==