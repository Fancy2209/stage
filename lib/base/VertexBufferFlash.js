var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var OpCodes = require("awayjs-stagegl/lib/base/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
var VertexBufferFlash = (function (_super) {
    __extends(VertexBufferFlash, _super);
    function VertexBufferFlash(context, numVertices, data32PerVertex) {
        _super.call(this);
        this._context = context;
        this._numVertices = numVertices;
        this._data32PerVertex = data32PerVertex;
        this._context.addStream(String.fromCharCode(OpCodes.initVertexBuffer, data32PerVertex + OpCodes.intMask) + numVertices.toString() + ",");
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    VertexBufferFlash.prototype.uploadFromArray = function (data, startVertex, numVertices) {
        this._context.addStream(String.fromCharCode(OpCodes.uploadArrayVertexBuffer, this._pId + OpCodes.intMask) + data.join() + "#" + [startVertex, numVertices].join() + ",");
        this._context.execute();
    };
    Object.defineProperty(VertexBufferFlash.prototype, "numVertices", {
        get: function () {
            return this._numVertices;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexBufferFlash.prototype, "data32PerVertex", {
        get: function () {
            return this._data32PerVertex;
        },
        enumerable: true,
        configurable: true
    });
    VertexBufferFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeVertexBuffer, this._pId + OpCodes.intMask));
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    return VertexBufferFlash;
})(ResourceBaseFlash);
module.exports = VertexBufferFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1ZlcnRleEJ1ZmZlckZsYXNoLnRzIl0sIm5hbWVzIjpbIlZlcnRleEJ1ZmZlckZsYXNoIiwiVmVydGV4QnVmZmVyRmxhc2guY29uc3RydWN0b3IiLCJWZXJ0ZXhCdWZmZXJGbGFzaC51cGxvYWRGcm9tQXJyYXkiLCJWZXJ0ZXhCdWZmZXJGbGFzaC5udW1WZXJ0aWNlcyIsIlZlcnRleEJ1ZmZlckZsYXNoLmRhdGEzMlBlclZlcnRleCIsIlZlcnRleEJ1ZmZlckZsYXNoLmRpc3Bvc2UiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU8sT0FBTyxXQUFnQixpQ0FBaUMsQ0FBQyxDQUFDO0FBQ2pFLElBQU8saUJBQWlCLFdBQWEsMkNBQTJDLENBQUMsQ0FBQztBQUVsRixJQUFNLGlCQUFpQjtJQUFTQSxVQUExQkEsaUJBQWlCQSxVQUEwQkE7SUFNaERBLFNBTktBLGlCQUFpQkEsQ0FNVkEsT0FBc0JBLEVBQUVBLFdBQWtCQSxFQUFFQSxlQUFzQkE7UUFFN0VDLGlCQUFPQSxDQUFDQTtRQUVSQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsV0FBV0EsQ0FBQ0E7UUFDaENBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsZUFBZUEsQ0FBQ0E7UUFDeENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLGdCQUFnQkEsRUFBRUEsZUFBZUEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsV0FBV0EsQ0FBQ0EsUUFBUUEsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDeklBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3BDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFFTUQsMkNBQWVBLEdBQXRCQSxVQUF1QkEsSUFBYUEsRUFBRUEsV0FBa0JBLEVBQUVBLFdBQWtCQTtRQUUzRUUsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsdUJBQXVCQSxFQUFFQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxXQUFXQSxFQUFFQSxXQUFXQSxDQUFDQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN6S0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFDekJBLENBQUNBO0lBRURGLHNCQUFXQSwwQ0FBV0E7YUFBdEJBO1lBRUNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBO1FBQzFCQSxDQUFDQTs7O09BQUFIO0lBRURBLHNCQUFXQSw4Q0FBZUE7YUFBMUJBO1lBRUNJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7UUFDOUJBLENBQUNBOzs7T0FBQUo7SUFFTUEsbUNBQU9BLEdBQWRBO1FBRUNLLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLG1CQUFtQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRXJDQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFDRkwsd0JBQUNBO0FBQURBLENBMUNBLEFBMENDQSxFQTFDK0IsaUJBQWlCLEVBMENoRDtBQUVELEFBQTJCLGlCQUFsQixpQkFBaUIsQ0FBQyIsImZpbGUiOiJiYXNlL1ZlcnRleEJ1ZmZlckZsYXNoLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250ZXh0U3RhZ2UzRFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dFN0YWdlM0RcIik7XG5pbXBvcnQgSVZlcnRleEJ1ZmZlclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSVZlcnRleEJ1ZmZlclwiKTtcbmltcG9ydCBPcENvZGVzXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvT3BDb2Rlc1wiKTtcbmltcG9ydCBSZXNvdXJjZUJhc2VGbGFzaFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1Jlc291cmNlQmFzZUZsYXNoXCIpO1xuXG5jbGFzcyBWZXJ0ZXhCdWZmZXJGbGFzaCBleHRlbmRzIFJlc291cmNlQmFzZUZsYXNoIGltcGxlbWVudHMgSVZlcnRleEJ1ZmZlclxue1xuXHRwcml2YXRlIF9jb250ZXh0OkNvbnRleHRTdGFnZTNEO1xuXHRwcml2YXRlIF9udW1WZXJ0aWNlczpudW1iZXI7XG5cdHByaXZhdGUgX2RhdGEzMlBlclZlcnRleDpudW1iZXI7XG5cblx0Y29uc3RydWN0b3IoY29udGV4dDpDb250ZXh0U3RhZ2UzRCwgbnVtVmVydGljZXM6bnVtYmVyLCBkYXRhMzJQZXJWZXJ0ZXg6bnVtYmVyKVxuXHR7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuXHRcdHRoaXMuX251bVZlcnRpY2VzID0gbnVtVmVydGljZXM7XG5cdFx0dGhpcy5fZGF0YTMyUGVyVmVydGV4ID0gZGF0YTMyUGVyVmVydGV4O1xuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5pbml0VmVydGV4QnVmZmVyLCBkYXRhMzJQZXJWZXJ0ZXggKyBPcENvZGVzLmludE1hc2spICsgbnVtVmVydGljZXMudG9TdHJpbmcoKSArIFwiLFwiKTtcblx0XHR0aGlzLl9wSWQgPSB0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcblx0XHR0aGlzLl9jb250ZXh0Ll9pQWRkUmVzb3VyY2UodGhpcyk7XG5cdH1cblxuXHRwdWJsaWMgdXBsb2FkRnJvbUFycmF5KGRhdGE6bnVtYmVyW10sIHN0YXJ0VmVydGV4Om51bWJlciwgbnVtVmVydGljZXM6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fY29udGV4dC5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLnVwbG9hZEFycmF5VmVydGV4QnVmZmVyLCB0aGlzLl9wSWQgKyBPcENvZGVzLmludE1hc2spICsgZGF0YS5qb2luKCkgKyBcIiNcIiArIFtzdGFydFZlcnRleCwgbnVtVmVydGljZXNdLmpvaW4oKSArIFwiLFwiKTtcblx0XHR0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgbnVtVmVydGljZXMoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl9udW1WZXJ0aWNlcztcblx0fVxuXG5cdHB1YmxpYyBnZXQgZGF0YTMyUGVyVmVydGV4KCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZGF0YTMyUGVyVmVydGV4O1xuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0dGhpcy5fY29udGV4dC5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLmRpc3Bvc2VWZXJ0ZXhCdWZmZXIsIHRoaXMuX3BJZCArIE9wQ29kZXMuaW50TWFzaykpO1xuXHRcdHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xuXHRcdHRoaXMuX2NvbnRleHQuX2lSZW1vdmVSZXNvdXJjZSh0aGlzKTtcblxuXHRcdHRoaXMuX2NvbnRleHQgPSBudWxsO1xuXHR9XG59XG5cbmV4cG9ydCA9IFZlcnRleEJ1ZmZlckZsYXNoOyJdfQ==