import { Rectangle } from "@awayjs/core/lib/geom/Rectangle";
import { BitmapImage2D } from "@awayjs/core/lib/image/BitmapImage2D";
import { ICubeTexture } from "../base/ICubeTexture";
import { IIndexBuffer } from "../base/IIndexBuffer";
import { IProgram } from "../base/IProgram";
import { ITexture } from "../base/ITexture";
import { ITextureBase } from "../base/ITextureBase";
import { IVertexBuffer } from "../base/IVertexBuffer";
export interface IContextGL {
    container: HTMLElement;
    clear(red?: number, green?: number, blue?: number, alpha?: number, depth?: number, stencil?: number, mask?: number): any;
    configureBackBuffer(width: number, height: number, antiAlias: number, enableDepthAndStencil?: boolean): any;
    createCubeTexture(size: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): ICubeTexture;
    createIndexBuffer(numIndices: number): IIndexBuffer;
    createProgram(): IProgram;
    createTexture(width: number, height: number, format: string, optimizeForRenderToTexture: boolean, streamingLevels?: number): ITexture;
    createVertexBuffer(numVertices: number, dataPerVertex: number): IVertexBuffer;
    dispose(): any;
    drawToBitmapImage2D(destination: BitmapImage2D): any;
    drawIndices(mode: string, indexBuffer: IIndexBuffer, firstIndex?: number, numIndices?: number): any;
    drawVertices(mode: string, firstVertex?: number, numVertices?: number): any;
    present(): any;
    setBlendFactors(sourceFactor: string, destinationFactor: string): any;
    setColorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): any;
    setStencilActions(triangleFace?: string, compareMode?: string, actionOnBothPass?: string, actionOnDepthFail?: string, actionOnDepthPassStencilFail?: string, coordinateSystem?: string): any;
    setStencilReferenceValue(referenceValue: number, readMask?: number, writeMask?: number): any;
    setCulling(triangleFaceToCull: string, coordinateSystem?: string): any;
    setDepthTest(depthMask: boolean, passCompareMode: string): any;
    setProgram(program: IProgram): any;
    setProgramConstantsFromArray(programType: number, data: Float32Array): any;
    setSamplerStateAt(sampler: number, wrap: string, filter: string, mipfilter: string): any;
    setScissorRectangle(rectangle: Rectangle): any;
    setTextureAt(sampler: number, texture: ITextureBase): any;
    setVertexBufferAt(index: number, buffer: IVertexBuffer, bufferOffset?: number, format?: number): any;
    setRenderToTexture(target: ITextureBase, enableDepthAndStencil?: boolean, antiAlias?: number, surfaceSelector?: number): any;
    setRenderToBackBuffer(): any;
}
