var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/data/BitmapData");
var ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");
var OpCodes = require("awayjs-stagegl/lib/base/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/base/ResourceBaseFlash");
var TextureFlash = (function (_super) {
    __extends(TextureFlash, _super);
    function TextureFlash(context, width, height, format, forRTT, streaming) {
        if (streaming === void 0) { streaming = false; }
        _super.call(this);
        this._context = context;
        this._width = width;
        this._height = height;
        this._context.addStream(String.fromCharCode(OpCodes.initTexture, (forRTT ? OpCodes.trueValue : OpCodes.falseValue)) + width + "," + height + "," + streaming + "," + format + "$");
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    Object.defineProperty(TextureFlash.prototype, "width", {
        get: function () {
            return this._width;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TextureFlash.prototype, "height", {
        get: function () {
            return this._height;
        },
        enumerable: true,
        configurable: true
    });
    TextureFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeTexture) + this._pId.toString() + ",");
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    TextureFlash.prototype.uploadFromData = function (data, miplevel) {
        if (miplevel === void 0) { miplevel = 0; }
        if (data instanceof BitmapData) {
            data = data.imageData.data;
        }
        else if (data instanceof HTMLImageElement) {
            var can = document.createElement("canvas");
            var w = data.width;
            var h = data.height;
            can.width = w;
            can.height = h;
            var ctx = can.getContext("2d");
            ctx.drawImage(data, 0, 0);
            data = ctx.getImageData(0, 0, w, h).data;
        }
        var pos = 0;
        var bytes = ByteArrayBase.internalGetBase64String(data.length, function () {
            return data[pos++];
        }, null);
        this._context.addStream(String.fromCharCode(OpCodes.uploadBytesTexture) + this._pId + "," + miplevel + "," + (this._width >> miplevel) + "," + (this._height >> miplevel) + "," + bytes + "%");
        this._context.execute();
    };
    return TextureFlash;
})(ResourceBaseFlash);
module.exports = TextureFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1RleHR1cmVGbGFzaC50cyJdLCJuYW1lcyI6WyJUZXh0dXJlRmxhc2giLCJUZXh0dXJlRmxhc2guY29uc3RydWN0b3IiLCJUZXh0dXJlRmxhc2gud2lkdGgiLCJUZXh0dXJlRmxhc2guaGVpZ2h0IiwiVGV4dHVyZUZsYXNoLmRpc3Bvc2UiLCJUZXh0dXJlRmxhc2gudXBsb2FkRnJvbURhdGEiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLElBQU8sVUFBVSxXQUFlLGlDQUFpQyxDQUFDLENBQUM7QUFDbkUsSUFBTyxhQUFhLFdBQWMscUNBQXFDLENBQUMsQ0FBQztBQUl6RSxJQUFPLE9BQU8sV0FBZ0IsaUNBQWlDLENBQUMsQ0FBQztBQUNqRSxJQUFPLGlCQUFpQixXQUFhLDJDQUEyQyxDQUFDLENBQUM7QUFFbEYsSUFBTSxZQUFZO0lBQVNBLFVBQXJCQSxZQUFZQSxVQUEwQkE7SUFnQjNDQSxTQWhCS0EsWUFBWUEsQ0FnQkxBLE9BQXNCQSxFQUFFQSxLQUFZQSxFQUFFQSxNQUFhQSxFQUFFQSxNQUFhQSxFQUFFQSxNQUFjQSxFQUFFQSxTQUF5QkE7UUFBekJDLHlCQUF5QkEsR0FBekJBLGlCQUF5QkE7UUFFeEhBLGlCQUFPQSxDQUFDQTtRQUVSQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDcEJBLElBQUlBLENBQUNBLE9BQU9BLEdBQUdBLE1BQU1BLENBQUNBO1FBRXRCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxNQUFNQSxHQUFFQSxPQUFPQSxDQUFDQSxTQUFTQSxHQUFHQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxHQUFHQSxLQUFLQSxHQUFHQSxHQUFHQSxHQUFHQSxNQUFN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QUNBLGtCQUFrQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsUUFBUUEsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsTUFBTUEsSUFBSUEsUUFBUUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsSUFBSUEsUUFBUUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDL0xBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUNGTCxtQkFBQ0E7QUFBREEsQ0EvREEsQUErRENBLEVBL0QwQixpQkFBaUIsRUErRDNDO0FBRUQsQUFBc0IsaUJBQWIsWUFBWSxDQUFDIiwiZmlsZSI6ImJhc2UvVGV4dHVyZUZsYXNoLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCaXRtYXBEYXRhXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9kYXRhL0JpdG1hcERhdGFcIik7XHJcbmltcG9ydCBCeXRlQXJyYXlCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdXRpbHMvQnl0ZUFycmF5QmFzZVwiKTtcclxuXHJcbmltcG9ydCBDb250ZXh0U3RhZ2UzRFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dFN0YWdlM0RcIik7XHJcbmltcG9ydCBJVGV4dHVyZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lUZXh0dXJlXCIpO1xyXG5pbXBvcnQgT3BDb2Rlc1x0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL09wQ29kZXNcIik7XHJcbmltcG9ydCBSZXNvdXJjZUJhc2VGbGFzaFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1Jlc291cmNlQmFzZUZsYXNoXCIpO1xyXG5cclxuY2xhc3MgVGV4dHVyZUZsYXNoIGV4dGVuZHMgUmVzb3VyY2VCYXNlRmxhc2ggaW1wbGVtZW50cyBJVGV4dHVyZVxyXG57XHJcblx0cHJpdmF0ZSBfY29udGV4dDpDb250ZXh0U3RhZ2UzRDtcclxuXHRwcml2YXRlIF93aWR0aDpudW1iZXI7XHJcblx0cHJpdmF0ZSBfaGVpZ2h0Om51bWJlcjtcclxuXHJcblx0cHVibGljIGdldCB3aWR0aCgpOm51bWJlclxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl93aWR0aDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgaGVpZ2h0KCk6bnVtYmVyXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX2hlaWdodDtcclxuXHR9XHJcblxyXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQ6Q29udGV4dFN0YWdlM0QsIHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlciwgZm9ybWF0OnN0cmluZywgZm9yUlRUOmJvb2xlYW4sIHN0cmVhbWluZzpib29sZWFuID0gZmFsc2UpXHJcblx0e1xyXG5cdFx0c3VwZXIoKTtcclxuXHJcblx0XHR0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcclxuXHRcdHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0dGhpcy5fY29udGV4dC5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLmluaXRUZXh0dXJlLCAoZm9yUlRUPyBPcENvZGVzLnRydWVWYWx1ZSA6IE9wQ29kZXMuZmFsc2VWYWx1ZSkpICsgd2lkdGggKyBcIixcIiArIGhlaWdodCArIFwiLFwiICsgc3RyZWFtaW5nICsgXCIsXCIgKyBmb3JtYXQgKyBcIiRcIik7XHJcblx0XHR0aGlzLl9wSWQgPSB0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcclxuXHRcdHRoaXMuX2NvbnRleHQuX2lBZGRSZXNvdXJjZSh0aGlzKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBkaXNwb3NlKClcclxuXHR7XHJcblx0XHR0aGlzLl9jb250ZXh0LmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuZGlzcG9zZVRleHR1cmUpICsgdGhpcy5fcElkLnRvU3RyaW5nKCkgKyBcIixcIik7XHJcblx0XHR0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcclxuXHRcdHRoaXMuX2NvbnRleHQuX2lSZW1vdmVSZXNvdXJjZSh0aGlzKTtcclxuXHJcblx0XHR0aGlzLl9jb250ZXh0ID0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShiaXRtYXBEYXRhOkJpdG1hcERhdGEsIG1pcGxldmVsPzpudW1iZXIpO1xyXG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShpbWFnZTpIVE1MSW1hZ2VFbGVtZW50LCBtaXBsZXZlbD86bnVtYmVyKTtcclxuXHRwdWJsaWMgdXBsb2FkRnJvbURhdGEoZGF0YTphbnksIG1pcGxldmVsOm51bWJlciA9IDApXHJcblx0e1xyXG5cdFx0aWYgKGRhdGEgaW5zdGFuY2VvZiBCaXRtYXBEYXRhKSB7XHJcblx0XHRcdGRhdGEgPSAoPEJpdG1hcERhdGE+IGRhdGEpLmltYWdlRGF0YS5kYXRhO1xyXG5cdFx0fSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkge1xyXG5cdFx0XHR2YXIgY2FuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcclxuXHRcdFx0dmFyIHcgPSBkYXRhLndpZHRoO1xyXG5cdFx0XHR2YXIgaCA9IGRhdGEuaGVpZ2h0O1xyXG5cdFx0XHRjYW4ud2lkdGggPSB3O1xyXG5cdFx0XHRjYW4uaGVpZ2h0ID0gaDtcclxuXHRcdFx0dmFyIGN0eCA9IGNhbi5nZXRDb250ZXh0KFwiMmRcIik7XHJcblx0XHRcdGN0eC5kcmF3SW1hZ2UoZGF0YSwgMCwgMCk7XHJcblx0XHRcdGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHcsIGgpLmRhdGE7XHJcblx0XHR9XHJcblxyXG5cdFx0dmFyIHBvcyA9IDA7XHJcblx0XHR2YXIgYnl0ZXMgPSBCeXRlQXJyYXlCYXNlLmludGVybmFsR2V0QmFzZTY0U3RyaW5nKGRhdGEubGVuZ3RoLCBmdW5jdGlvbiAoKSB7XHJcblx0XHRcdHJldHVybiBkYXRhW3BvcysrXTtcclxuXHRcdH0sIG51bGwpO1xyXG5cclxuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy51cGxvYWRCeXRlc1RleHR1cmUpICsgdGhpcy5fcElkICsgXCIsXCIgKyBtaXBsZXZlbCArIFwiLFwiICsgKHRoaXMuX3dpZHRoID4+IG1pcGxldmVsKSArIFwiLFwiICsgKHRoaXMuX2hlaWdodCA+PiBtaXBsZXZlbCkgKyBcIixcIiArIGJ5dGVzICsgXCIlXCIpO1xyXG5cdFx0dGhpcy5fY29udGV4dC5leGVjdXRlKCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBUZXh0dXJlRmxhc2g7Il19