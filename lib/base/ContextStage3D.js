var swfobject = require("awayjs-stagegl/lib/swfobject");
var Sampler = require("awayjs-stagegl/lib/aglsl/Sampler");
var ContextGLClearMask = require("awayjs-stagegl/lib/base/ContextGLClearMask");
var ContextGLProgramType = require("awayjs-stagegl/lib/base/ContextGLProgramType");
var CubeTextureFlash = require("awayjs-stagegl/lib/base/CubeTextureFlash");
var IndexBufferFlash = require("awayjs-stagegl/lib/base/IndexBufferFlash");
var OpCodes = require("awayjs-stagegl/lib/base/OpCodes");
var ProgramFlash = require("awayjs-stagegl/lib/base/ProgramFlash");
var TextureFlash = require("awayjs-stagegl/lib/base/TextureFlash");
var VertexBufferFlash = require("awayjs-stagegl/lib/base/VertexBufferFlash");
var ContextStage3D = (function () {
    //TODO: get rid of hack that fixes including definition file
    function ContextStage3D(container, callback, include) {
        this._cmdStream = "";
        this._resources = new Array();
        var swfVersionStr = "11.0.0";
        // To use express install, set to playerProductInstall.swf, otherwise the empty string.
        var flashvars = {
            id: container.id
        };
        var params = {
            quality: "high",
            bgcolor: "#ffffff",
            allowscriptaccess: "sameDomain",
            allowfullscreen: "true",
            wmode: "direct"
        };
        this._errorCheckingEnabled = false;
        this._iDriverInfo = "Unknown";
        var attributes = {
            salign: "tl",
            id: container.id,
            name: container["name"] //TODO: needed?
        };
        this._oldCanvas = container.cloneNode(); // keep the old one to restore on dispose
        this._oldParent = container.parentNode;
        var context3dObj = this;
        ContextStage3D.contexts[container.id] = this;
        function callbackSWFObject(callbackInfo) {
            if (!callbackInfo.success)
                return;
            context3dObj._container = callbackInfo.ref;
            context3dObj._iCallback = callback;
        }
        swfobject.embedSWF("libs/molehill_js_flashbridge.swf", container.id, String(container.width), String(container.height), swfVersionStr, "", flashvars, params, attributes, callbackSWFObject);
    }
    Object.defineProperty(ContextStage3D.prototype, "container", {
        get: function () {
            return this._container;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextStage3D.prototype, "driverInfo", {
        get: function () {
            return this._iDriverInfo;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ContextStage3D.prototype, "errorCheckingEnabled", {
        get: function () {
            return this._errorCheckingEnabled;
        },
        set: function (value) {
            if (this._errorCheckingEnabled == value)
                return;
            this._errorCheckingEnabled = value;
            this.addStream(String.fromCharCode(OpCodes.enableErrorChecking, value ? OpCodes.trueValue : OpCodes.falseValue));
            this.execute();
        },
        enumerable: true,
        configurable: true
    });
    ContextStage3D.prototype._iAddResource = function (resource) {
        this._resources.push(resource);
    };
    ContextStage3D.prototype._iRemoveResource = function (resource) {
        this._resources.splice(this._resources.indexOf(resource));
    };
    ContextStage3D.prototype.createTexture = function (width, height, format, optimizeForRenderToTexture, streamingLevels) {
        if (streamingLevels === void 0) { streamingLevels = 0; }
        //TODO:streaming
        return new TextureFlash(this, width, height, format, optimizeForRenderToTexture);
    };
    ContextStage3D.prototype.createCubeTexture = function (size, format, optimizeForRenderToTexture, streamingLevels) {
        if (streamingLevels === void 0) { streamingLevels = 0; }
        //TODO:streaming
        return new CubeTextureFlash(this, size, format, optimizeForRenderToTexture);
    };
    ContextStage3D.prototype.setTextureAt = function (sampler, texture) {
        if (texture) {
            this.addStream(String.fromCharCode(OpCodes.setTextureAt) + sampler + "," + texture.id + ",");
        }
        else {
            this.addStream(String.fromCharCode(OpCodes.clearTextureAt) + sampler.toString() + ",");
        }
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setSamplerStateAt = function (sampler, wrap, filter, mipfilter) {
        //nothing to do here
    };
    ContextStage3D.prototype.setStencilActions = function (triangleFace, compareMode, actionOnBothPass, actionOnDepthFail, actionOnDepthPassStencilFail) {
        if (triangleFace === void 0) { triangleFace = "frontAndBack"; }
        if (compareMode === void 0) { compareMode = "always"; }
        if (actionOnBothPass === void 0) { actionOnBothPass = "keep"; }
        if (actionOnDepthFail === void 0) { actionOnDepthFail = "keep"; }
        if (actionOnDepthPassStencilFail === void 0) { actionOnDepthPassStencilFail = "keep"; }
        this.addStream(String.fromCharCode(OpCodes.setStencilActions) + triangleFace + "$" + compareMode + "$" + actionOnBothPass + "$" + actionOnDepthFail + "$" + actionOnDepthPassStencilFail + "$");
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setStencilReferenceValue = function (referenceValue, readMask, writeMask) {
        if (readMask === void 0) { readMask = 255; }
        if (writeMask === void 0) { writeMask = 255; }
        this.addStream(String.fromCharCode(OpCodes.setStencilReferenceValue, referenceValue + OpCodes.intMask, readMask + OpCodes.intMask, writeMask + OpCodes.intMask));
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setCulling = function (triangleFaceToCull, coordinateSystem) {
        if (coordinateSystem === void 0) { coordinateSystem = "leftHanded"; }
        //TODO implement coordinateSystem option
        this.addStream(String.fromCharCode(OpCodes.setCulling) + triangleFaceToCull + "$");
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.drawTriangles = function (indexBuffer, firstIndex, numTriangles) {
        if (firstIndex === void 0) { firstIndex = 0; }
        if (numTriangles === void 0) { numTriangles = -1; }
        firstIndex = firstIndex || 0;
        if (!numTriangles || numTriangles < 0)
            numTriangles = indexBuffer.numIndices / 3;
        this.addStream(String.fromCharCode(OpCodes.drawTriangles, indexBuffer.id + OpCodes.intMask) + firstIndex + "," + numTriangles + ",");
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setProgramConstantsFromMatrix = function (programType, firstRegister, matrix, transposedMatrix) {
        //this._gl.uniformMatrix4fv(this._gl.getUniformLocation(this._currentProgram.glProgram, this._uniformLocationNameDictionary[programType]), !transposedMatrix, new Float32Array(matrix.rawData));
        if (transposedMatrix === void 0) { transposedMatrix = false; }
        //TODO remove special case for WebGL matrix calls?
        var d = matrix.rawData;
        if (transposedMatrix) {
            this.setProgramConstantsFromArray(programType, firstRegister, [d[0], d[4], d[8], d[12]], 1);
            this.setProgramConstantsFromArray(programType, firstRegister + 1, [d[1], d[5], d[9], d[13]], 1);
            this.setProgramConstantsFromArray(programType, firstRegister + 2, [d[2], d[6], d[10], d[14]], 1);
            this.setProgramConstantsFromArray(programType, firstRegister + 3, [d[3], d[7], d[11], d[15]], 1);
        }
        else {
            this.setProgramConstantsFromArray(programType, firstRegister, [d[0], d[1], d[2], d[3]], 1);
            this.setProgramConstantsFromArray(programType, firstRegister + 1, [d[4], d[5], d[6], d[7]], 1);
            this.setProgramConstantsFromArray(programType, firstRegister + 2, [d[8], d[9], d[10], d[11]], 1);
            this.setProgramConstantsFromArray(programType, firstRegister + 3, [d[12], d[13], d[14], d[15]], 1);
        }
    };
    ContextStage3D.prototype.setProgramConstantsFromArray = function (programType, firstRegister, data, numRegisters) {
        if (numRegisters === void 0) { numRegisters = -1; }
        var startIndex;
        var target = (programType == ContextGLProgramType.VERTEX) ? OpCodes.trueValue : OpCodes.falseValue;
        for (var i = 0; i < numRegisters; i++) {
            startIndex = i * 4;
            this.addStream(String.fromCharCode(OpCodes.setProgramConstant, target, (firstRegister + i) + OpCodes.intMask) + data[startIndex] + "," + data[startIndex + 1] + "," + data[startIndex + 2] + "," + data[startIndex + 3] + ",");
            if (ContextStage3D.debug)
                this.execute();
        }
    };
    ContextStage3D.prototype.setProgram = function (program) {
        this.addStream(String.fromCharCode(OpCodes.setProgram, program.id + OpCodes.intMask));
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.present = function () {
        this.addStream(String.fromCharCode(OpCodes.present));
        this.execute();
    };
    ContextStage3D.prototype.clear = function (red, green, blue, alpha, depth, stencil, mask) {
        if (red === void 0) { red = 0; }
        if (green === void 0) { green = 0; }
        if (blue === void 0) { blue = 0; }
        if (alpha === void 0) { alpha = 1; }
        if (depth === void 0) { depth = 1; }
        if (stencil === void 0) { stencil = 0; }
        if (mask === void 0) { mask = ContextGLClearMask.ALL; }
        this.addStream(String.fromCharCode(OpCodes.clear) + red + "," + green + "," + blue + "," + alpha + "," + depth + "," + stencil + "," + mask + ",");
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.createProgram = function () {
        return new ProgramFlash(this);
    };
    ContextStage3D.prototype.createVertexBuffer = function (numVertices, data32PerVertex) {
        return new VertexBufferFlash(this, numVertices, data32PerVertex);
    };
    ContextStage3D.prototype.createIndexBuffer = function (numIndices) {
        return new IndexBufferFlash(this, numIndices);
    };
    ContextStage3D.prototype.configureBackBuffer = function (width, height, antiAlias, enableDepthAndStencil) {
        if (enableDepthAndStencil === void 0) { enableDepthAndStencil = true; }
        this._width = width;
        this._height = height;
        //TODO: add Anitalias setting
        this.addStream(String.fromCharCode(OpCodes.configureBackBuffer) + width + "," + height + ",");
    };
    ContextStage3D.prototype.drawToBitmapData = function (destination) {
        //TODO
    };
    ContextStage3D.prototype.setVertexBufferAt = function (index, buffer, bufferOffset, format) {
        if (bufferOffset === void 0) { bufferOffset = 0; }
        if (format === void 0) { format = null; }
        if (buffer) {
            this.addStream(String.fromCharCode(OpCodes.setVertexBufferAt, index + OpCodes.intMask) + buffer.id + "," + bufferOffset + "," + format + "$");
        }
        else {
            this.addStream(String.fromCharCode(OpCodes.clearVertexBufferAt, index + OpCodes.intMask));
        }
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setColorMask = function (red, green, blue, alpha) {
        this.addStream(String.fromCharCode(OpCodes.setColorMask, red ? OpCodes.trueValue : OpCodes.falseValue, green ? OpCodes.trueValue : OpCodes.falseValue, blue ? OpCodes.trueValue : OpCodes.falseValue, alpha ? OpCodes.trueValue : OpCodes.falseValue));
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setBlendFactors = function (sourceFactor, destinationFactor) {
        this.addStream(String.fromCharCode(OpCodes.setBlendFactors) + sourceFactor + "$" + destinationFactor + "$");
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setRenderToTexture = function (target, enableDepthAndStencil, antiAlias, surfaceSelector) {
        if (enableDepthAndStencil === void 0) { enableDepthAndStencil = false; }
        if (antiAlias === void 0) { antiAlias = 0; }
        if (surfaceSelector === void 0) { surfaceSelector = 0; }
        if (target === null || target === undefined) {
            this.addStream(String.fromCharCode(OpCodes.clearRenderToTexture));
        }
        else {
            this.addStream(String.fromCharCode(OpCodes.setRenderToTexture, enableDepthAndStencil ? OpCodes.trueValue : OpCodes.falseValue) + target.id + "," + (antiAlias || 0) + ",");
        }
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setRenderToBackBuffer = function () {
        this.addStream(String.fromCharCode(OpCodes.clearRenderToTexture));
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setScissorRectangle = function (rectangle) {
        if (rectangle) {
            this.addStream(String.fromCharCode(OpCodes.setScissorRect) + rectangle.x + "," + rectangle.y + "," + rectangle.width + "," + rectangle.height + ",");
        }
        else {
            this.addStream(String.fromCharCode(OpCodes.clearScissorRect));
        }
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.setDepthTest = function (depthMask, passCompareMode) {
        this.addStream(String.fromCharCode(OpCodes.setDepthTest, depthMask ? OpCodes.trueValue : OpCodes.falseValue) + passCompareMode + "$");
        if (ContextStage3D.debug)
            this.execute();
    };
    ContextStage3D.prototype.dispose = function () {
        if (this._container == null)
            return;
        console.log("Context3D dispose, releasing " + this._resources.length + " resources.");
        while (this._resources.length)
            this._resources[0].dispose();
        if (this._container) {
            // encode command
            this.addStream(String.fromCharCode(OpCodes.disposeContext));
            this.execute();
            swfobject.removeSWF(this._oldCanvas.id);
            if (this._oldCanvas && this._oldParent) {
                this._oldParent.appendChild(this._oldCanvas);
                this._oldParent = null;
            }
            this._container = null;
        }
        this._oldCanvas = null;
    };
    ContextStage3D.prototype.addStream = function (stream) {
        this._cmdStream += stream;
    };
    ContextStage3D.prototype.execute = function () {
        if (ContextStage3D.logStream)
            console.log(this._cmdStream);
        var result = this._container["CallFunction"]("<invoke name=\"execStage3dOpStream\" returntype=\"javascript\"><arguments><string>" + this._cmdStream + "</string></arguments></invoke>");
        if (Number(result) <= -3)
            throw "Exec stream failed";
        this._cmdStream = "";
        return Number(result);
    };
    ContextStage3D.contexts = new Object();
    ContextStage3D.maxvertexconstants = 128;
    ContextStage3D.maxfragconstants = 28;
    ContextStage3D.maxtemp = 8;
    ContextStage3D.maxstreams = 8;
    ContextStage3D.maxtextures = 8;
    ContextStage3D.defaultsampler = new Sampler();
    ContextStage3D.debug = false;
    ContextStage3D.logStream = false;
    return ContextStage3D;
})();
/**
* global function for flash callback
*/
function mountain_js_context_available(id, driverInfo) {
    var ctx = ContextStage3D.contexts[id];
    if (ctx._iCallback) {
        ctx._iDriverInfo = driverInfo;
        // get out of the current JS stack frame and call back from flash player
        var timeOutId = window.setTimeout(function () {
            window.clearTimeout(timeOutId);
            try {
                ctx._iCallback(ctx);
            }
            catch (e) {
                console.log("Callback failed during flash initialization with '" + e.toString() + "'");
            }
        }, 1);
    }
}
module.exports = ContextStage3D;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRTdGFnZTNELnRzIl0sIm5hbWVzIjpbIkNvbnRleHRTdGFnZTNEIiwiQ29udGV4dFN0YWdlM0QuY29uc3RydWN0b3IiLCJDb250ZXh0U3RhZ2UzRC5jb25zdHJ1Y3Rvci5jYWxsYmFja1NXRk9iamVjdCIsIkNvbnRleHRTdGFnZTNELmNvbnRhaW5lciIsIkNvbnRleHRTdGFnZTNELmRyaXZlckluZm8iLCJDb250ZXh0U3RhZ2UzRC5lcnJvckNoZWNraW5nRW5hYmxlZCIsIkNvbnRleHRTdGFnZTNELl9pQWRkUmVzb3VyY2UiLCJDb250ZXh0U3RhZ2UzRC5faVJlbW92ZVJlc291cmNlIiwiQ29udGV4dFN0YWdlM0QuY3JlYXRlVGV4dHVyZSIsIkNvbnRleHRTdGFnZTNELmNyZWF0ZUN1YmVUZXh0dXJlIiwiQ29udGV4dFN0YWdlM0Quc2V0VGV4dHVyZUF0IiwiQ29udGV4dFN0YWdlM0Quc2V0U2FtcGxlclN0YXRlQXQiLCJDb250ZXh0U3RhZ2UzRC5zZXRTdGVuY2lsQWN0aW9ucyIsIkNvbnRleHRTdGFnZTNELnNldFN0ZW5jaWxSZWZlcmVuY2VWYWx1ZSIsIkNvbnRleHRTdGFnZTNELnNldEN1bGxpbmciLCJDb250ZXh0U3RhZ2UzRC5kcmF3VHJpYW5nbGVzIiwiQ29udGV4dFN0YWdlM0Quc2V0UHJvZ3JhbUNvbnN0YW50c0Zyb21NYXRyaXgiLCJDb250ZXh0U3RhZ2UzRC5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5IiwiQ29udGV4dFN0YWdlM0Quc2V0UHJvZ3JhbSIsIkNvbnRleHRTdGFnZTNELnByZXNlbnQiLCJDb250ZXh0U3RhZ2UzRC5jbGVhciIsIkNvbnRleHRTdGFnZTNELmNyZWF0ZVByb2dyYW0iLCJDb250ZXh0U3RhZ2UzRC5jcmVhdGVWZXJ0ZXhCdWZmZXIiLCJDb250ZXh0U3RhZ2UzRC5jcmVhdGVJbmRleEJ1ZmZlciIsIkNvbnRleHRTdGFnZTNELmNvbmZpZ3VyZUJhY2tCdWZmZXIiLCJDb250ZXh0U3RhZ2UzRC5kcmF3VG9CaXRtYXBEYXRhIiwiQ29udGV4dFN0YWdlM0Quc2V0VmVydGV4QnVmZmVyQXQiLCJDb250ZXh0U3RhZ2UzRC5zZXRDb2xvck1hc2siLCJDb250ZXh0U3RhZ2UzRC5zZXRCbGVuZEZhY3RvcnMiLCJDb250ZXh0U3RhZ2UzRC5zZXRSZW5kZXJUb1RleHR1cmUiLCJDb250ZXh0U3RhZ2UzRC5zZXRSZW5kZXJUb0JhY2tCdWZmZXIiLCJDb250ZXh0U3RhZ2UzRC5zZXRTY2lzc29yUmVjdGFuZ2xlIiwiQ29udGV4dFN0YWdlM0Quc2V0RGVwdGhUZXN0IiwiQ29udGV4dFN0YWdlM0QuZGlzcG9zZSIsIkNvbnRleHRTdGFnZTNELmFkZFN0cmVhbSIsIkNvbnRleHRTdGFnZTNELmV4ZWN1dGUiLCJtb3VudGFpbl9qc19jb250ZXh0X2F2YWlsYWJsZSJdLCJtYXBwaW5ncyI6IkFBSUEsSUFBTyxTQUFTLFdBQWUsOEJBQThCLENBQUMsQ0FBQztBQUMvRCxJQUFPLE9BQU8sV0FBZ0Isa0NBQWtDLENBQUMsQ0FBQztBQUNsRSxJQUFPLGtCQUFrQixXQUFhLDRDQUE0QyxDQUFDLENBQUM7QUFDcEYsSUFBTyxvQkFBb0IsV0FBYSw4Q0FBOEMsQ0FBQyxDQUFDO0FBQ3hGLElBQU8sZ0JBQWdCLFdBQWMsMENBQTBDLENBQUMsQ0FBQztBQUVqRixJQUFPLGdCQUFnQixXQUFjLDBDQUEwQyxDQUFDLENBQUM7QUFDakYsSUFBTyxPQUFPLFdBQWdCLGlDQUFpQyxDQUFDLENBQUM7QUFDakUsSUFBTyxZQUFZLFdBQWUsc0NBQXNDLENBQUMsQ0FBQztBQUMxRSxJQUFPLFlBQVksV0FBZSxzQ0FBc0MsQ0FBQyxDQUFDO0FBRTFFLElBQU8saUJBQWlCLFdBQWEsMkNBQTJDLENBQUMsQ0FBQztBQUVsRixJQUFNLGNBQWM7SUFxRG5CQSw0REFBNERBO0lBQzVEQSxTQXRES0EsY0FBY0EsQ0FzRFBBLFNBQTJCQSxFQUFFQSxRQUFxQ0EsRUFBRUEsT0FBZ0JBO1FBdkN4RkMsZUFBVUEsR0FB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LElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDOUZBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbEdBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkdBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEdBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1BBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDN0ZBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakdBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDbkdBLElBQUlBLENBQUNBLDRCQUE0QkEsQ0FBQ0EsV0FBV0EsRUFBRUEsYUFBYUEsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEdBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRU1oQixxREFBNEJBLEdB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OUJBLEFBQ0FBLHdFQUR3RUE7WUFDcEVBLFNBQVNBLEdBQUdBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO1lBRWpDLE1BQU0sQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDL0IsSUFBQSxDQUFDO2dCQUNBLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDckIsQ0FBRTtZQUFBLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvREFBb0QsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDeEYsQ0FBQztRQUNGLENBQUMsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDUEEsQ0FBQ0E7QUFDRkEsQ0FBQ0E7QUFyQkQsaUJBQVMsY0FBYyxDQUFDIiwiZmlsZSI6ImJhc2UvQ29udGV4dFN0YWdlM0QuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEJpdG1hcERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2Jhc2UvQml0bWFwRGF0YVwiKTtcclxuaW1wb3J0IE1hdHJpeDNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XHJcbmltcG9ydCBSZWN0YW5nbGVcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vUmVjdGFuZ2xlXCIpO1xyXG5cclxuaW1wb3J0IHN3Zm9iamVjdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvc3dmb2JqZWN0XCIpO1xyXG5pbXBvcnQgU2FtcGxlclx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hZ2xzbC9TYW1wbGVyXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMQ2xlYXJNYXNrXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvQ29udGV4dEdMQ2xlYXJNYXNrXCIpO1xyXG5pbXBvcnQgQ29udGV4dEdMUHJvZ3JhbVR5cGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9Db250ZXh0R0xQcm9ncmFtVHlwZVwiKTtcclxuaW1wb3J0IEN1YmVUZXh0dXJlRmxhc2hcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0N1YmVUZXh0dXJlRmxhc2hcIik7XHJcbmltcG9ydCBJQ29udGV4dEdMXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9JQ29udGV4dEdMXCIpO1xyXG5pbXBvcnQgSW5kZXhCdWZmZXJGbGFzaFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSW5kZXhCdWZmZXJGbGFzaFwiKTtcclxuaW1wb3J0IE9wQ29kZXNcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9PcENvZGVzXCIpO1xyXG5pbXBvcnQgUHJvZ3JhbUZsYXNoXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1Byb2dyYW1GbGFzaFwiKTtcclxuaW1wb3J0IFRleHR1cmVGbGFzaFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9UZXh0dXJlRmxhc2hcIik7XHJcbmltcG9ydCBSZXNvdXJjZUJhc2VGbGFzaFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1Jlc291cmNlQmFzZUZsYXNoXCIpO1xyXG5pbXBvcnQgVmVydGV4QnVmZmVyRmxhc2hcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9WZXJ0ZXhCdWZmZXJGbGFzaFwiKTtcclxuXHJcbmNsYXNzIENvbnRleHRTdGFnZTNEIGltcGxlbWVudHMgSUNvbnRleHRHTFxyXG57XHJcblx0cHVibGljIHN0YXRpYyBjb250ZXh0czpPYmplY3QgPSBuZXcgT2JqZWN0KCk7XHJcblx0cHVibGljIHN0YXRpYyBtYXh2ZXJ0ZXhjb25zdGFudHM6bnVtYmVyID0gMTI4O1xyXG5cdHB1YmxpYyBzdGF0aWMgbWF4ZnJhZ2NvbnN0YW50czpudW1iZXIgPSAyODtcclxuXHRwdWJsaWMgc3RhdGljIG1heHRlbXA6bnVtYmVyID0gODtcclxuXHRwdWJsaWMgc3RhdGljIG1heHN0cmVhbXM6bnVtYmVyID0gODtcclxuXHRwdWJsaWMgc3RhdGljIG1heHRleHR1cmVzOm51bWJlciA9IDg7XHJcblx0cHVibGljIHN0YXRpYyBkZWZhdWx0c2FtcGxlciA9IG5ldyBTYW1wbGVyKCk7XHJcblxyXG5cdHB1YmxpYyBfaURyaXZlckluZm87XHJcblxyXG5cdHByaXZhdGUgX2NvbnRhaW5lcjpIVE1MRWxlbWVudDtcclxuXHRwcml2YXRlIF93aWR0aDpudW1iZXI7XHJcblx0cHJpdmF0ZSBfaGVpZ2h0Om51bWJlcjtcclxuXHRwcml2YXRlIF9jbWRTdHJlYW06c3RyaW5nID0gXCJcIjtcclxuXHRwcml2YXRlIF9lcnJvckNoZWNraW5nRW5hYmxlZDpib29sZWFuO1xyXG5cdHByaXZhdGUgX3Jlc291cmNlczpBcnJheTxSZXNvdXJjZUJhc2VGbGFzaD47XHJcblx0cHJpdmF0ZSBfb2xkQ2FudmFzOkhUTUxDYW52YXNFbGVtZW50O1xyXG5cdHByaXZhdGUgX29sZFBhcmVudDpIVE1MRWxlbWVudDtcclxuXHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgZGVidWc6Ym9vbGVhbiA9IGZhbHNlO1xyXG5cdHB1YmxpYyBzdGF0aWMgbG9nU3RyZWFtOmJvb2xlYW4gPSBmYWxzZTtcclxuXHJcblx0cHVibGljIF9pQ2FsbGJhY2s6KGNvbnRleHQ6SUNvbnRleHRHTCkgPT4gdm9pZDtcclxuXHJcblx0cHVibGljIGdldCBjb250YWluZXIoKTpIVE1MRWxlbWVudFxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9jb250YWluZXI7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0IGRyaXZlckluZm8oKVxyXG5cdHtcclxuXHRcdHJldHVybiB0aGlzLl9pRHJpdmVySW5mbztcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgZXJyb3JDaGVja2luZ0VuYWJsZWQoKTpib29sZWFuXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX2Vycm9yQ2hlY2tpbmdFbmFibGVkO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldCBlcnJvckNoZWNraW5nRW5hYmxlZCh2YWx1ZTpib29sZWFuKVxyXG5cdHtcclxuXHRcdGlmICh0aGlzLl9lcnJvckNoZWNraW5nRW5hYmxlZCA9PSB2YWx1ZSlcclxuXHRcdFx0cmV0dXJuO1xyXG5cclxuXHRcdHRoaXMuX2Vycm9yQ2hlY2tpbmdFbmFibGVkID0gdmFsdWU7XHJcblxyXG5cdFx0dGhpcy5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLmVuYWJsZUVycm9yQ2hlY2tpbmcsIHZhbHVlPyBPcENvZGVzLnRydWVWYWx1ZSA6IE9wQ29kZXMuZmFsc2VWYWx1ZSkpO1xyXG5cdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHQvL1RPRE86IGdldCByaWQgb2YgaGFjayB0aGF0IGZpeGVzIGluY2x1ZGluZyBkZWZpbml0aW9uIGZpbGVcclxuXHRjb25zdHJ1Y3Rvcihjb250YWluZXI6SFRNTENhbnZhc0VsZW1lbnQsIGNhbGxiYWNrOihjb250ZXh0OklDb250ZXh0R0wpID0+IHZvaWQsIGluY2x1ZGU/OlNhbXBsZXIpXHJcblx0e1xyXG5cdFx0dGhpcy5fcmVzb3VyY2VzID0gbmV3IEFycmF5PFJlc291cmNlQmFzZUZsYXNoPigpO1xyXG5cclxuXHRcdHZhciBzd2ZWZXJzaW9uU3RyID0gXCIxMS4wLjBcIjtcclxuXHJcblx0XHQvLyBUbyB1c2UgZXhwcmVzcyBpbnN0YWxsLCBzZXQgdG8gcGxheWVyUHJvZHVjdEluc3RhbGwuc3dmLCBvdGhlcndpc2UgdGhlIGVtcHR5IHN0cmluZy5cclxuXHRcdHZhciBmbGFzaHZhcnMgPSB7XHJcblx0XHRcdGlkOmNvbnRhaW5lci5pZFxyXG5cdFx0fTtcclxuXHJcblx0XHR2YXIgcGFyYW1zID0ge1xyXG5cdFx0XHRxdWFsaXR5OlwiaGlnaFwiLFxyXG5cdFx0XHRiZ2NvbG9yOlwiI2ZmZmZmZlwiLFxyXG5cdFx0XHRhbGxvd3NjcmlwdGFjY2VzczpcInNhbWVEb21haW5cIixcclxuXHRcdFx0YWxsb3dmdWxsc2NyZWVuOlwidHJ1ZVwiLFxyXG5cdFx0XHR3bW9kZTpcImRpcmVjdFwiXHJcblx0XHR9O1xyXG5cclxuXHRcdHRoaXMuX2Vycm9yQ2hlY2tpbmdFbmFibGVkID0gZmFsc2U7XHJcblx0XHR0aGlzLl9pRHJpdmVySW5mbyA9IFwiVW5rbm93blwiO1xyXG5cclxuXHRcdHZhciBhdHRyaWJ1dGVzID0ge1xyXG5cdFx0XHRzYWxpZ246XCJ0bFwiLFxyXG5cdFx0XHRpZDpjb250YWluZXIuaWQsXHJcblx0XHRcdG5hbWU6Y29udGFpbmVyW1wibmFtZVwiXSAvL1RPRE86IG5lZWRlZD9cclxuXHRcdH07XHJcblxyXG5cdFx0dGhpcy5fb2xkQ2FudmFzID0gPEhUTUxDYW52YXNFbGVtZW50PiBjb250YWluZXIuY2xvbmVOb2RlKCk7IC8vIGtlZXAgdGhlIG9sZCBvbmUgdG8gcmVzdG9yZSBvbiBkaXNwb3NlXHJcblx0XHR0aGlzLl9vbGRQYXJlbnQgPSA8SFRNTEVsZW1lbnQ+IGNvbnRhaW5lci5wYXJlbnROb2RlO1xyXG5cclxuXHRcdHZhciBjb250ZXh0M2RPYmogPSB0aGlzO1xyXG5cdFx0Q29udGV4dFN0YWdlM0QuY29udGV4dHNbY29udGFpbmVyLmlkXSA9IHRoaXM7XHJcblxyXG5cdFx0ZnVuY3Rpb24gY2FsbGJhY2tTV0ZPYmplY3QoY2FsbGJhY2tJbmZvKVxyXG5cdFx0e1xyXG5cdFx0XHRpZiAoIWNhbGxiYWNrSW5mby5zdWNjZXNzKVxyXG5cdFx0XHRcdHJldHVybjtcclxuXHJcblx0XHRcdGNvbnRleHQzZE9iai5fY29udGFpbmVyID0gY2FsbGJhY2tJbmZvLnJlZjtcclxuXHRcdFx0Y29udGV4dDNkT2JqLl9pQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuXHRcdH1cclxuXHJcblx0XHRzd2ZvYmplY3QuZW1iZWRTV0YoXCJsaWJzL21vbGVoaWxsX2pzX2ZsYXNoYnJpZGdlLnN3ZlwiLCBjb250YWluZXIuaWQsIFN0cmluZyhjb250YWluZXIud2lkdGgpLCBTdHJpbmcoY29udGFpbmVyLmhlaWdodCksIHN3ZlZlcnNpb25TdHIsIFwiXCIsIGZsYXNodmFycywgcGFyYW1zLCBhdHRyaWJ1dGVzLCBjYWxsYmFja1NXRk9iamVjdCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgX2lBZGRSZXNvdXJjZShyZXNvdXJjZTpSZXNvdXJjZUJhc2VGbGFzaClcclxuXHR7XHJcblx0XHR0aGlzLl9yZXNvdXJjZXMucHVzaChyZXNvdXJjZSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgX2lSZW1vdmVSZXNvdXJjZShyZXNvdXJjZTpSZXNvdXJjZUJhc2VGbGFzaClcclxuXHR7XHJcblx0XHR0aGlzLl9yZXNvdXJjZXMuc3BsaWNlKHRoaXMuX3Jlc291cmNlcy5pbmRleE9mKHJlc291cmNlKSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgY3JlYXRlVGV4dHVyZSh3aWR0aDpudW1iZXIsIGhlaWdodDpudW1iZXIsIGZvcm1hdDpzdHJpbmcsIG9wdGltaXplRm9yUmVuZGVyVG9UZXh0dXJlOmJvb2xlYW4sIHN0cmVhbWluZ0xldmVsczpudW1iZXIgPSAwKTpUZXh0dXJlRmxhc2hcclxuXHR7XHJcblx0XHQvL1RPRE86c3RyZWFtaW5nXHJcblx0XHRyZXR1cm4gbmV3IFRleHR1cmVGbGFzaCh0aGlzLCB3aWR0aCwgaGVpZ2h0LCBmb3JtYXQsIG9wdGltaXplRm9yUmVuZGVyVG9UZXh0dXJlKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjcmVhdGVDdWJlVGV4dHVyZShzaXplOm51bWJlciwgZm9ybWF0OnN0cmluZywgb3B0aW1pemVGb3JSZW5kZXJUb1RleHR1cmU6Ym9vbGVhbiwgc3RyZWFtaW5nTGV2ZWxzOm51bWJlciA9IDApOkN1YmVUZXh0dXJlRmxhc2hcclxuXHR7XHJcblx0XHQvL1RPRE86c3RyZWFtaW5nXHJcblx0XHRyZXR1cm4gbmV3IEN1YmVUZXh0dXJlRmxhc2godGhpcywgc2l6ZSwgZm9ybWF0LCBvcHRpbWl6ZUZvclJlbmRlclRvVGV4dHVyZSk7XHJcblx0fVxyXG5cclxuXHJcblx0cHVibGljIHNldFRleHR1cmVBdChzYW1wbGVyOm51bWJlciwgdGV4dHVyZTpSZXNvdXJjZUJhc2VGbGFzaClcclxuXHR7XHJcblx0XHRpZiAodGV4dHVyZSkge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuc2V0VGV4dHVyZUF0KSArIHNhbXBsZXIgKyBcIixcIiArIHRleHR1cmUuaWQgKyBcIixcIik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuY2xlYXJUZXh0dXJlQXQpICsgc2FtcGxlci50b1N0cmluZygpICsgXCIsXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0U2FtcGxlclN0YXRlQXQoc2FtcGxlcjpudW1iZXIsIHdyYXA6c3RyaW5nLCBmaWx0ZXI6c3RyaW5nLCBtaXBmaWx0ZXI6c3RyaW5nKTp2b2lkXHJcblx0e1xyXG5cdFx0Ly9ub3RoaW5nIHRvIGRvIGhlcmVcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRTdGVuY2lsQWN0aW9ucyh0cmlhbmdsZUZhY2U6c3RyaW5nID0gXCJmcm9udEFuZEJhY2tcIiwgY29tcGFyZU1vZGU6c3RyaW5nID0gXCJhbHdheXNcIiwgYWN0aW9uT25Cb3RoUGFzczpzdHJpbmcgPSBcImtlZXBcIiwgYWN0aW9uT25EZXB0aEZhaWw6c3RyaW5nID0gXCJrZWVwXCIsIGFjdGlvbk9uRGVwdGhQYXNzU3RlbmNpbEZhaWw6c3RyaW5nID0gXCJrZWVwXCIpXHJcblx0e1xyXG5cdFx0dGhpcy5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLnNldFN0ZW5jaWxBY3Rpb25zKSArIHRyaWFuZ2xlRmFjZSArIFwiJFwiICsgY29tcGFyZU1vZGUgKyBcIiRcIiArIGFjdGlvbk9uQm90aFBhc3MgKyBcIiRcIiArIGFjdGlvbk9uRGVwdGhGYWlsICsgXCIkXCIgKyBhY3Rpb25PbkRlcHRoUGFzc1N0ZW5jaWxGYWlsICsgXCIkXCIpO1xyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0U3RlbmNpbFJlZmVyZW5jZVZhbHVlKHJlZmVyZW5jZVZhbHVlOm51bWJlciwgcmVhZE1hc2s6bnVtYmVyID0gMjU1LCB3cml0ZU1hc2s6bnVtYmVyID0gMjU1KVxyXG5cdHtcclxuXHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5zZXRTdGVuY2lsUmVmZXJlbmNlVmFsdWUsIHJlZmVyZW5jZVZhbHVlICsgT3BDb2Rlcy5pbnRNYXNrLCByZWFkTWFzayArIE9wQ29kZXMuaW50TWFzaywgd3JpdGVNYXNrICsgT3BDb2Rlcy5pbnRNYXNrKSk7XHJcblxyXG5cdFx0aWYgKENvbnRleHRTdGFnZTNELmRlYnVnKVxyXG5cdFx0XHR0aGlzLmV4ZWN1dGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRDdWxsaW5nKHRyaWFuZ2xlRmFjZVRvQ3VsbDpzdHJpbmcsIGNvb3JkaW5hdGVTeXN0ZW06c3RyaW5nID0gXCJsZWZ0SGFuZGVkXCIpXHJcblx0e1xyXG5cdFx0Ly9UT0RPIGltcGxlbWVudCBjb29yZGluYXRlU3lzdGVtIG9wdGlvblxyXG5cdFx0dGhpcy5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLnNldEN1bGxpbmcpICsgdHJpYW5nbGVGYWNlVG9DdWxsICsgXCIkXCIpO1xyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZHJhd1RyaWFuZ2xlcyhpbmRleEJ1ZmZlcjpJbmRleEJ1ZmZlckZsYXNoLCBmaXJzdEluZGV4Om51bWJlciA9IDAsIG51bVRyaWFuZ2xlczpudW1iZXIgPSAtMSlcclxuXHR7XHJcblx0XHRmaXJzdEluZGV4ID0gZmlyc3RJbmRleCB8fCAwO1xyXG5cdFx0aWYgKCFudW1UcmlhbmdsZXMgfHwgbnVtVHJpYW5nbGVzIDwgMClcclxuXHRcdFx0bnVtVHJpYW5nbGVzID0gaW5kZXhCdWZmZXIubnVtSW5kaWNlcy8zO1xyXG5cclxuXHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5kcmF3VHJpYW5nbGVzLCBpbmRleEJ1ZmZlci5pZCArIE9wQ29kZXMuaW50TWFzaykgKyBmaXJzdEluZGV4ICsgXCIsXCIgKyBudW1UcmlhbmdsZXMgKyBcIixcIik7XHJcblxyXG5cdFx0aWYgKENvbnRleHRTdGFnZTNELmRlYnVnKVxyXG5cdFx0XHR0aGlzLmV4ZWN1dGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRQcm9ncmFtQ29uc3RhbnRzRnJvbU1hdHJpeChwcm9ncmFtVHlwZTpzdHJpbmcsIGZpcnN0UmVnaXN0ZXI6bnVtYmVyLCBtYXRyaXg6TWF0cml4M0QsIHRyYW5zcG9zZWRNYXRyaXg6Ym9vbGVhbiA9IGZhbHNlKVxyXG5cdHtcclxuXHRcdC8vdGhpcy5fZ2wudW5pZm9ybU1hdHJpeDRmdih0aGlzLl9nbC5nZXRVbmlmb3JtTG9jYXRpb24odGhpcy5fY3VycmVudFByb2dyYW0uZ2xQcm9ncmFtLCB0aGlzLl91bmlmb3JtTG9jYXRpb25OYW1lRGljdGlvbmFyeVtwcm9ncmFtVHlwZV0pLCAhdHJhbnNwb3NlZE1hdHJpeCwgbmV3IEZsb2F0MzJBcnJheShtYXRyaXgucmF3RGF0YSkpO1xyXG5cclxuXHRcdC8vVE9ETyByZW1vdmUgc3BlY2lhbCBjYXNlIGZvciBXZWJHTCBtYXRyaXggY2FsbHM/XHJcblx0XHR2YXIgZDpudW1iZXJbXSA9IG1hdHJpeC5yYXdEYXRhO1xyXG5cdFx0aWYgKHRyYW5zcG9zZWRNYXRyaXgpIHtcclxuXHRcdFx0dGhpcy5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KHByb2dyYW1UeXBlLCBmaXJzdFJlZ2lzdGVyLCBbIGRbMF0sIGRbNF0sIGRbOF0sIGRbMTJdIF0sIDEpO1xyXG5cdFx0XHR0aGlzLnNldFByb2dyYW1Db25zdGFudHNGcm9tQXJyYXkocHJvZ3JhbVR5cGUsIGZpcnN0UmVnaXN0ZXIgKyAxLCBbIGRbMV0sIGRbNV0sIGRbOV0sIGRbMTNdIF0sIDEpO1xyXG5cdFx0XHR0aGlzLnNldFByb2dyYW1Db25zdGFudHNGcm9tQXJyYXkocHJvZ3JhbVR5cGUsIGZpcnN0UmVnaXN0ZXIgKyAyLCBbIGRbMl0sIGRbNl0sIGRbMTBdLCBkWzE0XSBdLCAxKTtcclxuXHRcdFx0dGhpcy5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KHByb2dyYW1UeXBlLCBmaXJzdFJlZ2lzdGVyICsgMywgWyBkWzNdLCBkWzddLCBkWzExXSwgZFsxNV0gXSwgMSk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLnNldFByb2dyYW1Db25zdGFudHNGcm9tQXJyYXkocHJvZ3JhbVR5cGUsIGZpcnN0UmVnaXN0ZXIsIFsgZFswXSwgZFsxXSwgZFsyXSwgZFszXSBdLCAxKTtcclxuXHRcdFx0dGhpcy5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KHByb2dyYW1UeXBlLCBmaXJzdFJlZ2lzdGVyICsgMSwgWyBkWzRdLCBkWzVdLCBkWzZdLCBkWzddIF0sIDEpO1xyXG5cdFx0XHR0aGlzLnNldFByb2dyYW1Db25zdGFudHNGcm9tQXJyYXkocHJvZ3JhbVR5cGUsIGZpcnN0UmVnaXN0ZXIgKyAyLCBbIGRbOF0sIGRbOV0sIGRbMTBdLCBkWzExXSBdLCAxKTtcclxuXHRcdFx0dGhpcy5zZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KHByb2dyYW1UeXBlLCBmaXJzdFJlZ2lzdGVyICsgMywgWyBkWzEyXSwgZFsxM10sIGRbMTRdLCBkWzE1XSBdLCAxKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRQcm9ncmFtQ29uc3RhbnRzRnJvbUFycmF5KHByb2dyYW1UeXBlOnN0cmluZywgZmlyc3RSZWdpc3RlcjpudW1iZXIsIGRhdGE6bnVtYmVyW10sIG51bVJlZ2lzdGVyczpudW1iZXIgPSAtMSlcclxuXHR7XHJcblx0XHR2YXIgc3RhcnRJbmRleDpudW1iZXI7XHJcblx0XHR2YXIgdGFyZ2V0Om51bWJlciA9IChwcm9ncmFtVHlwZSA9PSBDb250ZXh0R0xQcm9ncmFtVHlwZS5WRVJURVgpPyBPcENvZGVzLnRydWVWYWx1ZSA6IE9wQ29kZXMuZmFsc2VWYWx1ZTtcclxuXHRcdGZvciAodmFyIGk6bnVtYmVyID0gMDsgaSA8IG51bVJlZ2lzdGVyczsgaSsrKSB7XHJcblx0XHRcdHN0YXJ0SW5kZXggPSBpKjQ7XHJcblx0XHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5zZXRQcm9ncmFtQ29uc3RhbnQsIHRhcmdldCwgKGZpcnN0UmVnaXN0ZXIgKyBpKSArIE9wQ29kZXMuaW50TWFzaykgKyBkYXRhW3N0YXJ0SW5kZXhdICsgXCIsXCIgKyBkYXRhW3N0YXJ0SW5kZXggKyAxXSArIFwiLFwiICsgZGF0YVtzdGFydEluZGV4ICsgMl0gKyBcIixcIiArIGRhdGFbc3RhcnRJbmRleCArIDNdICsgXCIsXCIpO1xyXG5cclxuXHRcdFx0aWYgKENvbnRleHRTdGFnZTNELmRlYnVnKVxyXG5cdFx0XHRcdHRoaXMuZXhlY3V0ZSgpO1xyXG5cdFx0fVxyXG5cdH1cclxuXHJcblx0cHVibGljIHNldFByb2dyYW0ocHJvZ3JhbTpQcm9ncmFtRmxhc2gpXHJcblx0e1xyXG5cdFx0dGhpcy5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLnNldFByb2dyYW0sIHByb2dyYW0uaWQgKyBPcENvZGVzLmludE1hc2spKTtcclxuXHJcblx0XHRpZiAoQ29udGV4dFN0YWdlM0QuZGVidWcpXHJcblx0XHRcdHRoaXMuZXhlY3V0ZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHByZXNlbnQoKVxyXG5cdHtcclxuXHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5wcmVzZW50KSk7XHJcblx0XHR0aGlzLmV4ZWN1dGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjbGVhcihyZWQ6bnVtYmVyID0gMCwgZ3JlZW46bnVtYmVyID0gMCwgYmx1ZTpudW1iZXIgPSAwLCBhbHBoYTpudW1iZXIgPSAxLCBkZXB0aDpudW1iZXIgPSAxLCBzdGVuY2lsOm51bWJlciA9IDAsIG1hc2s6bnVtYmVyID0gQ29udGV4dEdMQ2xlYXJNYXNrLkFMTClcclxuXHR7XHJcblx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuY2xlYXIpICsgcmVkICsgXCIsXCIgKyBncmVlbiArIFwiLFwiICsgYmx1ZSArIFwiLFwiICsgYWxwaGEgKyBcIixcIiArIGRlcHRoICsgXCIsXCIgKyBzdGVuY2lsICsgXCIsXCIgKyBtYXNrICsgXCIsXCIpO1xyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgY3JlYXRlUHJvZ3JhbSgpOlByb2dyYW1GbGFzaFxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgUHJvZ3JhbUZsYXNoKHRoaXMpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGNyZWF0ZVZlcnRleEJ1ZmZlcihudW1WZXJ0aWNlczpudW1iZXIsIGRhdGEzMlBlclZlcnRleDpudW1iZXIpOlZlcnRleEJ1ZmZlckZsYXNoXHJcblx0e1xyXG5cdFx0cmV0dXJuIG5ldyBWZXJ0ZXhCdWZmZXJGbGFzaCh0aGlzLCBudW1WZXJ0aWNlcywgZGF0YTMyUGVyVmVydGV4KTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjcmVhdGVJbmRleEJ1ZmZlcihudW1JbmRpY2VzOm51bWJlcik6SW5kZXhCdWZmZXJGbGFzaFxyXG5cdHtcclxuXHRcdHJldHVybiBuZXcgSW5kZXhCdWZmZXJGbGFzaCh0aGlzLCBudW1JbmRpY2VzKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBjb25maWd1cmVCYWNrQnVmZmVyKHdpZHRoOm51bWJlciwgaGVpZ2h0Om51bWJlciwgYW50aUFsaWFzOm51bWJlciwgZW5hYmxlRGVwdGhBbmRTdGVuY2lsOmJvb2xlYW4gPSB0cnVlKVxyXG5cdHtcclxuXHRcdHRoaXMuX3dpZHRoID0gd2lkdGg7XHJcblx0XHR0aGlzLl9oZWlnaHQgPSBoZWlnaHQ7XHJcblxyXG5cdFx0Ly9UT0RPOiBhZGQgQW5pdGFsaWFzIHNldHRpbmdcclxuXHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5jb25maWd1cmVCYWNrQnVmZmVyKSArIHdpZHRoICsgXCIsXCIgKyBoZWlnaHQgKyBcIixcIik7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZHJhd1RvQml0bWFwRGF0YShkZXN0aW5hdGlvbjpCaXRtYXBEYXRhKVxyXG5cdHtcclxuXHRcdC8vVE9ET1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldFZlcnRleEJ1ZmZlckF0KGluZGV4Om51bWJlciwgYnVmZmVyOlZlcnRleEJ1ZmZlckZsYXNoLCBidWZmZXJPZmZzZXQ6bnVtYmVyID0gMCwgZm9ybWF0OnN0cmluZyA9IG51bGwpXHJcblx0e1xyXG5cdFx0aWYgKGJ1ZmZlcikge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuc2V0VmVydGV4QnVmZmVyQXQsIGluZGV4ICsgT3BDb2Rlcy5pbnRNYXNrKSArIGJ1ZmZlci5pZCArIFwiLFwiICsgYnVmZmVyT2Zmc2V0ICsgXCIsXCIgKyBmb3JtYXQgKyBcIiRcIik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuY2xlYXJWZXJ0ZXhCdWZmZXJBdCwgaW5kZXggKyBPcENvZGVzLmludE1hc2spKTtcclxuXHRcdH1cclxuXHJcblx0XHRpZiAoQ29udGV4dFN0YWdlM0QuZGVidWcpXHJcblx0XHRcdHRoaXMuZXhlY3V0ZSgpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHNldENvbG9yTWFzayhyZWQ6Ym9vbGVhbiwgZ3JlZW46Ym9vbGVhbiwgYmx1ZTpib29sZWFuLCBhbHBoYTpib29sZWFuKVxyXG5cdHtcclxuXHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5zZXRDb2xvck1hc2ssIHJlZD8gT3BDb2Rlcy50cnVlVmFsdWUgOiBPcENvZGVzLmZhbHNlVmFsdWUsIGdyZWVuPyBPcENvZGVzLnRydWVWYWx1ZSA6IE9wQ29kZXMuZmFsc2VWYWx1ZSwgYmx1ZT8gT3BDb2Rlcy50cnVlVmFsdWUgOiBPcENvZGVzLmZhbHNlVmFsdWUsIGFscGhhPyBPcENvZGVzLnRydWVWYWx1ZSA6IE9wQ29kZXMuZmFsc2VWYWx1ZSkpO1xyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0QmxlbmRGYWN0b3JzKHNvdXJjZUZhY3RvcjpzdHJpbmcsIGRlc3RpbmF0aW9uRmFjdG9yOnN0cmluZylcclxuXHR7XHJcblx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuc2V0QmxlbmRGYWN0b3JzKSArIHNvdXJjZUZhY3RvciArIFwiJFwiICsgZGVzdGluYXRpb25GYWN0b3IgKyBcIiRcIik7XHJcblxyXG5cdFx0aWYgKENvbnRleHRTdGFnZTNELmRlYnVnKVxyXG5cdFx0XHR0aGlzLmV4ZWN1dGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRSZW5kZXJUb1RleHR1cmUodGFyZ2V0OlJlc291cmNlQmFzZUZsYXNoLCBlbmFibGVEZXB0aEFuZFN0ZW5jaWw6Ym9vbGVhbiA9IGZhbHNlLCBhbnRpQWxpYXM6bnVtYmVyID0gMCwgc3VyZmFjZVNlbGVjdG9yOm51bWJlciA9IDApXHJcblx0e1xyXG5cdFx0aWYgKHRhcmdldCA9PT0gbnVsbCB8fCB0YXJnZXQgPT09IHVuZGVmaW5lZCkge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuY2xlYXJSZW5kZXJUb1RleHR1cmUpKTtcclxuXHRcdH0gZWxzZSB7XHJcblx0XHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5zZXRSZW5kZXJUb1RleHR1cmUsIGVuYWJsZURlcHRoQW5kU3RlbmNpbD8gT3BDb2Rlcy50cnVlVmFsdWUgOiBPcENvZGVzLmZhbHNlVmFsdWUpICsgdGFyZ2V0LmlkICsgXCIsXCIgKyAoYW50aUFsaWFzIHx8IDApICsgXCIsXCIpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHJcblx0cHVibGljIHNldFJlbmRlclRvQmFja0J1ZmZlcigpXHJcblx0e1xyXG5cdFx0dGhpcy5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLmNsZWFyUmVuZGVyVG9UZXh0dXJlKSk7XHJcblxyXG5cdFx0aWYgKENvbnRleHRTdGFnZTNELmRlYnVnKVxyXG5cdFx0XHR0aGlzLmV4ZWN1dGUoKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzZXRTY2lzc29yUmVjdGFuZ2xlKHJlY3RhbmdsZTpSZWN0YW5nbGUpXHJcblx0e1xyXG5cdFx0aWYgKHJlY3RhbmdsZSkge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuc2V0U2Npc3NvclJlY3QpICsgcmVjdGFuZ2xlLnggKyBcIixcIiArIHJlY3RhbmdsZS55ICsgXCIsXCIgKyByZWN0YW5nbGUud2lkdGggKyBcIixcIiArIHJlY3RhbmdsZS5oZWlnaHQgKyBcIixcIik7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuY2xlYXJTY2lzc29yUmVjdCkpO1xyXG5cdFx0fVxyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgc2V0RGVwdGhUZXN0KGRlcHRoTWFzazpib29sZWFuLCBwYXNzQ29tcGFyZU1vZGU6c3RyaW5nKVxyXG5cdHtcclxuXHRcdHRoaXMuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5zZXREZXB0aFRlc3QsIGRlcHRoTWFzaz8gT3BDb2Rlcy50cnVlVmFsdWUgOiBPcENvZGVzLmZhbHNlVmFsdWUpICsgcGFzc0NvbXBhcmVNb2RlICsgXCIkXCIpO1xyXG5cclxuXHRcdGlmIChDb250ZXh0U3RhZ2UzRC5kZWJ1ZylcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZGlzcG9zZSgpXHJcblx0e1xyXG5cdFx0aWYgKHRoaXMuX2NvbnRhaW5lciA9PSBudWxsKVxyXG5cdFx0XHRyZXR1cm47XHJcblxyXG5cdFx0Y29uc29sZS5sb2coXCJDb250ZXh0M0QgZGlzcG9zZSwgcmVsZWFzaW5nIFwiICsgdGhpcy5fcmVzb3VyY2VzLmxlbmd0aCArIFwiIHJlc291cmNlcy5cIik7XHJcblxyXG5cdFx0d2hpbGUgKHRoaXMuX3Jlc291cmNlcy5sZW5ndGgpXHJcblx0XHRcdHRoaXMuX3Jlc291cmNlc1swXS5kaXNwb3NlKCk7XHJcblxyXG5cdFx0aWYgKHRoaXMuX2NvbnRhaW5lcikge1xyXG5cdFx0XHQvLyBlbmNvZGUgY29tbWFuZFxyXG5cdFx0XHR0aGlzLmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuZGlzcG9zZUNvbnRleHQpKTtcclxuXHRcdFx0dGhpcy5leGVjdXRlKCk7XHJcblx0XHRcdHN3Zm9iamVjdC5yZW1vdmVTV0YodGhpcy5fb2xkQ2FudmFzLmlkKTtcclxuXHRcdFx0aWYgKHRoaXMuX29sZENhbnZhcyAmJiB0aGlzLl9vbGRQYXJlbnQpIHtcclxuXHRcdFx0XHR0aGlzLl9vbGRQYXJlbnQuYXBwZW5kQ2hpbGQodGhpcy5fb2xkQ2FudmFzKTtcclxuXHRcdFx0XHR0aGlzLl9vbGRQYXJlbnQgPSBudWxsO1xyXG5cdFx0XHR9XHJcblx0XHRcdHRoaXMuX2NvbnRhaW5lciA9IG51bGw7XHJcblx0XHR9XHJcblxyXG5cdFx0dGhpcy5fb2xkQ2FudmFzID0gbnVsbDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBhZGRTdHJlYW0oc3RyZWFtOnN0cmluZylcclxuXHR7XHJcblx0XHR0aGlzLl9jbWRTdHJlYW0gKz0gc3RyZWFtO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGV4ZWN1dGUoKTpudW1iZXJcclxuXHR7XHJcblx0XHRpZiAoQ29udGV4dFN0YWdlM0QubG9nU3RyZWFtKVxyXG5cdFx0XHRjb25zb2xlLmxvZyh0aGlzLl9jbWRTdHJlYW0pO1xyXG5cclxuXHRcdHZhciByZXN1bHQ6bnVtYmVyID0gdGhpcy5fY29udGFpbmVyW1wiQ2FsbEZ1bmN0aW9uXCJdKFwiPGludm9rZSBuYW1lPVxcXCJleGVjU3RhZ2UzZE9wU3RyZWFtXFxcIiByZXR1cm50eXBlPVxcXCJqYXZhc2NyaXB0XFxcIj48YXJndW1lbnRzPjxzdHJpbmc+XCIgKyB0aGlzLl9jbWRTdHJlYW0gKyBcIjwvc3RyaW5nPjwvYXJndW1lbnRzPjwvaW52b2tlPlwiKTtcclxuXHJcblx0XHRpZiAoTnVtYmVyKHJlc3VsdCkgPD0gLTMpXHJcblx0XHRcdHRocm93IFwiRXhlYyBzdHJlYW0gZmFpbGVkXCI7XHJcblxyXG5cdFx0dGhpcy5fY21kU3RyZWFtID0gXCJcIjtcclxuXHJcblx0XHRyZXR1cm4gTnVtYmVyKHJlc3VsdCk7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBDb250ZXh0U3RhZ2UzRDtcclxuXHJcbi8qKlxyXG4qIGdsb2JhbCBmdW5jdGlvbiBmb3IgZmxhc2ggY2FsbGJhY2tcclxuKi9cclxuZnVuY3Rpb24gbW91bnRhaW5fanNfY29udGV4dF9hdmFpbGFibGUoaWQsIGRyaXZlckluZm8pXHJcbntcclxuXHR2YXIgY3R4OkNvbnRleHRTdGFnZTNEID0gQ29udGV4dFN0YWdlM0QuY29udGV4dHNbaWRdO1xyXG5cdGlmIChjdHguX2lDYWxsYmFjaykge1xyXG5cdFx0Y3R4Ll9pRHJpdmVySW5mbyA9IGRyaXZlckluZm87XHJcblx0XHQvLyBnZXQgb3V0IG9mIHRoZSBjdXJyZW50IEpTIHN0YWNrIGZyYW1lIGFuZCBjYWxsIGJhY2sgZnJvbSBmbGFzaCBwbGF5ZXJcclxuXHRcdHZhciB0aW1lT3V0SWQgPSB3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbiAoKVxyXG5cdFx0e1xyXG5cdFx0XHR3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVPdXRJZCk7XHJcblx0XHRcdHRyeSB7XHJcblx0XHRcdFx0Y3R4Ll9pQ2FsbGJhY2soY3R4KTtcclxuXHRcdFx0fSBjYXRjaCAoZSkge1xyXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiQ2FsbGJhY2sgZmFpbGVkIGR1cmluZyBmbGFzaCBpbml0aWFsaXphdGlvbiB3aXRoICdcIiArIGUudG9TdHJpbmcoKSArIFwiJ1wiKTtcclxuXHRcdFx0fVxyXG5cdFx0fSwgMSk7XHJcblx0fVxyXG59XHJcbiJdfQ==