var AGALTokenizer = require("awayjs-stagegl/lib/aglsl/AGALTokenizer");
var AGLSLParser = require("awayjs-stagegl/lib/aglsl/AGLSLParser");
var ProgramWebGL = (function () {
    function ProgramWebGL(gl) {
        this._gl = gl;
        this._program = this._gl.createProgram();
    }
    ProgramWebGL.prototype.upload = function (vertexProgram, fragmentProgram) {
        var vertexString = ProgramWebGL._aglslParser.parse(ProgramWebGL._tokenizer.decribeAGALByteArray(vertexProgram));
        var fragmentString = ProgramWebGL._aglslParser.parse(ProgramWebGL._tokenizer.decribeAGALByteArray(fragmentProgram));
        this._vertexShader = this._gl.createShader(this._gl.VERTEX_SHADER);
        this._fragmentShader = this._gl.createShader(this._gl.FRAGMENT_SHADER);
        this._gl.shaderSource(this._vertexShader, vertexString);
        this._gl.compileShader(this._vertexShader);
        if (!this._gl.getShaderParameter(this._vertexShader, this._gl.COMPILE_STATUS)) {
            throw new Error(this._gl.getShaderInfoLog(this._vertexShader));
            return;
        }
        this._gl.shaderSource(this._fragmentShader, fragmentString);
        this._gl.compileShader(this._fragmentShader);
        if (!this._gl.getShaderParameter(this._fragmentShader, this._gl.COMPILE_STATUS)) {
            throw new Error(this._gl.getShaderInfoLog(this._fragmentShader));
            return;
        }
        this._gl.attachShader(this._program, this._vertexShader);
        this._gl.attachShader(this._program, this._fragmentShader);
        this._gl.linkProgram(this._program);
        if (!this._gl.getProgramParameter(this._program, this._gl.LINK_STATUS)) {
            throw new Error(this._gl.getProgramInfoLog(this._program));
        }
    };
    ProgramWebGL.prototype.dispose = function () {
        this._gl.deleteProgram(this._program);
    };
    ProgramWebGL.prototype.focusProgram = function () {
        this._gl.useProgram(this._program);
    };
    Object.defineProperty(ProgramWebGL.prototype, "glProgram", {
        get: function () {
            return this._program;
        },
        enumerable: true,
        configurable: true
    });
    ProgramWebGL._tokenizer = new AGALTokenizer();
    ProgramWebGL._aglslParser = new AGLSLParser();
    return ProgramWebGL;
})();
module.exports = ProgramWebGL;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL3Byb2dyYW13ZWJnbC50cyJdLCJuYW1lcyI6WyJQcm9ncmFtV2ViR0wiLCJQcm9ncmFtV2ViR0wuY29uc3RydWN0b3IiLCJQcm9ncmFtV2ViR0wudXBsb2FkIiwiUHJvZ3JhbVdlYkdMLmRpc3Bvc2UiLCJQcm9ncmFtV2ViR0wuZm9jdXNQcm9ncmFtIiwiUHJvZ3JhbVdlYkdMLmdsUHJvZ3JhbSJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTyxhQUFhLFdBQWMsd0NBQXdDLENBQUMsQ0FBQztBQUM1RSxJQUFPLFdBQVcsV0FBZSxzQ0FBc0MsQ0FBQyxDQUFDO0FBSXpFLElBQU0sWUFBWTtJQVVqQkEsU0FWS0EsWUFBWUEsQ0FVTEEsRUFBd0JBO1FBRW5DQyxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNkQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtJQUMxQ0EsQ0FBQ0E7SUFFTUQsNkJBQU1BLEdBQWJBLFVBQWNBLGFBQXVCQSxFQUFFQSxlQUF5QkE7UUFFL0RFLElBQUlBLFlBQVlBLEdBQVVBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLFVBQVVBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkhBLElBQUlBLGNBQWNBLEdBQVVBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLFVBQVVBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFM0hBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBQ25FQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUV2RUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsRUFBRUEsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBRTNDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQy9FQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBO1lBQy9EQSxNQUFNQSxDQUFDQTtRQUNSQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQTtRQUM1REEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFFN0NBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakZBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakVBLE1BQU1BLENBQUNBO1FBQ1JBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUMzREEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFFcENBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNURBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRU1GLDhCQUFPQSxHQUFkQTtRQUVDRyxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFFTUgsbUNBQVlBLEdBQW5CQTtRQUVDSSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUNwQ0EsQ0FBQ0E7SUFFREosc0JBQVdBLG1DQUFTQTthQUFwQkE7WUFFQ0ssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDdEJBLENBQUNBOzs7T0FBQUw7SUE1RGNBLHVCQUFVQSxHQUFpQkEsSUFBSUEsYUFBYUEsRUFBRUEsQ0FBQ0E7SUFDL0NBLHlCQUFZQSxHQUFlQSxJQUFJQSxXQUFXQSxFQUFFQSxDQUFDQTtJQTREN0RBLG1CQUFDQTtBQUFEQSxDQS9EQSxBQStEQ0EsSUFBQTtBQUVELEFBQXNCLGlCQUFiLFlBQVksQ0FBQyIsImZpbGUiOiJiYXNlL1Byb2dyYW1XZWJHTC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnl0ZUFycmF5XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9CeXRlQXJyYXlcIik7XG5cbmltcG9ydCBBR0FMVG9rZW5pemVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYWdsc2wvQUdBTFRva2VuaXplclwiKTtcbmltcG9ydCBBR0xTTFBhcnNlclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYWdsc2wvQUdMU0xQYXJzZXJcIik7XG5pbXBvcnQgSVByb2dyYW1cdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9JUHJvZ3JhbVwiKTtcblxuXG5jbGFzcyBQcm9ncmFtV2ViR0wgaW1wbGVtZW50cyBJUHJvZ3JhbVxue1xuXHRwcml2YXRlIHN0YXRpYyBfdG9rZW5pemVyOkFHQUxUb2tlbml6ZXIgPSBuZXcgQUdBTFRva2VuaXplcigpO1xuXHRwcml2YXRlIHN0YXRpYyBfYWdsc2xQYXJzZXI6QUdMU0xQYXJzZXIgPSBuZXcgQUdMU0xQYXJzZXIoKTtcblxuXHRwcml2YXRlIF9nbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG5cdHByaXZhdGUgX3Byb2dyYW06V2ViR0xQcm9ncmFtO1xuXHRwcml2YXRlIF92ZXJ0ZXhTaGFkZXI6V2ViR0xTaGFkZXI7XG5cdHByaXZhdGUgX2ZyYWdtZW50U2hhZGVyOldlYkdMU2hhZGVyO1xuXG5cdGNvbnN0cnVjdG9yKGdsOldlYkdMUmVuZGVyaW5nQ29udGV4dClcblx0e1xuXHRcdHRoaXMuX2dsID0gZ2w7XG5cdFx0dGhpcy5fcHJvZ3JhbSA9IHRoaXMuX2dsLmNyZWF0ZVByb2dyYW0oKTtcblx0fVxuXG5cdHB1YmxpYyB1cGxvYWQodmVydGV4UHJvZ3JhbTpCeXRlQXJyYXksIGZyYWdtZW50UHJvZ3JhbTpCeXRlQXJyYXkpXG5cdHtcblx0XHR2YXIgdmVydGV4U3RyaW5nOnN0cmluZyA9IFByb2dyYW1XZWJHTC5fYWdsc2xQYXJzZXIucGFyc2UoUHJvZ3JhbVdlYkdMLl90b2tlbml6ZXIuZGVjcmliZUFHQUxCeXRlQXJyYXkodmVydGV4UHJvZ3JhbSkpO1xuXHRcdHZhciBmcmFnbWVudFN0cmluZzpzdHJpbmcgPSBQcm9ncmFtV2ViR0wuX2FnbHNsUGFyc2VyLnBhcnNlKFByb2dyYW1XZWJHTC5fdG9rZW5pemVyLmRlY3JpYmVBR0FMQnl0ZUFycmF5KGZyYWdtZW50UHJvZ3JhbSkpO1xuXG5cdFx0dGhpcy5fdmVydGV4U2hhZGVyID0gdGhpcy5fZ2wuY3JlYXRlU2hhZGVyKHRoaXMuX2dsLlZFUlRFWF9TSEFERVIpO1xuXHRcdHRoaXMuX2ZyYWdtZW50U2hhZGVyID0gdGhpcy5fZ2wuY3JlYXRlU2hhZGVyKHRoaXMuX2dsLkZSQUdNRU5UX1NIQURFUik7XG5cblx0XHR0aGlzLl9nbC5zaGFkZXJTb3VyY2UodGhpcy5fdmVydGV4U2hhZGVyLCB2ZXJ0ZXhTdHJpbmcpO1xuXHRcdHRoaXMuX2dsLmNvbXBpbGVTaGFkZXIodGhpcy5fdmVydGV4U2hhZGVyKTtcblxuXHRcdGlmICghdGhpcy5fZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHRoaXMuX3ZlcnRleFNoYWRlciwgdGhpcy5fZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IodGhpcy5fZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLl92ZXJ0ZXhTaGFkZXIpKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl9nbC5zaGFkZXJTb3VyY2UodGhpcy5fZnJhZ21lbnRTaGFkZXIsIGZyYWdtZW50U3RyaW5nKTtcblx0XHR0aGlzLl9nbC5jb21waWxlU2hhZGVyKHRoaXMuX2ZyYWdtZW50U2hhZGVyKTtcblxuXHRcdGlmICghdGhpcy5fZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHRoaXMuX2ZyYWdtZW50U2hhZGVyLCB0aGlzLl9nbC5DT01QSUxFX1NUQVRVUykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcih0aGlzLl9nbC5nZXRTaGFkZXJJbmZvTG9nKHRoaXMuX2ZyYWdtZW50U2hhZGVyKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fZ2wuYXR0YWNoU2hhZGVyKHRoaXMuX3Byb2dyYW0sIHRoaXMuX3ZlcnRleFNoYWRlcik7XG5cdFx0dGhpcy5fZ2wuYXR0YWNoU2hhZGVyKHRoaXMuX3Byb2dyYW0sIHRoaXMuX2ZyYWdtZW50U2hhZGVyKTtcblx0XHR0aGlzLl9nbC5saW5rUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcblxuXHRcdGlmICghdGhpcy5fZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLl9wcm9ncmFtLCB0aGlzLl9nbC5MSU5LX1NUQVRVUykpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcih0aGlzLl9nbC5nZXRQcm9ncmFtSW5mb0xvZyh0aGlzLl9wcm9ncmFtKSk7XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0dGhpcy5fZ2wuZGVsZXRlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcblx0fVxuXG5cdHB1YmxpYyBmb2N1c1Byb2dyYW0oKVxuXHR7XG5cdFx0dGhpcy5fZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgZ2xQcm9ncmFtKCk6V2ViR0xQcm9ncmFtXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fcHJvZ3JhbTtcblx0fVxufVxuXG5leHBvcnQgPSBQcm9ncmFtV2ViR0w7Il19