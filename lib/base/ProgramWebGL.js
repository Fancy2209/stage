var AGALTokenizer = require("awayjs-stagegl/lib/aglsl/AGALTokenizer");
var AGLSLParser = require("awayjs-stagegl/lib/aglsl/AGLSLParser");
var ProgramWebGL = (function () {
    function ProgramWebGL(gl) {
        this._gl = gl;
        this._program = this._gl.createProgram();
    }
    ProgramWebGL.prototype.upload = function (vertexProgram, fragmentProgram) {
        var vertexString = ProgramWebGL._aglslParser.parse(ProgramWebGL._tokenizer.decribeAGALByteArray(vertexProgram));
        var fragmentString = ProgramWebGL._aglslParser.parse(ProgramWebGL._tokenizer.decribeAGALByteArray(fragmentProgram));
        this._vertexShader = this._gl.createShader(this._gl.VERTEX_SHADER);
        this._fragmentShader = this._gl.createShader(this._gl.FRAGMENT_SHADER);
        this._gl.shaderSource(this._vertexShader, vertexString);
        this._gl.compileShader(this._vertexShader);
        if (!this._gl.getShaderParameter(this._vertexShader, this._gl.COMPILE_STATUS)) {
            throw new Error(this._gl.getShaderInfoLog(this._vertexShader));
            return;
        }
        this._gl.shaderSource(this._fragmentShader, fragmentString);
        this._gl.compileShader(this._fragmentShader);
        if (!this._gl.getShaderParameter(this._fragmentShader, this._gl.COMPILE_STATUS)) {
            throw new Error(this._gl.getShaderInfoLog(this._fragmentShader));
            return;
        }
        this._gl.attachShader(this._program, this._vertexShader);
        this._gl.attachShader(this._program, this._fragmentShader);
        this._gl.linkProgram(this._program);
        if (!this._gl.getProgramParameter(this._program, this._gl.LINK_STATUS)) {
            throw new Error(this._gl.getProgramInfoLog(this._program));
        }
    };
    ProgramWebGL.prototype.dispose = function () {
        this._gl.deleteProgram(this._program);
    };
    ProgramWebGL.prototype.focusProgram = function () {
        this._gl.useProgram(this._program);
    };
    Object.defineProperty(ProgramWebGL.prototype, "glProgram", {
        get: function () {
            return this._program;
        },
        enumerable: true,
        configurable: true
    });
    ProgramWebGL._tokenizer = new AGALTokenizer();
    ProgramWebGL._aglslParser = new AGLSLParser();
    return ProgramWebGL;
})();
module.exports = ProgramWebGL;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1Byb2dyYW1XZWJHTC50cyJdLCJuYW1lcyI6WyJQcm9ncmFtV2ViR0wiLCJQcm9ncmFtV2ViR0wuY29uc3RydWN0b3IiLCJQcm9ncmFtV2ViR0wudXBsb2FkIiwiUHJvZ3JhbVdlYkdMLmRpc3Bvc2UiLCJQcm9ncmFtV2ViR0wuZm9jdXNQcm9ncmFtIiwiUHJvZ3JhbVdlYkdMLmdsUHJvZ3JhbSJdLCJtYXBwaW5ncyI6IkFBRUEsSUFBTyxhQUFhLFdBQWMsd0NBQXdDLENBQUMsQ0FBQztBQUM1RSxJQUFPLFdBQVcsV0FBZSxzQ0FBc0MsQ0FBQyxDQUFDO0FBSXpFLElBQU0sWUFBWTtJQVVqQkEsU0FWS0EsWUFBWUEsQ0FVTEEsRUFBd0JBO1FBRW5DQyxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNkQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxFQUFFQSxDQUFDQTtJQUMxQ0EsQ0FBQ0E7SUFFTUQsNkJBQU1BLEdBQWJBLFVBQWNBLGFBQXVCQSxFQUFFQSxlQUF5QkE7UUFFL0RFLElBQUlBLFlBQVlBLEdBQVVBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLFVBQVVBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdkhBLElBQUlBLGNBQWNBLEdBQVVBLFlBQVlBLENBQUNBLFlBQVlBLENBQUNBLEtBQUtBLENBQUNBLFlBQVlBLENBQUNBLFVBQVVBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFM0hBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBQ25FQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUV2RUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsYUFBYUEsRUFBRUEsWUFBWUEsQ0FBQ0EsQ0FBQ0E7UUFDeERBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBRTNDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLEVBQUVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGNBQWNBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQy9FQSxNQUFNQSxJQUFJQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBO1lBQy9EQSxNQUFNQSxDQUFDQTtRQUNSQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxFQUFFQSxjQUFjQSxDQUFDQSxDQUFDQTtRQUM1REEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0E7UUFFN0NBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsY0FBY0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakZBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDakVBLE1BQU1BLENBQUNBO1FBQ1JBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLElBQUlBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBQ3pEQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxFQUFFQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxDQUFDQTtRQUMzREEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFFcENBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDeEVBLE1BQU1BLElBQUlBLEtBQUtBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLGlCQUFpQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDNURBLENBQUNBO0lBQ0ZBLENBQUNBO0lBRU1GLDhCQUFPQSxHQUFkQTtRQUVDRyxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUN2Q0EsQ0FBQ0E7SUFFTUgsbUNBQVlBLEdBQW5CQTtRQUVDSSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtJQUNwQ0EsQ0FBQ0E7SUFFREosc0JBQVdBLG1DQUFTQTthQUFwQkE7WUFFQ0ssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0E7UUFDdEJBLENBQUNBOzs7T0FBQUw7SUE1RGNBLHVCQUFVQSxHQUFpQkEsSUFBSUEsYUFBYUEsRUFBRUEsQ0FBQ0E7SUFDL0NBLHlCQUFZQSxHQUFlQSxJQUFJQSxXQUFXQSxFQUFFQSxDQUFDQTtJQTREN0RBLG1CQUFDQTtBQUFEQSxDQS9EQSxBQStEQ0EsSUFBQTtBQUVELEFBQXNCLGlCQUFiLFlBQVksQ0FBQyIsImZpbGUiOiJiYXNlL1Byb2dyYW1XZWJHTC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQnl0ZUFycmF5XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9CeXRlQXJyYXlcIik7XHJcblxyXG5pbXBvcnQgQUdBTFRva2VuaXplclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FnbHNsL0FHQUxUb2tlbml6ZXJcIik7XHJcbmltcG9ydCBBR0xTTFBhcnNlclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYWdsc2wvQUdMU0xQYXJzZXJcIik7XHJcbmltcG9ydCBJUHJvZ3JhbVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lQcm9ncmFtXCIpO1xyXG5cclxuXHJcbmNsYXNzIFByb2dyYW1XZWJHTCBpbXBsZW1lbnRzIElQcm9ncmFtXHJcbntcclxuXHRwcml2YXRlIHN0YXRpYyBfdG9rZW5pemVyOkFHQUxUb2tlbml6ZXIgPSBuZXcgQUdBTFRva2VuaXplcigpO1xyXG5cdHByaXZhdGUgc3RhdGljIF9hZ2xzbFBhcnNlcjpBR0xTTFBhcnNlciA9IG5ldyBBR0xTTFBhcnNlcigpO1xyXG5cclxuXHRwcml2YXRlIF9nbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XHJcblx0cHJpdmF0ZSBfcHJvZ3JhbTpXZWJHTFByb2dyYW07XHJcblx0cHJpdmF0ZSBfdmVydGV4U2hhZGVyOldlYkdMU2hhZGVyO1xyXG5cdHByaXZhdGUgX2ZyYWdtZW50U2hhZGVyOldlYkdMU2hhZGVyO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihnbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQpXHJcblx0e1xyXG5cdFx0dGhpcy5fZ2wgPSBnbDtcclxuXHRcdHRoaXMuX3Byb2dyYW0gPSB0aGlzLl9nbC5jcmVhdGVQcm9ncmFtKCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgdXBsb2FkKHZlcnRleFByb2dyYW06Qnl0ZUFycmF5LCBmcmFnbWVudFByb2dyYW06Qnl0ZUFycmF5KVxyXG5cdHtcclxuXHRcdHZhciB2ZXJ0ZXhTdHJpbmc6c3RyaW5nID0gUHJvZ3JhbVdlYkdMLl9hZ2xzbFBhcnNlci5wYXJzZShQcm9ncmFtV2ViR0wuX3Rva2VuaXplci5kZWNyaWJlQUdBTEJ5dGVBcnJheSh2ZXJ0ZXhQcm9ncmFtKSk7XHJcblx0XHR2YXIgZnJhZ21lbnRTdHJpbmc6c3RyaW5nID0gUHJvZ3JhbVdlYkdMLl9hZ2xzbFBhcnNlci5wYXJzZShQcm9ncmFtV2ViR0wuX3Rva2VuaXplci5kZWNyaWJlQUdBTEJ5dGVBcnJheShmcmFnbWVudFByb2dyYW0pKTtcclxuXHJcblx0XHR0aGlzLl92ZXJ0ZXhTaGFkZXIgPSB0aGlzLl9nbC5jcmVhdGVTaGFkZXIodGhpcy5fZ2wuVkVSVEVYX1NIQURFUik7XHJcblx0XHR0aGlzLl9mcmFnbWVudFNoYWRlciA9IHRoaXMuX2dsLmNyZWF0ZVNoYWRlcih0aGlzLl9nbC5GUkFHTUVOVF9TSEFERVIpO1xyXG5cclxuXHRcdHRoaXMuX2dsLnNoYWRlclNvdXJjZSh0aGlzLl92ZXJ0ZXhTaGFkZXIsIHZlcnRleFN0cmluZyk7XHJcblx0XHR0aGlzLl9nbC5jb21waWxlU2hhZGVyKHRoaXMuX3ZlcnRleFNoYWRlcik7XHJcblxyXG5cdFx0aWYgKCF0aGlzLl9nbC5nZXRTaGFkZXJQYXJhbWV0ZXIodGhpcy5fdmVydGV4U2hhZGVyLCB0aGlzLl9nbC5DT01QSUxFX1NUQVRVUykpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKHRoaXMuX2dsLmdldFNoYWRlckluZm9Mb2codGhpcy5fdmVydGV4U2hhZGVyKSk7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHJcblx0XHR0aGlzLl9nbC5zaGFkZXJTb3VyY2UodGhpcy5fZnJhZ21lbnRTaGFkZXIsIGZyYWdtZW50U3RyaW5nKTtcclxuXHRcdHRoaXMuX2dsLmNvbXBpbGVTaGFkZXIodGhpcy5fZnJhZ21lbnRTaGFkZXIpO1xyXG5cclxuXHRcdGlmICghdGhpcy5fZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHRoaXMuX2ZyYWdtZW50U2hhZGVyLCB0aGlzLl9nbC5DT01QSUxFX1NUQVRVUykpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKHRoaXMuX2dsLmdldFNoYWRlckluZm9Mb2codGhpcy5fZnJhZ21lbnRTaGFkZXIpKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cclxuXHRcdHRoaXMuX2dsLmF0dGFjaFNoYWRlcih0aGlzLl9wcm9ncmFtLCB0aGlzLl92ZXJ0ZXhTaGFkZXIpO1xyXG5cdFx0dGhpcy5fZ2wuYXR0YWNoU2hhZGVyKHRoaXMuX3Byb2dyYW0sIHRoaXMuX2ZyYWdtZW50U2hhZGVyKTtcclxuXHRcdHRoaXMuX2dsLmxpbmtQcm9ncmFtKHRoaXMuX3Byb2dyYW0pO1xyXG5cclxuXHRcdGlmICghdGhpcy5fZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLl9wcm9ncmFtLCB0aGlzLl9nbC5MSU5LX1NUQVRVUykpIHtcclxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKHRoaXMuX2dsLmdldFByb2dyYW1JbmZvTG9nKHRoaXMuX3Byb2dyYW0pKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG5cdHB1YmxpYyBkaXNwb3NlKClcclxuXHR7XHJcblx0XHR0aGlzLl9nbC5kZWxldGVQcm9ncmFtKHRoaXMuX3Byb2dyYW0pO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGZvY3VzUHJvZ3JhbSgpXHJcblx0e1xyXG5cdFx0dGhpcy5fZ2wudXNlUHJvZ3JhbSh0aGlzLl9wcm9ncmFtKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXQgZ2xQcm9ncmFtKCk6V2ViR0xQcm9ncmFtXHJcblx0e1xyXG5cdFx0cmV0dXJuIHRoaXMuX3Byb2dyYW07XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBQcm9ncmFtV2ViR0w7Il19