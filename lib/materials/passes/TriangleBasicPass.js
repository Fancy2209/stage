var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLMipFilter = require("awayjs-stagegl/lib/core/stagegl/ContextGLMipFilter");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/core/stagegl/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/core/stagegl/ContextGLWrapMode");
var MaterialPassBase = require("awayjs-stagegl/lib/materials/passes/MaterialPassBase");
var ShaderCompilerHelper = require("awayjs-stagegl/lib/materials/utils/ShaderCompilerHelper");
/**
 * CompiledPass forms an abstract base class for the default compiled pass materials provided by Away3D,
 * using material methods to define their appearance.
 */
var TriangleBasicPass = (function (_super) {
    __extends(TriangleBasicPass, _super);
    /**
     * Creates a new CompiledPass object.
     *
     * @param material The material to which this pass belongs.
     */
    function TriangleBasicPass() {
        _super.call(this);
        this._diffuseColor = 0xffffff;
        this._diffuseR = 1;
        this._diffuseG = 1;
        this._diffuseB = 1;
        this._diffuseA = 1;
    }
    Object.defineProperty(TriangleBasicPass.prototype, "diffuseAlpha", {
        /**
         * The alpha component of the diffuse reflection.
         */
        get: function () {
            return this._diffuseA;
        },
        set: function (value) {
            this._diffuseA = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TriangleBasicPass.prototype, "diffuseColor", {
        /**
         * The color of the diffuse reflection when not using a texture.
         */
        get: function () {
            return this._diffuseColor;
        },
        set: function (diffuseColor) {
            this._diffuseColor = diffuseColor;
            this._diffuseR = ((this._diffuseColor >> 16) & 0xff) / 0xff;
            this._diffuseG = ((this._diffuseColor >> 8) & 0xff) / 0xff;
            this._diffuseB = (this._diffuseColor & 0xff) / 0xff;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    TriangleBasicPass.prototype._iGetFragmentCode = function (shaderObject, regCache, sharedReg) {
        var code = "";
        var targetReg = sharedReg.shadedTarget;
        var diffuseInputReg;
        if (shaderObject.texture != null) {
            diffuseInputReg = regCache.getFreeTextureReg();
            this._texturesIndex = diffuseInputReg.index;
            code += ShaderCompilerHelper.getTex2DSampleCode(targetReg, sharedReg, diffuseInputReg, shaderObject.texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);
            if (shaderObject.alphaThreshold > 0) {
                var cutOffReg = regCache.getFreeFragmentConstant();
                this._fragmentConstantsIndex = cutOffReg.index * 4;
                code += "sub " + targetReg + ".w, " + targetReg + ".w, " + cutOffReg + ".x\n" + "kil " + targetReg + ".w\n" + "add " + targetReg + ".w, " + targetReg + ".w, " + cutOffReg + ".x\n";
            }
        }
        else {
            diffuseInputReg = regCache.getFreeFragmentConstant();
            this._fragmentConstantsIndex = diffuseInputReg.index * 4;
            code += "mov " + targetReg + ", " + diffuseInputReg + "\n";
        }
        return code;
    };
    TriangleBasicPass.prototype._iIncludeDependencies = function (dependencyCounter) {
        if (dependencyCounter.texture != null)
            dependencyCounter.uvDependencies++;
    };
    /**
     * @inheritDoc
     */
    TriangleBasicPass.prototype._iActivate = function (pass, stage, camera) {
        _super.prototype._iActivate.call(this, pass, stage, camera);
        var shaderObject = pass.shaderObject;
        if (shaderObject.texture != null) {
            stage.context.setSamplerStateAt(this._texturesIndex, shaderObject.repeatTextures ? ContextGLWrapMode.REPEAT : ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures ? ContextGLTextureFilter.LINEAR : ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
            stage.context.activateTexture(this._texturesIndex, shaderObject.texture);
            if (shaderObject.alphaThreshold > 0)
                shaderObject.fragmentConstantData[this._fragmentConstantsIndex] = shaderObject.alphaThreshold;
        }
        else {
            var index = this._fragmentConstantsIndex;
            var data = shaderObject.fragmentConstantData;
            data[index] = this._diffuseR;
            data[index + 1] = this._diffuseG;
            data[index + 2] = this._diffuseB;
            data[index + 3] = this._diffuseA;
        }
    };
    return TriangleBasicPass;
})(MaterialPassBase);
module.exports = TriangleBasicPass;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvcGFzc2VzL3RyaWFuZ2xlYmFzaWNwYXNzLnRzIl0sIm5hbWVzIjpbIlRyaWFuZ2xlQmFzaWNQYXNzIiwiVHJpYW5nbGVCYXNpY1Bhc3MuY29uc3RydWN0b3IiLCJUcmlhbmdsZUJhc2ljUGFzcy5kaWZmdXNlQWxwaGEiLCJUcmlhbmdsZUJhc2ljUGFzcy5kaWZmdXNlQ29sb3IiLCJUcmlhbmdsZUJhc2ljUGFzcy5faUdldEZyYWdtZW50Q29kZSIsIlRyaWFuZ2xlQmFzaWNQYXNzLl9pSW5jbHVkZURlcGVuZGVuY2llcyIsIlRyaWFuZ2xlQmFzaWNQYXNzLl9pQWN0aXZhdGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUlBLElBQU8sa0JBQWtCLFdBQWEsb0RBQW9ELENBQUMsQ0FBQztBQUM1RixJQUFPLHNCQUFzQixXQUFZLHdEQUF3RCxDQUFDLENBQUM7QUFDbkcsSUFBTyxpQkFBaUIsV0FBYSxtREFBbUQsQ0FBQyxDQUFDO0FBTzFGLElBQU8sZ0JBQWdCLFdBQWMsc0RBQXNELENBQUMsQ0FBQztBQUM3RixJQUFPLG9CQUFvQixXQUFhLHlEQUF5RCxDQUFDLENBQUM7QUFFbkcsQUFJQTs7O0dBREc7SUFDRyxpQkFBaUI7SUFBU0EsVUFBMUJBLGlCQUFpQkEsVUFBeUJBO0lBeUMvQ0E7Ozs7T0FJR0E7SUFDSEEsU0E5Q0tBLGlCQUFpQkE7UUFnRHJCQyxpQkFBT0EsQ0FBQ0E7UUE5Q0RBLGtCQUFhQSxHQUFVQSxRQUFRQSxDQUFDQTtRQUNoQ0EsY0FBU0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7UUFDckJBLGNBQVNBLEdBQVVBLENBQUNBLENBQUNBO1FBQ3JCQSxjQUFTQSxHQUFVQSxDQUFDQSxDQUFDQTtRQUNyQkEsY0FBU0EsR0FBVUEsQ0FBQ0EsQ0FBQ0E7SUEyQzdCQSxDQUFDQTtJQW5DREQsc0JBQVdBLDJDQUFZQTtRQUh2QkE7O1dBRUdBO2FBQ0hBO1lBRUNFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFNB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QUNBLENBQUNBO1lBRTdGQSxFQUFFQSxDQUFDQSxDQUFDQSxZQUFZQSxDQUFDQSxjQUFjQSxHQUFHQSxDQUFDQSxDQUFDQTtnQkFDbkNBLFlBQVlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQSxHQUFHQSxZQUFZQSxDQUFDQSxjQUFjQSxDQUFDQTtRQUNoR0EsQ0FBQ0E7UUFBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDUEEsSUFBSUEsS0FBS0EsR0FBVUEsSUFBSUEsQ0FBQ0EsdUJBQXVCQSxDQUFDQTtZQUNoREEsSUFBSUEsSUFBSUEsR0FBaUJBLFlBQVlBLENBQUNBLG9CQUFvQkEsQ0FBQ0E7WUFDM0RBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1lBQzdCQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtZQUNqQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7WUFDakNBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQ2xDQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUNGTix3QkFBQ0E7QUFBREEsQ0FySEEsQUFxSENBLEVBckgrQixnQkFBZ0IsRUFxSC9DO0FBRUQsQUFBMkIsaUJBQWxCLGlCQUFpQixDQUFDIiwiZmlsZSI6Im1hdGVyaWFscy9wYXNzZXMvVHJpYW5nbGVCYXNpY1Bhc3MuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsi77u/aW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgTWF0ZXJpYWxQYXNzRGF0YVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvcG9vbC9NYXRlcmlhbFBhc3NEYXRhXCIpO1xuaW1wb3J0IENvbnRleHRHTE1pcEZpbHRlclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvQ29udGV4dEdMTWlwRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFRleHR1cmVGaWx0ZXJcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9Db250ZXh0R0xUZXh0dXJlRmlsdGVyXCIpO1xuaW1wb3J0IENvbnRleHRHTFdyYXBNb2RlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9Db250ZXh0R0xXcmFwTW9kZVwiKTtcbmltcG9ydCBJQ29udGV4dFN0YWdlR0xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvSUNvbnRleHRTdGFnZUdMXCIpO1xuaW1wb3J0IFNoYWRpbmdNZXRob2RFdmVudFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9ldmVudHMvU2hhZGluZ01ldGhvZEV2ZW50XCIpO1xuaW1wb3J0IFNoYWRlck9iamVjdEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyT2JqZWN0QmFzZVwiKTtcbmltcG9ydCBTaGFkZXJSZWdpc3RlckNhY2hlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckNhY2hlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRGF0YVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJEYXRhXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyRWxlbWVudFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyRWxlbWVudFwiKTtcbmltcG9ydCBNYXRlcmlhbFBhc3NCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL3Bhc3Nlcy9NYXRlcmlhbFBhc3NCYXNlXCIpO1xuaW1wb3J0IFNoYWRlckNvbXBpbGVySGVscGVyXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy91dGlscy9TaGFkZXJDb21waWxlckhlbHBlclwiKTtcblxuLyoqXG4gKiBDb21waWxlZFBhc3MgZm9ybXMgYW4gYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIGRlZmF1bHQgY29tcGlsZWQgcGFzcyBtYXRlcmlhbHMgcHJvdmlkZWQgYnkgQXdheTNELFxuICogdXNpbmcgbWF0ZXJpYWwgbWV0aG9kcyB0byBkZWZpbmUgdGhlaXIgYXBwZWFyYW5jZS5cbiAqL1xuY2xhc3MgVHJpYW5nbGVCYXNpY1Bhc3MgZXh0ZW5kcyBNYXRlcmlhbFBhc3NCYXNlXG57XG5cdHByaXZhdGUgX2RpZmZ1c2VDb2xvcjpudW1iZXIgPSAweGZmZmZmZjtcblx0cHJpdmF0ZSBfZGlmZnVzZVI6bnVtYmVyID0gMTtcblx0cHJpdmF0ZSBfZGlmZnVzZUc6bnVtYmVyID0gMTtcblx0cHJpdmF0ZSBfZGlmZnVzZUI6bnVtYmVyID0gMTtcblx0cHJpdmF0ZSBfZGlmZnVzZUE6bnVtYmVyID0gMTtcblxuXHRwcml2YXRlIF9mcmFnbWVudENvbnN0YW50c0luZGV4Om51bWJlcjtcblx0cHJpdmF0ZSBfdGV4dHVyZXNJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBhbHBoYSBjb21wb25lbnQgb2YgdGhlIGRpZmZ1c2UgcmVmbGVjdGlvbi5cblx0ICovXG5cdHB1YmxpYyBnZXQgZGlmZnVzZUFscGhhKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZGlmZnVzZUE7XG5cdH1cblxuXHRwdWJsaWMgc2V0IGRpZmZ1c2VBbHBoYSh2YWx1ZTpudW1iZXIpXG5cdHtcblx0XHR0aGlzLl9kaWZmdXNlQSA9IHZhbHVlO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBjb2xvciBvZiB0aGUgZGlmZnVzZSByZWZsZWN0aW9uIHdoZW4gbm90IHVzaW5nIGEgdGV4dHVyZS5cblx0ICovXG5cdHB1YmxpYyBnZXQgZGlmZnVzZUNvbG9yKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZGlmZnVzZUNvbG9yO1xuXHR9XG5cblx0cHVibGljIHNldCBkaWZmdXNlQ29sb3IoZGlmZnVzZUNvbG9yOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX2RpZmZ1c2VDb2xvciA9IGRpZmZ1c2VDb2xvcjtcblxuXHRcdHRoaXMuX2RpZmZ1c2VSID0gKCh0aGlzLl9kaWZmdXNlQ29sb3IgPj4gMTYpICYgMHhmZikvMHhmZjtcblx0XHR0aGlzLl9kaWZmdXNlRyA9ICgodGhpcy5fZGlmZnVzZUNvbG9yID4+IDgpICYgMHhmZikvMHhmZjtcblx0XHR0aGlzLl9kaWZmdXNlQiA9ICh0aGlzLl9kaWZmdXNlQ29sb3IgJiAweGZmKS8weGZmO1xuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgQ29tcGlsZWRQYXNzIG9iamVjdC5cblx0ICpcblx0ICogQHBhcmFtIG1hdGVyaWFsIFRoZSBtYXRlcmlhbCB0byB3aGljaCB0aGlzIHBhc3MgYmVsb25ncy5cblx0ICovXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHRcdHN1cGVyKCk7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBfaUdldEZyYWdtZW50Q29kZShzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSwgcmVnQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgY29kZTpzdHJpbmcgPSBcIlwiO1xuXHRcdHZhciB0YXJnZXRSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gc2hhcmVkUmVnLnNoYWRlZFRhcmdldDtcblx0XHR2YXIgZGlmZnVzZUlucHV0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudDtcblxuXHRcdGlmIChzaGFkZXJPYmplY3QudGV4dHVyZSAhPSBudWxsKSB7XG5cdFx0XHRkaWZmdXNlSW5wdXRSZWcgPSByZWdDYWNoZS5nZXRGcmVlVGV4dHVyZVJlZygpO1xuXG5cdFx0XHR0aGlzLl90ZXh0dXJlc0luZGV4ID0gZGlmZnVzZUlucHV0UmVnLmluZGV4O1xuXG5cdFx0XHRjb2RlICs9IFNoYWRlckNvbXBpbGVySGVscGVyLmdldFRleDJEU2FtcGxlQ29kZSh0YXJnZXRSZWcsIHNoYXJlZFJlZywgZGlmZnVzZUlucHV0UmVnLCBzaGFkZXJPYmplY3QudGV4dHVyZSwgc2hhZGVyT2JqZWN0LnVzZVNtb290aFRleHR1cmVzLCBzaGFkZXJPYmplY3QucmVwZWF0VGV4dHVyZXMsIHNoYWRlck9iamVjdC51c2VNaXBtYXBwaW5nKTtcblxuXHRcdFx0aWYgKHNoYWRlck9iamVjdC5hbHBoYVRocmVzaG9sZCA+IDApIHtcblx0XHRcdFx0dmFyIGN1dE9mZlJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSByZWdDYWNoZS5nZXRGcmVlRnJhZ21lbnRDb25zdGFudCgpO1xuXHRcdFx0XHR0aGlzLl9mcmFnbWVudENvbnN0YW50c0luZGV4ID0gY3V0T2ZmUmVnLmluZGV4KjQ7XG5cblx0XHRcdFx0Y29kZSArPSBcInN1YiBcIiArIHRhcmdldFJlZyArIFwiLncsIFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyBjdXRPZmZSZWcgKyBcIi54XFxuXCIgK1xuXHRcdFx0XHRcdFwia2lsIFwiICsgdGFyZ2V0UmVnICsgXCIud1xcblwiICtcblx0XHRcdFx0XHRcImFkZCBcIiArIHRhcmdldFJlZyArIFwiLncsIFwiICsgdGFyZ2V0UmVnICsgXCIudywgXCIgKyBjdXRPZmZSZWcgKyBcIi54XFxuXCI7XG5cdFx0XHR9XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGlmZnVzZUlucHV0UmVnID0gcmVnQ2FjaGUuZ2V0RnJlZUZyYWdtZW50Q29uc3RhbnQoKTtcblxuXHRcdFx0dGhpcy5fZnJhZ21lbnRDb25zdGFudHNJbmRleCA9IGRpZmZ1c2VJbnB1dFJlZy5pbmRleCo0O1xuXG5cdFx0XHRjb2RlICs9IFwibW92IFwiICsgdGFyZ2V0UmVnICsgXCIsIFwiICsgZGlmZnVzZUlucHV0UmVnICsgXCJcXG5cIjtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29kZTtcblx0fVxuXG5cdHB1YmxpYyBfaUluY2x1ZGVEZXBlbmRlbmNpZXMoZGVwZW5kZW5jeUNvdW50ZXI6U2hhZGVyT2JqZWN0QmFzZSlcblx0e1xuXHRcdGlmIChkZXBlbmRlbmN5Q291bnRlci50ZXh0dXJlICE9IG51bGwpXG5cdFx0XHRkZXBlbmRlbmN5Q291bnRlci51dkRlcGVuZGVuY2llcysrO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgX2lBY3RpdmF0ZShwYXNzOk1hdGVyaWFsUGFzc0RhdGEsIHN0YWdlOlN0YWdlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0c3VwZXIuX2lBY3RpdmF0ZShwYXNzLCBzdGFnZSwgY2FtZXJhKTtcblxuXHRcdHZhciBzaGFkZXJPYmplY3Q6U2hhZGVyT2JqZWN0QmFzZSA9IHBhc3Muc2hhZGVyT2JqZWN0O1xuXG5cdFx0aWYgKHNoYWRlck9iamVjdC50ZXh0dXJlICE9IG51bGwpIHtcblx0XHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5zZXRTYW1wbGVyU3RhdGVBdCh0aGlzLl90ZXh0dXJlc0luZGV4LCBzaGFkZXJPYmplY3QucmVwZWF0VGV4dHVyZXM/IENvbnRleHRHTFdyYXBNb2RlLlJFUEVBVDpDb250ZXh0R0xXcmFwTW9kZS5DTEFNUCwgc2hhZGVyT2JqZWN0LnVzZVNtb290aFRleHR1cmVzPyBDb250ZXh0R0xUZXh0dXJlRmlsdGVyLkxJTkVBUiA6IENvbnRleHRHTFRleHR1cmVGaWx0ZXIuTkVBUkVTVCwgc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmc/IENvbnRleHRHTE1pcEZpbHRlci5NSVBMSU5FQVIgOiBDb250ZXh0R0xNaXBGaWx0ZXIuTUlQTk9ORSk7XG5cdFx0XHQoPElDb250ZXh0U3RhZ2VHTD4gc3RhZ2UuY29udGV4dCkuYWN0aXZhdGVUZXh0dXJlKHRoaXMuX3RleHR1cmVzSW5kZXgsIHNoYWRlck9iamVjdC50ZXh0dXJlKTtcblxuXHRcdFx0aWYgKHNoYWRlck9iamVjdC5hbHBoYVRocmVzaG9sZCA+IDApXG5cdFx0XHRcdHNoYWRlck9iamVjdC5mcmFnbWVudENvbnN0YW50RGF0YVt0aGlzLl9mcmFnbWVudENvbnN0YW50c0luZGV4XSA9IHNoYWRlck9iamVjdC5hbHBoYVRocmVzaG9sZDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dmFyIGluZGV4Om51bWJlciA9IHRoaXMuX2ZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XG5cdFx0XHR2YXIgZGF0YTpBcnJheTxudW1iZXI+ID0gc2hhZGVyT2JqZWN0LmZyYWdtZW50Q29uc3RhbnREYXRhO1xuXHRcdFx0ZGF0YVtpbmRleF0gPSB0aGlzLl9kaWZmdXNlUjtcblx0XHRcdGRhdGFbaW5kZXggKyAxXSA9IHRoaXMuX2RpZmZ1c2VHO1xuXHRcdFx0ZGF0YVtpbmRleCArIDJdID0gdGhpcy5fZGlmZnVzZUI7XG5cdFx0XHRkYXRhW2luZGV4ICsgM10gPSB0aGlzLl9kaWZmdXNlQTtcblx0XHR9XG5cdH1cbn1cblxuZXhwb3J0ID0gVHJpYW5nbGVCYXNpY1Bhc3M7Il19