var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ContextGLMipFilter = require("awayjs-stagegl/lib/core/stagegl/ContextGLMipFilter");
var ContextGLTextureFilter = require("awayjs-stagegl/lib/core/stagegl/ContextGLTextureFilter");
var ContextGLWrapMode = require("awayjs-stagegl/lib/core/stagegl/ContextGLWrapMode");
var LightingMethodBase = require("awayjs-stagegl/lib/materials/methods/LightingMethodBase");
var ShaderCompilerHelper = require("awayjs-stagegl/lib/materials/utils/ShaderCompilerHelper");
/**
 * SpecularBasicMethod provides the default shading method for Blinn-Phong specular highlights (an optimized but approximated
 * version of Phong specularity).
 */
var SpecularBasicMethod = (function (_super) {
    __extends(SpecularBasicMethod, _super);
    /**
     * Creates a new SpecularBasicMethod object.
     */
    function SpecularBasicMethod() {
        _super.call(this);
        this._gloss = 50;
        this._specular = 1;
        this._specularColor = 0xffffff;
        this._iSpecularR = 1;
        this._iSpecularG = 1;
        this._iSpecularB = 1;
    }
    SpecularBasicMethod.prototype.iIsUsed = function (shaderObject) {
        if (!shaderObject.numLights)
            return false;
        return true;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iInitVO = function (shaderObject, methodVO) {
        methodVO.needsUV = this._pUseTexture;
        methodVO.needsNormals = shaderObject.numLights > 0;
        methodVO.needsView = shaderObject.numLights > 0;
    };
    Object.defineProperty(SpecularBasicMethod.prototype, "gloss", {
        /**
         * The sharpness of the specular highlight.
         */
        get: function () {
            return this._gloss;
        },
        set: function (value) {
            this._gloss = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularBasicMethod.prototype, "specular", {
        /**
         * The overall strength of the specular highlights.
         */
        get: function () {
            return this._specular;
        },
        set: function (value) {
            if (value == this._specular)
                return;
            this._specular = value;
            this.updateSpecular();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularBasicMethod.prototype, "specularColor", {
        /**
         * The colour of the specular reflection of the surface.
         */
        get: function () {
            return this._specularColor;
        },
        set: function (value) {
            if (this._specularColor == value)
                return;
            // specular is now either enabled or disabled
            if (this._specularColor == 0 || value == 0)
                this.iInvalidateShaderProgram();
            this._specularColor = value;
            this.updateSpecular();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SpecularBasicMethod.prototype, "texture", {
        /**
         * The bitmapData that encodes the specular highlight strength per texel in the red channel, and the sharpness
         * in the green channel. You can use SpecularBitmapTexture if you want to easily set specular and gloss maps
         * from grayscale images, but prepared images are preferred.
         */
        get: function () {
            return this._texture;
        },
        set: function (value) {
            var b = (value != null);
            if (b != this._pUseTexture || (value && this._texture && (value.hasMipmaps != this._texture.hasMipmaps || value.format != this._texture.format)))
                this.iInvalidateShaderProgram();
            this._pUseTexture = b;
            this._texture = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.copyFrom = function (method) {
        var m = method;
        var bsm = method;
        var spec = bsm; //SpecularBasicMethod(method);
        this.texture = spec.texture;
        this.specular = spec.specular;
        this.specularColor = spec.specularColor;
        this.gloss = spec.gloss;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iCleanCompilationData = function () {
        _super.prototype.iCleanCompilationData.call(this);
        this._pTotalLightColorReg = null;
        this._pSpecularTextureRegister = null;
        this._pSpecularTexData = null;
        this._pSpecularDataRegister = null;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iGetFragmentPreLightingCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        var code = "";
        this._pIsFirstLight = true;
        this._pSpecularDataRegister = registerCache.getFreeFragmentConstant();
        methodVO.fragmentConstantsIndex = this._pSpecularDataRegister.index * 4;
        if (this._pUseTexture) {
            this._pSpecularTexData = registerCache.getFreeFragmentVectorTemp();
            registerCache.addFragmentTempUsages(this._pSpecularTexData, 1);
            this._pSpecularTextureRegister = registerCache.getFreeTextureReg();
            methodVO.texturesIndex = this._pSpecularTextureRegister.index;
            code = ShaderCompilerHelper.getTex2DSampleCode(this._pSpecularTexData, sharedRegisters, this._pSpecularTextureRegister, this._texture, shaderObject.useSmoothTextures, shaderObject.repeatTextures, shaderObject.useMipmapping);
        }
        else {
            this._pSpecularTextureRegister = null;
        }
        this._pTotalLightColorReg = registerCache.getFreeFragmentVectorTemp();
        registerCache.addFragmentTempUsages(this._pTotalLightColorReg, 1);
        return code;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iGetFragmentCodePerLight = function (shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters) {
        var code = "";
        var t;
        if (this._pIsFirstLight) {
            t = this._pTotalLightColorReg;
        }
        else {
            t = registerCache.getFreeFragmentVectorTemp();
            registerCache.addFragmentTempUsages(t, 1);
        }
        var viewDirReg = sharedRegisters.viewDirFragment;
        var normalReg = sharedRegisters.normalFragment;
        // blinn-phong half vector model
        code += "add " + t + ", " + lightDirReg + ", " + viewDirReg + "\n" + "nrm " + t + ".xyz, " + t + "\n" + "dp3 " + t + ".w, " + normalReg + ", " + t + "\n" + "sat " + t + ".w, " + t + ".w\n";
        if (this._pUseTexture) {
            // apply gloss modulation from texture
            code += "mul " + this._pSpecularTexData + ".w, " + this._pSpecularTexData + ".y, " + this._pSpecularDataRegister + ".w\n" + "pow " + t + ".w, " + t + ".w, " + this._pSpecularTexData + ".w\n";
        }
        else {
            code += "pow " + t + ".w, " + t + ".w, " + this._pSpecularDataRegister + ".w\n";
        }
        // attenuate
        if (shaderObject.usesLightFallOff)
            code += "mul " + t + ".w, " + t + ".w, " + lightDirReg + ".w\n";
        if (this._iModulateMethod != null)
            code += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);
        code += "mul " + t + ".xyz, " + lightColReg + ", " + t + ".w\n";
        if (!this._pIsFirstLight) {
            code += "add " + this._pTotalLightColorReg + ".xyz, " + this._pTotalLightColorReg + ", " + t + "\n";
            registerCache.removeFragmentTempUsage(t);
        }
        this._pIsFirstLight = false;
        return code;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iGetFragmentCodePerProbe = function (shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters) {
        var code = "";
        var t;
        // write in temporary if not first light, so we can add to total diffuse colour
        if (this._pIsFirstLight) {
            t = this._pTotalLightColorReg;
        }
        else {
            t = registerCache.getFreeFragmentVectorTemp();
            registerCache.addFragmentTempUsages(t, 1);
        }
        var normalReg = sharedRegisters.normalFragment;
        var viewDirReg = sharedRegisters.viewDirFragment;
        code += "dp3 " + t + ".w, " + normalReg + ", " + viewDirReg + "\n" + "add " + t + ".w, " + t + ".w, " + t + ".w\n" + "mul " + t + ", " + t + ".w, " + normalReg + "\n" + "sub " + t + ", " + t + ", " + viewDirReg + "\n" + "tex " + t + ", " + t + ", " + cubeMapReg + " <cube," + (shaderObject.useSmoothTextures ? "linear" : "nearest") + ",miplinear>\n" + "mul " + t + ".xyz, " + t + ", " + weightRegister + "\n";
        if (this._iModulateMethod != null)
            code += this._iModulateMethod(shaderObject, methodVO, t, registerCache, sharedRegisters);
        if (!this._pIsFirstLight) {
            code += "add " + this._pTotalLightColorReg + ".xyz, " + this._pTotalLightColorReg + ", " + t + "\n";
            registerCache.removeFragmentTempUsage(t);
        }
        this._pIsFirstLight = false;
        return code;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        var code = "";
        if (sharedRegisters.shadowTarget)
            code += "mul " + this._pTotalLightColorReg + ".xyz, " + this._pTotalLightColorReg + ", " + sharedRegisters.shadowTarget + ".w\n";
        if (this._pUseTexture) {
            // apply strength modulation from texture
            code += "mul " + this._pTotalLightColorReg + ".xyz, " + this._pTotalLightColorReg + ", " + this._pSpecularTexData + ".x\n";
            registerCache.removeFragmentTempUsage(this._pSpecularTexData);
        }
        // apply material's specular reflection
        code += "mul " + this._pTotalLightColorReg + ".xyz, " + this._pTotalLightColorReg + ", " + this._pSpecularDataRegister + "\n" + "add " + targetReg + ".xyz, " + targetReg + ", " + this._pTotalLightColorReg + "\n";
        registerCache.removeFragmentTempUsage(this._pTotalLightColorReg);
        return code;
    };
    /**
     * @inheritDoc
     */
    SpecularBasicMethod.prototype.iActivate = function (shaderObject, methodVO, stage) {
        if (this._pUseTexture) {
            stage.context.setSamplerStateAt(methodVO.texturesIndex, shaderObject.repeatTextures ? ContextGLWrapMode.REPEAT : ContextGLWrapMode.CLAMP, shaderObject.useSmoothTextures ? ContextGLTextureFilter.LINEAR : ContextGLTextureFilter.NEAREST, shaderObject.useMipmapping ? ContextGLMipFilter.MIPLINEAR : ContextGLMipFilter.MIPNONE);
            stage.context.activateTexture(methodVO.texturesIndex, this._texture);
        }
        var index = methodVO.fragmentConstantsIndex;
        var data = shaderObject.fragmentConstantData;
        data[index] = this._iSpecularR;
        data[index + 1] = this._iSpecularG;
        data[index + 2] = this._iSpecularB;
        data[index + 3] = this._gloss;
    };
    /**
     * Updates the specular color data used by the render state.
     */
    SpecularBasicMethod.prototype.updateSpecular = function () {
        this._iSpecularR = ((this._specularColor >> 16) & 0xff) / 0xff * this._specular;
        this._iSpecularG = ((this._specularColor >> 8) & 0xff) / 0xff * this._specular;
        this._iSpecularB = (this._specularColor & 0xff) / 0xff * this._specular;
    };
    return SpecularBasicMethod;
})(LightingMethodBase);
module.exports = SpecularBasicMethod;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFscy9tZXRob2RzL3NwZWN1bGFyYmFzaWNtZXRob2QudHMiXSwibmFtZXMiOlsiU3BlY3VsYXJCYXNpY01ldGhvZCIsIlNwZWN1bGFyQmFzaWNNZXRob2QuY29uc3RydWN0b3IiLCJTcGVjdWxhckJhc2ljTWV0aG9kLmlJc1VzZWQiLCJTcGVjdWxhckJhc2ljTWV0aG9kLmlJbml0Vk8iLCJTcGVjdWxhckJhc2ljTWV0aG9kLmdsb3NzIiwiU3BlY3VsYXJCYXNpY01ldGhvZC5zcGVjdWxhciIsIlNwZWN1bGFyQmFzaWNNZXRob2Quc3BlY3VsYXJDb2xvciIsIlNwZWN1bGFyQmFzaWNNZXRob2QudGV4dHVyZSIsIlNwZWN1bGFyQmFzaWNNZXRob2QuY29weUZyb20iLCJTcGVjdWxhckJhc2ljTWV0aG9kLmlDbGVhbkNvbXBpbGF0aW9uRGF0YSIsIlNwZWN1bGFyQmFzaWNNZXRob2QuaUdldEZyYWdtZW50UHJlTGlnaHRpbmdDb2RlIiwiU3BlY3VsYXJCYXNpY01ldGhvZC5pR2V0RnJhZ21lbnRDb2RlUGVyTGlnaHQiLCJTcGVjdWxhckJhc2ljTWV0aG9kLmlHZXRGcmFnbWVudENvZGVQZXJQcm9iZSIsIlNwZWN1bGFyQmFzaWNNZXRob2QuaUdldEZyYWdtZW50UG9zdExpZ2h0aW5nQ29kZSIsIlNwZWN1bGFyQmFzaWNNZXRob2QuaUFjdGl2YXRlIiwiU3BlY3VsYXJCYXNpY01ldGhvZC51cGRhdGVTcGVjdWxhciJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBR0EsSUFBTyxrQkFBa0IsV0FBYSxvREFBb0QsQ0FBQyxDQUFDO0FBQzVGLElBQU8sc0JBQXNCLFdBQVksd0RBQXdELENBQUMsQ0FBQztBQUNuRyxJQUFPLGlCQUFpQixXQUFhLG1EQUFtRCxDQUFDLENBQUM7QUFPMUYsSUFBTyxrQkFBa0IsV0FBYSx5REFBeUQsQ0FBQyxDQUFDO0FBRWpHLElBQU8sb0JBQW9CLFdBQWEseURBQXlELENBQUMsQ0FBQztBQUVuRyxBQUlBOzs7R0FERztJQUNHLG1C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Q3ZFQSxJQUFJQSxTQUFTQSxHQUF5QkEsZUFBZUEsQ0FBQ0EsY0FBY0EsQ0FBQ0E7UUFFckVBLEFBQ0FBLGdDQURnQ0E7UUFDaENBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLFdBQVdBLEdBQUdBLElBQUlBLEdBQUdBLFVBQVVBLEdBQUdBLElBQUlBLEdBQ2hFQSxNQUFNQSxHQUFHQSxDQUFDQSxHQUFHQSxRQUFRQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUNoQ0EsTUFBTUEsR0FBR0EsQ0FBQ0EsR0FBR0EsTUFBTUEsR0FBR0EsU0FBU0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FDakRBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLENBQUNBO1FBRW5DQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2QkEsQUFDQUEsc0NBRHNDQTtZQUN0Q0EsSUFBSUEsSUFBSUEsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxHQUFHQSxNQUFNQSxHQUFHQSxJQUFJQSxDQUFDQSxpQkFBaUJBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBR0EsTUFBTUEsR0FDdkhBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLGlCQUFpQkEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDdEVBLENBQUNBO1FBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQ1BBLElBQUlBLElBQUlBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLENBQUNBLEdBQUdBLE1BQU1BLEdBQUdBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBR0EsTUFBTUEsQ0FBQ0E7UUFDakZBLENBQUNBO1FBRURBLEFBQ0FBLFlBRFlBO1FBQ1pBLEVBQUVB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LEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLEdBQUNBLElBQUlBLEdBQUNBLElBQUlBLENBQUNBLFNBQVNBLENBQUNBO1FBQzdFQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxDQUFDQSxDQUFFQSxJQUFJQSxDQUFDQSxjQUFjQSxJQUFJQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFDQSxJQUFJQSxHQUFDQSxJQUFJQSxDQUFDQSxTQUFTQSxDQUFDQTtRQUM1RUEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsQ0FBRUEsSUFBSUEsQ0FBQ0EsY0FBY0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBQ0EsSUFBSUEsR0FBQ0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0E7SUFDdEVBLENBQUNBO0lBQ0ZmLDBCQUFDQTtBQUFEQSxDQTdUQSxBQTZUQ0EsRUE3VGlDLGtCQUFrQixFQTZUbkQ7QUFFRCxBQUE2QixpQkFBcEIsbUJBQW1CLENBQUMiLCJmaWxlIjoibWF0ZXJpYWxzL21ldGhvZHMvU3BlY3VsYXJCYXNpY01ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1zdGFnZWdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgVGV4dHVyZTJEQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3RleHR1cmVzL1RleHR1cmUyREJhc2VcIik7XG5cbmltcG9ydCBDb250ZXh0R0xNaXBGaWx0ZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0NvbnRleHRHTE1pcEZpbHRlclwiKTtcbmltcG9ydCBDb250ZXh0R0xUZXh0dXJlRmlsdGVyXHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvQ29udGV4dEdMVGV4dHVyZUZpbHRlclwiKTtcbmltcG9ydCBDb250ZXh0R0xXcmFwTW9kZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvQ29udGV4dEdMV3JhcE1vZGVcIik7XG5pbXBvcnQgSUNvbnRleHRTdGFnZUdMXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0lDb250ZXh0U3RhZ2VHTFwiKTtcbmltcG9ydCBNZXRob2RWT1x0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vTWV0aG9kVk9cIik7XG5pbXBvcnQgU2hhZGVyTGlnaHRpbmdPYmplY3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlckxpZ2h0aW5nT2JqZWN0XCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJEYXRhXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJFbGVtZW50XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuaW1wb3J0IExpZ2h0aW5nTWV0aG9kQmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvbWV0aG9kcy9MaWdodGluZ01ldGhvZEJhc2VcIik7XG5pbXBvcnQgU2hhZGluZ01ldGhvZEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL21ldGhvZHMvU2hhZGluZ01ldGhvZEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyQ29tcGlsZXJIZWxwZXJcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL3V0aWxzL1NoYWRlckNvbXBpbGVySGVscGVyXCIpO1xuXG4vKipcbiAqIFNwZWN1bGFyQmFzaWNNZXRob2QgcHJvdmlkZXMgdGhlIGRlZmF1bHQgc2hhZGluZyBtZXRob2QgZm9yIEJsaW5uLVBob25nIHNwZWN1bGFyIGhpZ2hsaWdodHMgKGFuIG9wdGltaXplZCBidXQgYXBwcm94aW1hdGVkXG4gKiB2ZXJzaW9uIG9mIFBob25nIHNwZWN1bGFyaXR5KS5cbiAqL1xuY2xhc3MgU3BlY3VsYXJCYXNpY01ldGhvZCBleHRlbmRzIExpZ2h0aW5nTWV0aG9kQmFzZVxue1xuXHRwdWJsaWMgX3BVc2VUZXh0dXJlOmJvb2xlYW47XG5cdHB1YmxpYyBfcFRvdGFsTGlnaHRDb2xvclJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQ7XG5cdHB1YmxpYyBfcFNwZWN1bGFyVGV4dHVyZVJlZ2lzdGVyOlNoYWRlclJlZ2lzdGVyRWxlbWVudDtcblx0cHVibGljIF9wU3BlY3VsYXJUZXhEYXRhOlNoYWRlclJlZ2lzdGVyRWxlbWVudDtcblx0cHVibGljIF9wU3BlY3VsYXJEYXRhUmVnaXN0ZXI6U2hhZGVyUmVnaXN0ZXJFbGVtZW50O1xuXG5cdHByaXZhdGUgX3RleHR1cmU6VGV4dHVyZTJEQmFzZTtcblxuXHRwcml2YXRlIF9nbG9zczpudW1iZXIgPSA1MDtcblx0cHJpdmF0ZSBfc3BlY3VsYXI6bnVtYmVyID0gMTtcblx0cHJpdmF0ZSBfc3BlY3VsYXJDb2xvcjpudW1iZXIgPSAweGZmZmZmZjtcblx0cHVibGljIF9pU3BlY3VsYXJSOm51bWJlciA9IDE7XG5cdHB1YmxpYyBfaVNwZWN1bGFyRzpudW1iZXIgPSAxO1xuXHRwdWJsaWMgX2lTcGVjdWxhckI6bnVtYmVyID0gMTtcblx0cHVibGljIF9wSXNGaXJzdExpZ2h0OmJvb2xlYW47XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgU3BlY3VsYXJCYXNpY01ldGhvZCBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblx0XHRzdXBlcigpO1xuXHR9XG5cblx0cHVibGljIGlJc1VzZWQoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0KTpib29sZWFuXG5cdHtcblx0XHRpZiAoIXNoYWRlck9iamVjdC5udW1MaWdodHMpXG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlJbml0Vk8oc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTylcblx0e1xuXHRcdG1ldGhvZFZPLm5lZWRzVVYgPSB0aGlzLl9wVXNlVGV4dHVyZTtcblx0XHRtZXRob2RWTy5uZWVkc05vcm1hbHMgPSBzaGFkZXJPYmplY3QubnVtTGlnaHRzID4gMDtcblx0XHRtZXRob2RWTy5uZWVkc1ZpZXcgPSBzaGFkZXJPYmplY3QubnVtTGlnaHRzID4gMDtcblx0fVxuXG5cdC8qKlxuXHQgKiBUaGUgc2hhcnBuZXNzIG9mIHRoZSBzcGVjdWxhciBoaWdobGlnaHQuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IGdsb3NzKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZ2xvc3M7XG5cdH1cblxuXHRwdWJsaWMgc2V0IGdsb3NzKHZhbHVlOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX2dsb3NzID0gdmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIG92ZXJhbGwgc3RyZW5ndGggb2YgdGhlIHNwZWN1bGFyIGhpZ2hsaWdodHMuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IHNwZWN1bGFyKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fc3BlY3VsYXI7XG5cdH1cblxuXHRwdWJsaWMgc2V0IHNwZWN1bGFyKHZhbHVlOm51bWJlcilcblx0e1xuXHRcdGlmICh2YWx1ZSA9PSB0aGlzLl9zcGVjdWxhcilcblx0XHRcdHJldHVybjtcblxuXHRcdHRoaXMuX3NwZWN1bGFyID0gdmFsdWU7XG5cdFx0dGhpcy51cGRhdGVTcGVjdWxhcigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFRoZSBjb2xvdXIgb2YgdGhlIHNwZWN1bGFyIHJlZmxlY3Rpb24gb2YgdGhlIHN1cmZhY2UuXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IHNwZWN1bGFyQ29sb3IoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl9zcGVjdWxhckNvbG9yO1xuXHR9XG5cblx0cHVibGljIHNldCBzcGVjdWxhckNvbG9yKHZhbHVlOm51bWJlcilcblx0e1xuXHRcdGlmICh0aGlzLl9zcGVjdWxhckNvbG9yID09IHZhbHVlKVxuXHRcdFx0cmV0dXJuO1xuXG5cdFx0Ly8gc3BlY3VsYXIgaXMgbm93IGVpdGhlciBlbmFibGVkIG9yIGRpc2FibGVkXG5cdFx0aWYgKHRoaXMuX3NwZWN1bGFyQ29sb3IgPT0gMCB8fCB2YWx1ZSA9PSAwKVxuXHRcdFx0dGhpcy5pSW52YWxpZGF0ZVNoYWRlclByb2dyYW0oKTtcblxuXHRcdHRoaXMuX3NwZWN1bGFyQ29sb3IgPSB2YWx1ZTtcblx0XHR0aGlzLnVwZGF0ZVNwZWN1bGFyKCk7XG5cdH1cblxuXHQvKipcblx0ICogVGhlIGJpdG1hcERhdGEgdGhhdCBlbmNvZGVzIHRoZSBzcGVjdWxhciBoaWdobGlnaHQgc3RyZW5ndGggcGVyIHRleGVsIGluIHRoZSByZWQgY2hhbm5lbCwgYW5kIHRoZSBzaGFycG5lc3Ncblx0ICogaW4gdGhlIGdyZWVuIGNoYW5uZWwuIFlvdSBjYW4gdXNlIFNwZWN1bGFyQml0bWFwVGV4dHVyZSBpZiB5b3Ugd2FudCB0byBlYXNpbHkgc2V0IHNwZWN1bGFyIGFuZCBnbG9zcyBtYXBzXG5cdCAqIGZyb20gZ3JheXNjYWxlIGltYWdlcywgYnV0IHByZXBhcmVkIGltYWdlcyBhcmUgcHJlZmVycmVkLlxuXHQgKi9cblx0cHVibGljIGdldCB0ZXh0dXJlKCk6VGV4dHVyZTJEQmFzZVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3RleHR1cmU7XG5cdH1cblxuXHRwdWJsaWMgc2V0IHRleHR1cmUodmFsdWU6VGV4dHVyZTJEQmFzZSlcblx0e1xuXHRcdHZhciBiOmJvb2xlYW4gPSAoIHZhbHVlICE9IG51bGwgKTtcblxuXHRcdGlmIChiICE9IHRoaXMuX3BVc2VUZXh0dXJlIHx8ICh2YWx1ZSAmJiB0aGlzLl90ZXh0dXJlICYmICh2YWx1ZS5oYXNNaXBtYXBzICE9IHRoaXMuX3RleHR1cmUuaGFzTWlwbWFwcyB8fCB2YWx1ZS5mb3JtYXQgIT0gdGhpcy5fdGV4dHVyZS5mb3JtYXQpKSlcblx0XHRcdHRoaXMuaUludmFsaWRhdGVTaGFkZXJQcm9ncmFtKCk7XG5cblx0XHR0aGlzLl9wVXNlVGV4dHVyZSA9IGI7XG5cdFx0dGhpcy5fdGV4dHVyZSA9IHZhbHVlO1xuXG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBjb3B5RnJvbShtZXRob2Q6U2hhZGluZ01ldGhvZEJhc2UpXG5cdHtcblxuXHRcdHZhciBtOmFueSA9IG1ldGhvZDtcblx0XHR2YXIgYnNtOlNwZWN1bGFyQmFzaWNNZXRob2QgPSA8U3BlY3VsYXJCYXNpY01ldGhvZD4gbWV0aG9kO1xuXG5cdFx0dmFyIHNwZWM6U3BlY3VsYXJCYXNpY01ldGhvZCA9IGJzbTsvL1NwZWN1bGFyQmFzaWNNZXRob2QobWV0aG9kKTtcblx0XHR0aGlzLnRleHR1cmUgPSBzcGVjLnRleHR1cmU7XG5cdFx0dGhpcy5zcGVjdWxhciA9IHNwZWMuc3BlY3VsYXI7XG5cdFx0dGhpcy5zcGVjdWxhckNvbG9yID0gc3BlYy5zcGVjdWxhckNvbG9yO1xuXHRcdHRoaXMuZ2xvc3MgPSBzcGVjLmdsb3NzO1xuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgaUNsZWFuQ29tcGlsYXRpb25EYXRhKClcblx0e1xuXHRcdHN1cGVyLmlDbGVhbkNvbXBpbGF0aW9uRGF0YSgpO1xuXHRcdHRoaXMuX3BUb3RhbExpZ2h0Q29sb3JSZWcgPSBudWxsO1xuXHRcdHRoaXMuX3BTcGVjdWxhclRleHR1cmVSZWdpc3RlciA9IG51bGw7XG5cdFx0dGhpcy5fcFNwZWN1bGFyVGV4RGF0YSA9IG51bGw7XG5cdFx0dGhpcy5fcFNwZWN1bGFyRGF0YVJlZ2lzdGVyID0gbnVsbDtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlHZXRGcmFnbWVudFByZUxpZ2h0aW5nQ29kZShzaGFkZXJPYmplY3Q6U2hhZGVyTGlnaHRpbmdPYmplY3QsIG1ldGhvZFZPOk1ldGhvZFZPLCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0dmFyIGNvZGU6c3RyaW5nID0gXCJcIjtcblxuXHRcdHRoaXMuX3BJc0ZpcnN0TGlnaHQgPSB0cnVlO1xuXG5cdFx0dGhpcy5fcFNwZWN1bGFyRGF0YVJlZ2lzdGVyID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlRnJhZ21lbnRDb25zdGFudCgpO1xuXHRcdG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXggPSB0aGlzLl9wU3BlY3VsYXJEYXRhUmVnaXN0ZXIuaW5kZXgqNDtcblxuXHRcdGlmICh0aGlzLl9wVXNlVGV4dHVyZSkge1xuXG5cdFx0XHR0aGlzLl9wU3BlY3VsYXJUZXhEYXRhID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlRnJhZ21lbnRWZWN0b3JUZW1wKCk7XG5cdFx0XHRyZWdpc3RlckNhY2hlLmFkZEZyYWdtZW50VGVtcFVzYWdlcyh0aGlzLl9wU3BlY3VsYXJUZXhEYXRhLCAxKTtcblx0XHRcdHRoaXMuX3BTcGVjdWxhclRleHR1cmVSZWdpc3RlciA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZVRleHR1cmVSZWcoKTtcblx0XHRcdG1ldGhvZFZPLnRleHR1cmVzSW5kZXggPSB0aGlzLl9wU3BlY3VsYXJUZXh0dXJlUmVnaXN0ZXIuaW5kZXg7XG5cdFx0XHRjb2RlID0gU2hhZGVyQ29tcGlsZXJIZWxwZXIuZ2V0VGV4MkRTYW1wbGVDb2RlKHRoaXMuX3BTcGVjdWxhclRleERhdGEsIHNoYXJlZFJlZ2lzdGVycywgdGhpcy5fcFNwZWN1bGFyVGV4dHVyZVJlZ2lzdGVyLCB0aGlzLl90ZXh0dXJlLCBzaGFkZXJPYmplY3QudXNlU21vb3RoVGV4dHVyZXMsIHNoYWRlck9iamVjdC5yZXBlYXRUZXh0dXJlcywgc2hhZGVyT2JqZWN0LnVzZU1pcG1hcHBpbmcpO1xuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0dGhpcy5fcFNwZWN1bGFyVGV4dHVyZVJlZ2lzdGVyID0gbnVsbDtcblx0XHR9XG5cblx0XHR0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlRnJhZ21lbnRWZWN0b3JUZW1wKCk7XG5cdFx0cmVnaXN0ZXJDYWNoZS5hZGRGcmFnbWVudFRlbXBVc2FnZXModGhpcy5fcFRvdGFsTGlnaHRDb2xvclJlZywgMSk7XG5cblx0XHRyZXR1cm4gY29kZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlHZXRGcmFnbWVudENvZGVQZXJMaWdodChzaGFkZXJPYmplY3Q6U2hhZGVyTGlnaHRpbmdPYmplY3QsIG1ldGhvZFZPOk1ldGhvZFZPLCBsaWdodERpclJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIGxpZ2h0Q29sUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHZhciBjb2RlOnN0cmluZyA9IFwiXCI7XG5cdFx0dmFyIHQ6U2hhZGVyUmVnaXN0ZXJFbGVtZW50O1xuXG5cdFx0aWYgKHRoaXMuX3BJc0ZpcnN0TGlnaHQpIHtcblx0XHRcdHQgPSB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0ID0gcmVnaXN0ZXJDYWNoZS5nZXRGcmVlRnJhZ21lbnRWZWN0b3JUZW1wKCk7XG5cdFx0XHRyZWdpc3RlckNhY2hlLmFkZEZyYWdtZW50VGVtcFVzYWdlcyh0LCAxKTtcblx0XHR9XG5cblx0XHR2YXIgdmlld0RpclJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBzaGFyZWRSZWdpc3RlcnMudmlld0RpckZyYWdtZW50O1xuXHRcdHZhciBub3JtYWxSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gc2hhcmVkUmVnaXN0ZXJzLm5vcm1hbEZyYWdtZW50O1xuXG5cdFx0Ly8gYmxpbm4tcGhvbmcgaGFsZiB2ZWN0b3IgbW9kZWxcblx0XHRjb2RlICs9IFwiYWRkIFwiICsgdCArIFwiLCBcIiArIGxpZ2h0RGlyUmVnICsgXCIsIFwiICsgdmlld0RpclJlZyArIFwiXFxuXCIgK1xuXHRcdFx0XHRcIm5ybSBcIiArIHQgKyBcIi54eXosIFwiICsgdCArIFwiXFxuXCIgK1xuXHRcdFx0XHRcImRwMyBcIiArIHQgKyBcIi53LCBcIiArIG5vcm1hbFJlZyArIFwiLCBcIiArIHQgKyBcIlxcblwiICtcblx0XHRcdFx0XCJzYXQgXCIgKyB0ICsgXCIudywgXCIgKyB0ICsgXCIud1xcblwiO1xuXG5cdFx0aWYgKHRoaXMuX3BVc2VUZXh0dXJlKSB7XG5cdFx0XHQvLyBhcHBseSBnbG9zcyBtb2R1bGF0aW9uIGZyb20gdGV4dHVyZVxuXHRcdFx0Y29kZSArPSBcIm11bCBcIiArIHRoaXMuX3BTcGVjdWxhclRleERhdGEgKyBcIi53LCBcIiArIHRoaXMuX3BTcGVjdWxhclRleERhdGEgKyBcIi55LCBcIiArIHRoaXMuX3BTcGVjdWxhckRhdGFSZWdpc3RlciArIFwiLndcXG5cIiArXG5cdFx0XHRcdFx0XCJwb3cgXCIgKyB0ICsgXCIudywgXCIgKyB0ICsgXCIudywgXCIgKyB0aGlzLl9wU3BlY3VsYXJUZXhEYXRhICsgXCIud1xcblwiO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb2RlICs9IFwicG93IFwiICsgdCArIFwiLncsIFwiICsgdCArIFwiLncsIFwiICsgdGhpcy5fcFNwZWN1bGFyRGF0YVJlZ2lzdGVyICsgXCIud1xcblwiO1xuXHRcdH1cblxuXHRcdC8vIGF0dGVudWF0ZVxuXHRcdGlmIChzaGFkZXJPYmplY3QudXNlc0xpZ2h0RmFsbE9mZilcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyB0ICsgXCIudywgXCIgKyB0ICsgXCIudywgXCIgKyBsaWdodERpclJlZyArIFwiLndcXG5cIjtcblxuXHRcdGlmICh0aGlzLl9pTW9kdWxhdGVNZXRob2QgIT0gbnVsbClcblx0XHRcdGNvZGUgKz0gdGhpcy5faU1vZHVsYXRlTWV0aG9kKHNoYWRlck9iamVjdCwgbWV0aG9kVk8sIHQsIHJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVycyk7XG5cblx0XHRjb2RlICs9IFwibXVsIFwiICsgdCArIFwiLnh5eiwgXCIgKyBsaWdodENvbFJlZyArIFwiLCBcIiArIHQgKyBcIi53XFxuXCI7XG5cblx0XHRpZiAoIXRoaXMuX3BJc0ZpcnN0TGlnaHQpIHtcblx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnICsgXCIueHl6LCBcIiArIHRoaXMuX3BUb3RhbExpZ2h0Q29sb3JSZWcgKyBcIiwgXCIgKyB0ICsgXCJcXG5cIjtcblx0XHRcdHJlZ2lzdGVyQ2FjaGUucmVtb3ZlRnJhZ21lbnRUZW1wVXNhZ2UodCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcElzRmlyc3RMaWdodCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRDb2RlUGVyUHJvYmUoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgY3ViZU1hcFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHdlaWdodFJlZ2lzdGVyOnN0cmluZywgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHZhciBjb2RlOnN0cmluZyA9IFwiXCI7XG5cdFx0dmFyIHQ6U2hhZGVyUmVnaXN0ZXJFbGVtZW50O1xuXG5cdFx0Ly8gd3JpdGUgaW4gdGVtcG9yYXJ5IGlmIG5vdCBmaXJzdCBsaWdodCwgc28gd2UgY2FuIGFkZCB0byB0b3RhbCBkaWZmdXNlIGNvbG91clxuXHRcdGlmICh0aGlzLl9wSXNGaXJzdExpZ2h0KSB7XG5cdFx0XHR0ID0gdGhpcy5fcFRvdGFsTGlnaHRDb2xvclJlZztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dCA9IHJlZ2lzdGVyQ2FjaGUuZ2V0RnJlZUZyYWdtZW50VmVjdG9yVGVtcCgpO1xuXHRcdFx0cmVnaXN0ZXJDYWNoZS5hZGRGcmFnbWVudFRlbXBVc2FnZXModCwgMSk7XG5cdFx0fVxuXG5cdFx0dmFyIG5vcm1hbFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQgPSBzaGFyZWRSZWdpc3RlcnMubm9ybWFsRnJhZ21lbnQ7XG5cdFx0dmFyIHZpZXdEaXJSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50ID0gc2hhcmVkUmVnaXN0ZXJzLnZpZXdEaXJGcmFnbWVudDtcblxuXHRcdGNvZGUgKz0gXCJkcDMgXCIgKyB0ICsgXCIudywgXCIgKyBub3JtYWxSZWcgKyBcIiwgXCIgKyB2aWV3RGlyUmVnICsgXCJcXG5cIiArXG5cdFx0XHRcdFwiYWRkIFwiICsgdCArIFwiLncsIFwiICsgdCArIFwiLncsIFwiICsgdCArIFwiLndcXG5cIiArXG5cdFx0XHRcdFwibXVsIFwiICsgdCArIFwiLCBcIiArIHQgKyBcIi53LCBcIiArIG5vcm1hbFJlZyArIFwiXFxuXCIgK1xuXHRcdFx0XHRcInN1YiBcIiArIHQgKyBcIiwgXCIgKyB0ICsgXCIsIFwiICsgdmlld0RpclJlZyArIFwiXFxuXCIgK1xuXHRcdFx0XHRcInRleCBcIiArIHQgKyBcIiwgXCIgKyB0ICsgXCIsIFwiICsgY3ViZU1hcFJlZyArIFwiIDxjdWJlLFwiICsgKHNoYWRlck9iamVjdC51c2VTbW9vdGhUZXh0dXJlcz8gXCJsaW5lYXJcIjpcIm5lYXJlc3RcIikgKyBcIixtaXBsaW5lYXI+XFxuXCIgK1xuXHRcdFx0XHRcIm11bCBcIiArIHQgKyBcIi54eXosIFwiICsgdCArIFwiLCBcIiArIHdlaWdodFJlZ2lzdGVyICsgXCJcXG5cIjtcblxuXHRcdGlmICh0aGlzLl9pTW9kdWxhdGVNZXRob2QgIT0gbnVsbClcblx0XHRcdGNvZGUgKz0gdGhpcy5faU1vZHVsYXRlTWV0aG9kKHNoYWRlck9iamVjdCwgbWV0aG9kVk8sIHQsIHJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVycyk7XG5cblx0XHRpZiAoIXRoaXMuX3BJc0ZpcnN0TGlnaHQpIHtcblx0XHRcdGNvZGUgKz0gXCJhZGQgXCIgKyB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnICsgXCIueHl6LCBcIiArIHRoaXMuX3BUb3RhbExpZ2h0Q29sb3JSZWcgKyBcIiwgXCIgKyB0ICsgXCJcXG5cIjtcblx0XHRcdHJlZ2lzdGVyQ2FjaGUucmVtb3ZlRnJhZ21lbnRUZW1wVXNhZ2UodCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5fcElzRmlyc3RMaWdodCA9IGZhbHNlO1xuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBpR2V0RnJhZ21lbnRQb3N0TGlnaHRpbmdDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJMaWdodGluZ09iamVjdCwgbWV0aG9kVk86TWV0aG9kVk8sIHRhcmdldFJlZzpTaGFkZXJSZWdpc3RlckVsZW1lbnQsIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHR2YXIgY29kZTpzdHJpbmcgPSBcIlwiO1xuXG5cdFx0aWYgKHNoYXJlZFJlZ2lzdGVycy5zaGFkb3dUYXJnZXQpXG5cdFx0XHRjb2RlICs9IFwibXVsIFwiICsgdGhpcy5fcFRvdGFsTGlnaHRDb2xvclJlZyArIFwiLnh5eiwgXCIgKyB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnICsgXCIsIFwiICsgc2hhcmVkUmVnaXN0ZXJzLnNoYWRvd1RhcmdldCArIFwiLndcXG5cIjtcblxuXHRcdGlmICh0aGlzLl9wVXNlVGV4dHVyZSkge1xuXHRcdFx0Ly8gYXBwbHkgc3RyZW5ndGggbW9kdWxhdGlvbiBmcm9tIHRleHR1cmVcblx0XHRcdGNvZGUgKz0gXCJtdWwgXCIgKyB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnICsgXCIueHl6LCBcIiArIHRoaXMuX3BUb3RhbExpZ2h0Q29sb3JSZWcgKyBcIiwgXCIgKyB0aGlzLl9wU3BlY3VsYXJUZXhEYXRhICsgXCIueFxcblwiO1xuXHRcdFx0cmVnaXN0ZXJDYWNoZS5yZW1vdmVGcmFnbWVudFRlbXBVc2FnZSh0aGlzLl9wU3BlY3VsYXJUZXhEYXRhKTtcblx0XHR9XG5cblx0XHQvLyBhcHBseSBtYXRlcmlhbCdzIHNwZWN1bGFyIHJlZmxlY3Rpb25cblx0XHRjb2RlICs9IFwibXVsIFwiICsgdGhpcy5fcFRvdGFsTGlnaHRDb2xvclJlZyArIFwiLnh5eiwgXCIgKyB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnICsgXCIsIFwiICsgdGhpcy5fcFNwZWN1bGFyRGF0YVJlZ2lzdGVyICsgXCJcXG5cIiArXG5cdFx0XHRcImFkZCBcIiArIHRhcmdldFJlZyArIFwiLnh5eiwgXCIgKyB0YXJnZXRSZWcgKyBcIiwgXCIgKyB0aGlzLl9wVG90YWxMaWdodENvbG9yUmVnICsgXCJcXG5cIjtcblx0XHRyZWdpc3RlckNhY2hlLnJlbW92ZUZyYWdtZW50VGVtcFVzYWdlKHRoaXMuX3BUb3RhbExpZ2h0Q29sb3JSZWcpO1xuXG5cdFx0cmV0dXJuIGNvZGU7XG5cdH1cblxuXHQvKipcblx0ICogQGluaGVyaXREb2Ncblx0ICovXG5cdHB1YmxpYyBpQWN0aXZhdGUoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgc3RhZ2U6U3RhZ2UpXG5cdHtcblx0XHRpZiAodGhpcy5fcFVzZVRleHR1cmUpIHtcblx0XHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5zZXRTYW1wbGVyU3RhdGVBdChtZXRob2RWTy50ZXh0dXJlc0luZGV4LCBzaGFkZXJPYmplY3QucmVwZWF0VGV4dHVyZXM/IENvbnRleHRHTFdyYXBNb2RlLlJFUEVBVDpDb250ZXh0R0xXcmFwTW9kZS5DTEFNUCwgc2hhZGVyT2JqZWN0LnVzZVNtb290aFRleHR1cmVzPyBDb250ZXh0R0xUZXh0dXJlRmlsdGVyLkxJTkVBUjpDb250ZXh0R0xUZXh0dXJlRmlsdGVyLk5FQVJFU1QsIHNoYWRlck9iamVjdC51c2VNaXBtYXBwaW5nPyBDb250ZXh0R0xNaXBGaWx0ZXIuTUlQTElORUFSOkNvbnRleHRHTE1pcEZpbHRlci5NSVBOT05FKTtcblx0XHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5hY3RpdmF0ZVRleHR1cmUobWV0aG9kVk8udGV4dHVyZXNJbmRleCwgdGhpcy5fdGV4dHVyZSk7XG5cdFx0fVxuXG5cdFx0dmFyIGluZGV4Om51bWJlciA9IG1ldGhvZFZPLmZyYWdtZW50Q29uc3RhbnRzSW5kZXg7XG5cdFx0dmFyIGRhdGE6QXJyYXk8bnVtYmVyPiA9IHNoYWRlck9iamVjdC5mcmFnbWVudENvbnN0YW50RGF0YTtcblx0XHRkYXRhW2luZGV4XSA9IHRoaXMuX2lTcGVjdWxhclI7XG5cdFx0ZGF0YVtpbmRleCArIDFdID0gdGhpcy5faVNwZWN1bGFyRztcblx0XHRkYXRhW2luZGV4ICsgMl0gPSB0aGlzLl9pU3BlY3VsYXJCO1xuXHRcdGRhdGFbaW5kZXggKyAzXSA9IHRoaXMuX2dsb3NzO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZXMgdGhlIHNwZWN1bGFyIGNvbG9yIGRhdGEgdXNlZCBieSB0aGUgcmVuZGVyIHN0YXRlLlxuXHQgKi9cblx0cHJpdmF0ZSB1cGRhdGVTcGVjdWxhcigpXG5cdHtcblx0XHR0aGlzLl9pU3BlY3VsYXJSID0gKCggdGhpcy5fc3BlY3VsYXJDb2xvciA+PiAxNikgJiAweGZmKS8weGZmKnRoaXMuX3NwZWN1bGFyO1xuXHRcdHRoaXMuX2lTcGVjdWxhckcgPSAoKCB0aGlzLl9zcGVjdWxhckNvbG9yID4+IDgpICYgMHhmZikvMHhmZip0aGlzLl9zcGVjdWxhcjtcblx0XHR0aGlzLl9pU3BlY3VsYXJCID0gKCB0aGlzLl9zcGVjdWxhckNvbG9yICYgMHhmZikvMHhmZip0aGlzLl9zcGVjdWxhcjtcblx0fVxufVxuXG5leHBvcnQgPSBTcGVjdWxhckJhc2ljTWV0aG9kOyJdfQ==