var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShadingMethodBase = require("awayjs-stagegl/lib/materials/methods/ShadingMethodBase");
/**
 * LightingMethodBase provides an abstract base method for shading methods that uses lights.
 * Used for diffuse and specular shaders only.
 */
var LightingMethodBase = (function (_super) {
    __extends(LightingMethodBase, _super);
    /**
     * Creates a new LightingMethodBase.
     */
    function LightingMethodBase() {
        _super.call(this);
    }
    /**
     * Get the fragment shader code that will be needed before any per-light code is added.
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param regCache The register cache used during the compilation.
     * @private
     */
    LightingMethodBase.prototype.iGetFragmentPreLightingCode = function (shaderObject, methodVO, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that will generate the code relevant to a single light.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param lightDirReg The register containing the light direction vector.
     * @param lightColReg The register containing the light colour.
     * @param regCache The register cache used during the compilation.
     */
    LightingMethodBase.prototype.iGetFragmentCodePerLight = function (shaderObject, methodVO, lightDirReg, lightColReg, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that will generate the code relevant to a single light probe object.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param cubeMapReg The register containing the cube map for the current probe
     * @param weightRegister A string representation of the register + component containing the current weight
     * @param regCache The register cache providing any necessary registers to the shader
     */
    LightingMethodBase.prototype.iGetFragmentCodePerProbe = function (shaderObject, methodVO, cubeMapReg, weightRegister, registerCache, sharedRegisters) {
        return "";
    };
    /**
     * Get the fragment shader code that should be added after all per-light code. Usually composits everything to the target register.
     *
     * @param methodVO The MethodVO object containing the method data for the currently compiled material pass.
     * @param regCache The register cache used during the compilation.
     * @param targetReg The register containing the final shading output.
     * @private
     */
    LightingMethodBase.prototype.iGetFragmentPostLightingCode = function (shaderObject, methodVO, targetReg, registerCache, sharedRegisters) {
        return "";
    };
    return LightingMethodBase;
})(ShadingMethodBase);
module.exports = LightingMethodBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvbWV0aG9kcy9saWdodGluZ21ldGhvZGJhc2UudHMiXSwibmFtZXMiOlsiTGlnaHRpbmdNZXRob2RCYXNlIiwiTGlnaHRpbmdNZXRob2RCYXNlLmNvbnN0cnVjdG9yIiwiTGlnaHRpbmdNZXRob2RCYXNlLmlHZXRGcmFnbWVudFByZUxpZ2h0aW5nQ29kZSIsIkxpZ2h0aW5nTWV0aG9kQmFzZS5pR2V0RnJhZ21lbnRDb2RlUGVyTGlnaHQiLCJMaWdodGluZ01ldGhvZEJhc2UuaUdldEZyYWdtZW50Q29kZVBlclByb2JlIiwiTGlnaHRpbmdNZXRob2RCYXNlLmlHZXRGcmFnbWVudFBvc3RMaWdodGluZ0NvZGUiXSwibWFwcGluZ3MiOiI7Ozs7OztBQU1BLElBQU8saUJBQWlCLFdBQWEsd0RBQXdELENBQUMsQ0FBQztBQUUvRixBQUlBOzs7R0FERztJQUNHLGtCQUFrQjtJQUFTQSxVQUEzQkEsa0JBQWtCQSxVQUEwQkE7SUFPakRBOztPQUVHQTtJQUNIQSxTQVZLQSxrQkFBa0JBO1FBWXRCQyxpQkFBT0EsQ0FBQ0E7SUFDVEEsQ0FBQ0E7SUFFREQ7Ozs7O09BS0dBO0lBQ0lBLHdEQUEyQkEsR0FBbENBLFVBQW1DQSxZQUFpQ0EsRUFBRUEsUUFBaUJBLEVBQUVBLGFBQWlDQSxFQUFFQSxlQUFrQ0E7UUFFN0pFLE1BQU1BLENBQUNBLEVBQUVBLENBQUNBO0lBQ1hBLENBQUNBO0lBRURGOzs7Ozs7O09BT0dBO0lBQ0lBLHFEQUF3QkEsR0FBL0JBLFVBQWdDQSxZQUFpQ0EsRUFBRUEsUUFBaUJBLEVBQUVBLFdBQWlDQSxFQUFFQSxXQUFpQ0EsRUFBRUEsYUFBaUNBLEVBQUVBLGVBQWtDQTtRQUVoT0csTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFFREg7Ozs7Ozs7T0FPR0E7SUFDSUEscURBQXdCQSxHQUEvQkEsVUFBZ0NBLFlBQWlDQSxFQUFFQSxRQUFpQkEsRUFBRUEsVUFBZ0NBLEVBQUVBLGNBQXFCQSxFQUFFQSxhQUFpQ0EsRUFBRUEsZUFBa0NBO1FBRW5OSSxNQUFNQSxDQUFDQSxFQUFFQSxDQUFDQTtJQUNYQSxDQUFDQTtJQUVESjs7Ozs7OztPQU9HQTtJQUNJQSx5REFBNEJBLEdBQW5DQSxVQUFvQ0EsWUFBaUNBLEVBQUVBLFFBQWlCQSxFQUFFQSxTQUErQkEsRUFBRUEsYUFBaUNBLEVBQUVBLGVBQWtDQTtRQUUvTEssTUFBTUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7SUFDWEEsQ0FBQ0E7SUFDRkwseUJBQUNBO0FBQURBLENBaEVBLEFBZ0VDQSxFQWhFZ0MsaUJBQWlCLEVBZ0VqRDtBQUVELEFBQTRCLGlCQUFuQixrQkFBa0IsQ0FBQyIsImZpbGUiOiJtYXRlcmlhbHMvbWV0aG9kcy9MaWdodGluZ01ldGhvZEJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1ldGhvZFZPXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9NZXRob2RWT1wiKTtcbmltcG9ydCBTaGFkZXJPYmplY3RCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlck9iamVjdEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyTGlnaHRpbmdPYmplY3RcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlckxpZ2h0aW5nT2JqZWN0XCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJEYXRhXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJSZWdpc3RlckRhdGFcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJFbGVtZW50XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJFbGVtZW50XCIpO1xuaW1wb3J0IFNoYWRpbmdNZXRob2RCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9tZXRob2RzL1NoYWRpbmdNZXRob2RCYXNlXCIpO1xuXG4vKipcbiAqIExpZ2h0aW5nTWV0aG9kQmFzZSBwcm92aWRlcyBhbiBhYnN0cmFjdCBiYXNlIG1ldGhvZCBmb3Igc2hhZGluZyBtZXRob2RzIHRoYXQgdXNlcyBsaWdodHMuXG4gKiBVc2VkIGZvciBkaWZmdXNlIGFuZCBzcGVjdWxhciBzaGFkZXJzIG9ubHkuXG4gKi9cbmNsYXNzIExpZ2h0aW5nTWV0aG9kQmFzZSBleHRlbmRzIFNoYWRpbmdNZXRob2RCYXNlXG57XG5cdC8qKlxuXHQgKiBBIG1ldGhvZCB0aGF0IGlzIGV4cG9zZWQgdG8gd3JhcHBlcnMgaW4gY2FzZSB0aGUgc3RyZW5ndGggbmVlZHMgdG8gYmUgY29udHJvbGxlZFxuXHQgKi9cblx0cHVibGljIF9pTW9kdWxhdGVNZXRob2Q6KHNoYWRlck9iamVjdDpTaGFkZXJPYmplY3RCYXNlLCBtZXRob2RWTzpNZXRob2RWTywgdGFyZ2V0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKSA9PiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgTGlnaHRpbmdNZXRob2RCYXNlLlxuXHQgKi9cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdFx0c3VwZXIoKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGZyYWdtZW50IHNoYWRlciBjb2RlIHRoYXQgd2lsbCBiZSBuZWVkZWQgYmVmb3JlIGFueSBwZXItbGlnaHQgY29kZSBpcyBhZGRlZC5cblx0ICogQHBhcmFtIG1ldGhvZFZPIFRoZSBNZXRob2RWTyBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0aG9kIGRhdGEgZm9yIHRoZSBjdXJyZW50bHkgY29tcGlsZWQgbWF0ZXJpYWwgcGFzcy5cblx0ICogQHBhcmFtIHJlZ0NhY2hlIFRoZSByZWdpc3RlciBjYWNoZSB1c2VkIGR1cmluZyB0aGUgY29tcGlsYXRpb24uXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwdWJsaWMgaUdldEZyYWdtZW50UHJlTGlnaHRpbmdDb2RlKHNoYWRlck9iamVjdDpTaGFkZXJMaWdodGluZ09iamVjdCwgbWV0aG9kVk86TWV0aG9kVk8sIHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgc2hhcmVkUmVnaXN0ZXJzOlNoYWRlclJlZ2lzdGVyRGF0YSk6c3RyaW5nXG5cdHtcblx0XHRyZXR1cm4gXCJcIjtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgdGhlIGZyYWdtZW50IHNoYWRlciBjb2RlIHRoYXQgd2lsbCBnZW5lcmF0ZSB0aGUgY29kZSByZWxldmFudCB0byBhIHNpbmdsZSBsaWdodC5cblx0ICpcblx0ICogQHBhcmFtIG1ldGhvZFZPIFRoZSBNZXRob2RWTyBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0aG9kIGRhdGEgZm9yIHRoZSBjdXJyZW50bHkgY29tcGlsZWQgbWF0ZXJpYWwgcGFzcy5cblx0ICogQHBhcmFtIGxpZ2h0RGlyUmVnIFRoZSByZWdpc3RlciBjb250YWluaW5nIHRoZSBsaWdodCBkaXJlY3Rpb24gdmVjdG9yLlxuXHQgKiBAcGFyYW0gbGlnaHRDb2xSZWcgVGhlIHJlZ2lzdGVyIGNvbnRhaW5pbmcgdGhlIGxpZ2h0IGNvbG91ci5cblx0ICogQHBhcmFtIHJlZ0NhY2hlIFRoZSByZWdpc3RlciBjYWNoZSB1c2VkIGR1cmluZyB0aGUgY29tcGlsYXRpb24uXG5cdCAqL1xuXHRwdWJsaWMgaUdldEZyYWdtZW50Q29kZVBlckxpZ2h0KHNoYWRlck9iamVjdDpTaGFkZXJMaWdodGluZ09iamVjdCwgbWV0aG9kVk86TWV0aG9kVk8sIGxpZ2h0RGlyUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgbGlnaHRDb2xSZWc6U2hhZGVyUmVnaXN0ZXJFbGVtZW50LCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBmcmFnbWVudCBzaGFkZXIgY29kZSB0aGF0IHdpbGwgZ2VuZXJhdGUgdGhlIGNvZGUgcmVsZXZhbnQgdG8gYSBzaW5nbGUgbGlnaHQgcHJvYmUgb2JqZWN0LlxuXHQgKlxuXHQgKiBAcGFyYW0gbWV0aG9kVk8gVGhlIE1ldGhvZFZPIG9iamVjdCBjb250YWluaW5nIHRoZSBtZXRob2QgZGF0YSBmb3IgdGhlIGN1cnJlbnRseSBjb21waWxlZCBtYXRlcmlhbCBwYXNzLlxuXHQgKiBAcGFyYW0gY3ViZU1hcFJlZyBUaGUgcmVnaXN0ZXIgY29udGFpbmluZyB0aGUgY3ViZSBtYXAgZm9yIHRoZSBjdXJyZW50IHByb2JlXG5cdCAqIEBwYXJhbSB3ZWlnaHRSZWdpc3RlciBBIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgcmVnaXN0ZXIgKyBjb21wb25lbnQgY29udGFpbmluZyB0aGUgY3VycmVudCB3ZWlnaHRcblx0ICogQHBhcmFtIHJlZ0NhY2hlIFRoZSByZWdpc3RlciBjYWNoZSBwcm92aWRpbmcgYW55IG5lY2Vzc2FyeSByZWdpc3RlcnMgdG8gdGhlIHNoYWRlclxuXHQgKi9cblx0cHVibGljIGlHZXRGcmFnbWVudENvZGVQZXJQcm9iZShzaGFkZXJPYmplY3Q6U2hhZGVyTGlnaHRpbmdPYmplY3QsIG1ldGhvZFZPOk1ldGhvZFZPLCBjdWJlTWFwUmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgd2VpZ2h0UmVnaXN0ZXI6c3RyaW5nLCByZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIHNoYXJlZFJlZ2lzdGVyczpTaGFkZXJSZWdpc3RlckRhdGEpOnN0cmluZ1xuXHR7XG5cdFx0cmV0dXJuIFwiXCI7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBmcmFnbWVudCBzaGFkZXIgY29kZSB0aGF0IHNob3VsZCBiZSBhZGRlZCBhZnRlciBhbGwgcGVyLWxpZ2h0IGNvZGUuIFVzdWFsbHkgY29tcG9zaXRzIGV2ZXJ5dGhpbmcgdG8gdGhlIHRhcmdldCByZWdpc3Rlci5cblx0ICpcblx0ICogQHBhcmFtIG1ldGhvZFZPIFRoZSBNZXRob2RWTyBvYmplY3QgY29udGFpbmluZyB0aGUgbWV0aG9kIGRhdGEgZm9yIHRoZSBjdXJyZW50bHkgY29tcGlsZWQgbWF0ZXJpYWwgcGFzcy5cblx0ICogQHBhcmFtIHJlZ0NhY2hlIFRoZSByZWdpc3RlciBjYWNoZSB1c2VkIGR1cmluZyB0aGUgY29tcGlsYXRpb24uXG5cdCAqIEBwYXJhbSB0YXJnZXRSZWcgVGhlIHJlZ2lzdGVyIGNvbnRhaW5pbmcgdGhlIGZpbmFsIHNoYWRpbmcgb3V0cHV0LlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHVibGljIGlHZXRGcmFnbWVudFBvc3RMaWdodGluZ0NvZGUoc2hhZGVyT2JqZWN0OlNoYWRlckxpZ2h0aW5nT2JqZWN0LCBtZXRob2RWTzpNZXRob2RWTywgdGFyZ2V0UmVnOlNoYWRlclJlZ2lzdGVyRWxlbWVudCwgcmVnaXN0ZXJDYWNoZTpTaGFkZXJSZWdpc3RlckNhY2hlLCBzaGFyZWRSZWdpc3RlcnM6U2hhZGVyUmVnaXN0ZXJEYXRhKTpzdHJpbmdcblx0e1xuXHRcdHJldHVybiBcIlwiO1xuXHR9XG59XG5cbmV4cG9ydCA9IExpZ2h0aW5nTWV0aG9kQmFzZTsiXX0=