var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ContextGLTriangleFace = require("awayjs-stagegl/lib/base/ContextGLTriangleFace");
var ShaderCompilerBase = require("awayjs-stagegl/lib/materials/compilation/ShaderCompilerBase");
/**
 * ShaderObjectBase keeps track of the number of dependencies for "named registers" used across a pass.
 * Named registers are that are not necessarily limited to a single method. They are created by the compiler and
 * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed
 * each time a method has been compiled into the shader.
 *
 * @see RegisterPool.addUsage
 */
var ShaderObjectBase = (function () {
    /**
     * Creates a new MethodCompilerVO object.
     */
    function ShaderObjectBase(profile) {
        this._defaultCulling = ContextGLTriangleFace.BACK;
        this._pInverseSceneMatrix = new Array();
        //set ambient values to default
        this.ambientR = 0xFF;
        this.ambientG = 0xFF;
        this.ambientB = 0xFF;
        /**
         * Indicates whether there are any dependencies on the world-space position vector.
         */
        this.usesGlobalPosFragment = false;
        this.vertexConstantData = new Array();
        this.fragmentConstantData = new Array();
        this.profile = profile;
    }
    /**
     * Factory method to create a concrete compiler object for this object
     *
     * @param materialPassVO
     * @returns {away.materials.ShaderCompilerBase}
     */
    ShaderObjectBase.prototype.createCompiler = function (material, materialPass) {
        return new ShaderCompilerBase(material, materialPass, this);
    };
    /**
     * Clears dependency counts for all registers. Called when recompiling a pass.
     */
    ShaderObjectBase.prototype.reset = function () {
        this.projectionDependencies = 0;
        this.normalDependencies = 0;
        this.viewDirDependencies = 0;
        this.uvDependencies = 0;
        this.secondaryUVDependencies = 0;
        this.globalPosDependencies = 0;
        this.tangentDependencies = 0;
        this.usesGlobalPosFragment = false;
        this.usesFragmentAnimation = false;
        this.usesTangentSpace = false;
        this.outputsNormals = false;
        this.outputsTangentNormals = false;
    };
    /**
     * Adds any external world space dependencies, used to force world space calculations.
     */
    ShaderObjectBase.prototype.addWorldSpaceDependencies = function (fragmentLights) {
        if (this.viewDirDependencies > 0)
            ++this.globalPosDependencies;
    };
    ShaderObjectBase.prototype.pInitRegisterIndices = function () {
        this.commonsDataIndex = -1;
        this.cameraPositionIndex = -1;
        this.uvBufferIndex = -1;
        this.uvTransformIndex = -1;
        this.secondaryUVBufferIndex = -1;
        this.normalBufferIndex = -1;
        this.tangentBufferIndex = -1;
        this.sceneMatrixIndex = -1;
        this.sceneNormalMatrixIndex = -1;
    };
    /**
     * Initializes the unchanging constant data for this shader object.
     */
    ShaderObjectBase.prototype.initConstantData = function (registerCache, animatableAttributes, animationTargetRegisters, uvSource, uvTarget) {
        //Updates the amount of used register indices.
        this.numUsedVertexConstants = registerCache.numUsedVertexConstants;
        this.numUsedFragmentConstants = registerCache.numUsedFragmentConstants;
        this.numUsedStreams = registerCache.numUsedStreams;
        this.numUsedTextures = registerCache.numUsedTextures;
        this.numUsedVaryings = registerCache.numUsedVaryings;
        this.numUsedFragmentConstants = registerCache.numUsedFragmentConstants;
        this.animatableAttributes = animatableAttributes;
        this.animationTargetRegisters = animationTargetRegisters;
        this.uvSource = uvSource;
        this.uvTarget = uvTarget;
        this.vertexConstantData.length = this.numUsedVertexConstants * 4;
        this.fragmentConstantData.length = this.numUsedFragmentConstants * 4;
        //Initializes commonly required constant values.
        this.fragmentConstantData[this.commonsDataIndex] = .5;
        this.fragmentConstantData[this.commonsDataIndex + 1] = 0;
        this.fragmentConstantData[this.commonsDataIndex + 2] = 1 / 255;
        this.fragmentConstantData[this.commonsDataIndex + 3] = 1;
        //Initializes the default UV transformation matrix.
        if (this.uvTransformIndex >= 0) {
            this.vertexConstantData[this.uvTransformIndex] = 1;
            this.vertexConstantData[this.uvTransformIndex + 1] = 0;
            this.vertexConstantData[this.uvTransformIndex + 2] = 0;
            this.vertexConstantData[this.uvTransformIndex + 3] = 0;
            this.vertexConstantData[this.uvTransformIndex + 4] = 0;
            this.vertexConstantData[this.uvTransformIndex + 5] = 1;
            this.vertexConstantData[this.uvTransformIndex + 6] = 0;
            this.vertexConstantData[this.uvTransformIndex + 7] = 0;
        }
        if (this.cameraPositionIndex >= 0)
            this.vertexConstantData[this.cameraPositionIndex + 3] = 1;
    };
    /**
     * @inheritDoc
     */
    ShaderObjectBase.prototype.iActivate = function (stage, camera) {
        stage.context.setCulling(this.useBothSides ? ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);
        if (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {
            var pos = camera.scenePosition;
            this.vertexConstantData[this.cameraPositionIndex] = pos.x;
            this.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;
            this.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;
        }
    };
    /**
     * @inheritDoc
     */
    ShaderObjectBase.prototype.iDeactivate = function (stage) {
    };
    /**
     *
     *
     * @param renderable
     * @param stage
     * @param camera
     */
    ShaderObjectBase.prototype.setRenderState = function (renderable, stage, camera, viewProjection) {
        var context = stage.context;
        if (renderable.materialOwner.animator)
            renderable.materialOwner.animator.setRenderState(this, renderable, stage, camera, this.numUsedVertexConstants, this.numUsedStreams);
        if (this.uvBufferIndex >= 0)
            context.activateBuffer(this.uvBufferIndex, renderable.getVertexData(TriangleSubGeometry.UV_DATA), renderable.getVertexOffset(TriangleSubGeometry.UV_DATA), TriangleSubGeometry.UV_FORMAT);
        if (this.secondaryUVBufferIndex >= 0)
            context.activateBuffer(this.secondaryUVBufferIndex, renderable.getVertexData(TriangleSubGeometry.SECONDARY_UV_DATA), renderable.getVertexOffset(TriangleSubGeometry.SECONDARY_UV_DATA), TriangleSubGeometry.SECONDARY_UV_FORMAT);
        if (this.normalBufferIndex >= 0)
            context.activateBuffer(this.normalBufferIndex, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
        if (this.tangentBufferIndex >= 0)
            context.activateBuffer(this.tangentBufferIndex, renderable.getVertexData(TriangleSubGeometry.TANGENT_DATA), renderable.getVertexOffset(TriangleSubGeometry.TANGENT_DATA), TriangleSubGeometry.TANGENT_FORMAT);
        if (this.usesUVTransform) {
            var uvTransform = renderable.materialOwner.uvTransform.matrix;
            if (uvTransform) {
                this.vertexConstantData[this.uvTransformIndex] = uvTransform.a;
                this.vertexConstantData[this.uvTransformIndex + 1] = uvTransform.b;
                this.vertexConstantData[this.uvTransformIndex + 3] = uvTransform.tx;
                this.vertexConstantData[this.uvTransformIndex + 4] = uvTransform.c;
                this.vertexConstantData[this.uvTransformIndex + 5] = uvTransform.d;
                this.vertexConstantData[this.uvTransformIndex + 7] = uvTransform.ty;
            }
            else {
                this.vertexConstantData[this.uvTransformIndex] = 1;
                this.vertexConstantData[this.uvTransformIndex + 1] = 0;
                this.vertexConstantData[this.uvTransformIndex + 3] = 0;
                this.vertexConstantData[this.uvTransformIndex + 4] = 0;
                this.vertexConstantData[this.uvTransformIndex + 5] = 1;
                this.vertexConstantData[this.uvTransformIndex + 7] = 0;
            }
        }
        if (this.sceneNormalMatrixIndex >= 0)
            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);
        if (this.usesTangentSpace && this.cameraPositionIndex >= 0) {
            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);
            var pos = camera.scenePosition;
            var x = pos.x;
            var y = pos.y;
            var z = pos.z;
            this.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];
            this.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];
            this.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];
        }
    };
    ShaderObjectBase.prototype.dispose = function () {
        //TODO uncount associated program data
    };
    return ShaderObjectBase;
})();
module.exports = ShaderObjectBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vc2hhZGVyb2JqZWN0YmFzZS50cyJdLCJuYW1lcyI6WyJTaGFkZXJPYmplY3RCYXNlIiwiU2hhZGVyT2JqZWN0QmFzZS5jb25zdHJ1Y3RvciIsIlNoYWRlck9iamVjdEJhc2UuY3JlYXRlQ29tcGlsZXIiLCJTaGFkZXJPYmplY3RCYXNlLnJlc2V0IiwiU2hhZGVyT2JqZWN0QmFzZS5hZGRXb3JsZFNwYWNlRGVwZW5kZW5jaWVzIiwiU2hhZGVyT2JqZWN0QmFzZS5wSW5pdFJlZ2lzdGVySW5kaWNlcyIsIlNoYWRlck9iamVjdEJhc2UuaW5pdENvbnN0YW50RGF0YSIsIlNoYWRlck9iamVjdEJhc2UuaUFjdGl2YXRlIiwiU2hhZGVyT2JqZWN0QmFzZS5pRGVhY3RpdmF0ZSIsIlNoYWRlck9iamVjdEJhc2Uuc2V0UmVuZGVyU3RhdGUiLCJTaGFkZXJPYmplY3RCYXNlLmRpc3Bvc2UiXSwibWFwcGluZ3MiOiJBQU9BLElBQU8sbUJBQW1CLFdBQWEsNkNBQTZDLENBQUMsQ0FBQztBQVN0RixJQUFPLHFCQUFxQixXQUFZLCtDQUErQyxDQUFDLENBQUM7QUFFekYsSUFBTyxrQkFBa0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBSXJHLEFBUUE7Ozs7Ozs7R0FERztJQUNHLGdCQUFnQjtJQWtMckJBOztPQUVHQTtJQUNIQSxTQXJMS0EsZ0JBQWdCQSxDQXFMVEEsT0FBT0E7UUFsTFhDLG9CQUFlQSxHQUFVQSxxQkFBcUJBLENBQUNBLElBQUlBLENBQUNBO1FBRXJEQSx5QkFBb0JBLEdBQWlCQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQStDaEVBLCtCQUErQkE7UUFDeEJBLGFBQVFBLEdBQVVBLElBQUlBLENBQUNBO1FBQ3ZCQSxhQUFRQSxHQUFVQSxJQUFJQSxDQUFDQTtRQUN2QkEsYUFBUUEsR0FBVUEsSUFBSUEsQ0FBQ0E7UUFpRTlCQTs7V0FFR0E7UUFDSUEsMEJBQXFCQSxHQUFXQSxL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R0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFekRBLEFBQ0FBLG1EQURtREE7UUFDbkRBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaENBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNuREEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLElBQUlBLENBQUNB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Z0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBO2dCQUNwRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBO1lBQ3JFQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDUEEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNuREEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3hEQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxzQkFBc0JBLElBQUlBLENBQUNBLENBQUNBO1lBQ3BDQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxxQkFBcUJBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUUxSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxJQUFJQSxJQUFJQSxDQUFDQSxtQkFBbUJBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRTVEQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxxQkFBcUJBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0E7WUFDdkZBLElBQUlBLEdBQUdBLEdBQVlBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBO1lBQ3hDQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBRXJCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNyTEEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDekxBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQzNMQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUVNVCxrQ0FBT0EsR0FBZEE7UUFFQ1Usc0NBQXNDQTtJQUN2Q0EsQ0FBQ0E7SUFDRlYsdUJBQUNBO0FBQURBLENBdlhBLEFBdVhDQSxJQUFBO0FBRUQsQUFBMEIsaUJBQWpCLGdCQUFnQixDQUFDIiwiZmlsZSI6Im1hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXhcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXhcIik7XG5pbXBvcnQgTWF0cml4M0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFwiKTtcbmltcG9ydCBNYXRyaXgzRFV0aWxzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFV0aWxzXCIpO1xuaW1wb3J0IFJlY3RhbmdsZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9SZWN0YW5nbGVcIik7XG5pbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBUZXh0dXJlMkRCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZTJEQmFzZVwiKTtcblxuaW1wb3J0IFRyaWFuZ2xlU3ViR2VvbWV0cnlcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL1N0YWdlXCIpO1xuaW1wb3J0IEFuaW1hdGlvblNldEJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvQW5pbWF0aW9uU2V0QmFzZVwiKTtcbmltcG9ydCBBbmltYXRvckJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRvckJhc2VcIik7XG5pbXBvcnQgQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYW5pbWF0b3JzL2RhdGEvQW5pbWF0aW9uUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvUmVuZGVyYWJsZUJhc2VcIik7XG5pbXBvcnQgSUNvbnRleHRTdGFnZUdMXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYmFzZS9JQ29udGV4dFN0YWdlR0xcIik7XG5pbXBvcnQgQ29udGV4dEdMVHJpYW5nbGVGYWNlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0NvbnRleHRHTFRyaWFuZ2xlRmFjZVwiKTtcbmltcG9ydCBTdGFnZUdMTWF0ZXJpYWxCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9TdGFnZUdMTWF0ZXJpYWxCYXNlXCIpO1xuaW1wb3J0IFNoYWRlckNvbXBpbGVyQmFzZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyQ29tcGlsZXJCYXNlXCIpO1xuaW1wb3J0IFNoYWRlclJlZ2lzdGVyQ2FjaGVcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL2NvbXBpbGF0aW9uL1NoYWRlclJlZ2lzdGVyQ2FjaGVcIik7XG5pbXBvcnQgSU1hdGVyaWFsUGFzc1N0YWdlR0xcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL3Bhc3Nlcy9JTWF0ZXJpYWxQYXNzU3RhZ2VHTFwiKTtcblxuLyoqXG4gKiBTaGFkZXJPYmplY3RCYXNlIGtlZXBzIHRyYWNrIG9mIHRoZSBudW1iZXIgb2YgZGVwZW5kZW5jaWVzIGZvciBcIm5hbWVkIHJlZ2lzdGVyc1wiIHVzZWQgYWNyb3NzIGEgcGFzcy5cbiAqIE5hbWVkIHJlZ2lzdGVycyBhcmUgdGhhdCBhcmUgbm90IG5lY2Vzc2FyaWx5IGxpbWl0ZWQgdG8gYSBzaW5nbGUgbWV0aG9kLiBUaGV5IGFyZSBjcmVhdGVkIGJ5IHRoZSBjb21waWxlciBhbmRcbiAqIHBhc3NlZCBvbiB0byBtZXRob2RzLiBUaGUgY29tcGlsZXIgdXNlcyB0aGUgcmVzdWx0cyB0byByZXNlcnZlIHVzYWdlcyB0aHJvdWdoIFJlZ2lzdGVyUG9vbCwgd2hpY2ggY2FuIGJlIHJlbW92ZWRcbiAqIGVhY2ggdGltZSBhIG1ldGhvZCBoYXMgYmVlbiBjb21waWxlZCBpbnRvIHRoZSBzaGFkZXIuXG4gKlxuICogQHNlZSBSZWdpc3RlclBvb2wuYWRkVXNhZ2VcbiAqL1xuY2xhc3MgU2hhZGVyT2JqZWN0QmFzZVxue1xuXG5cdHByaXZhdGUgX2RlZmF1bHRDdWxsaW5nOnN0cmluZyA9IENvbnRleHRHTFRyaWFuZ2xlRmFjZS5CQUNLO1xuXG5cdHB1YmxpYyBfcEludmVyc2VTY2VuZU1hdHJpeDpBcnJheTxudW1iZXI+ID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblxuXHRwdWJsaWMgYW5pbWF0aW9uUmVnaXN0ZXJDYWNoZTpBbmltYXRpb25SZWdpc3RlckNhY2hlO1xuXG5cdHB1YmxpYyBwcm9maWxlOnN0cmluZztcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiB1c2VkIHZlcnRleCBjb25zdGFudHMgaW4gdGhlIHZlcnRleCBjb2RlLiBVc2VkIGJ5IHRoZSBhbmltYXRpb24gY29kZSBnZW5lcmF0aW9uIHRvIGtub3cgZnJvbSB3aGljaCBpbmRleCBvbiByZWdpc3RlcnMgYXJlIGF2YWlsYWJsZS5cblx0ICovXG5cdHB1YmxpYyBudW1Vc2VkVmVydGV4Q29uc3RhbnRzOm51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiB1c2VkIGZyYWdtZW50IGNvbnN0YW50cyBpbiB0aGUgZnJhZ21lbnQgY29kZS4gVXNlZCBieSB0aGUgYW5pbWF0aW9uIGNvZGUgZ2VuZXJhdGlvbiB0byBrbm93IGZyb20gd2hpY2ggaW5kZXggb24gcmVnaXN0ZXJzIGFyZSBhdmFpbGFibGUuXG5cdCAqL1xuXHRwdWJsaWMgbnVtVXNlZEZyYWdtZW50Q29uc3RhbnRzOm51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiB1c2VkIHZlcnRleCBzdHJlYW1zIGluIHRoZSB2ZXJ0ZXggY29kZS4gVXNlZCBieSB0aGUgYW5pbWF0aW9uIGNvZGUgZ2VuZXJhdGlvbiB0byBrbm93IGZyb20gd2hpY2ggaW5kZXggb24gc3RyZWFtcyBhcmUgYXZhaWxhYmxlLlxuXHQgKi9cblx0cHVibGljIG51bVVzZWRTdHJlYW1zOm51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBudW1Vc2VkVGV4dHVyZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIG51bVVzZWRWYXJ5aW5nczpudW1iZXI7XG5cblx0cHVibGljIGFuaW1hdGFibGVBdHRyaWJ1dGVzOkFycmF5PHN0cmluZz47XG5cdHB1YmxpYyBhbmltYXRpb25UYXJnZXRSZWdpc3RlcnM6QXJyYXk8c3RyaW5nPjtcblx0cHVibGljIHV2U291cmNlOnN0cmluZztcblx0cHVibGljIHV2VGFyZ2V0OnN0cmluZztcblxuXHRwdWJsaWMgdXNlQWxwaGFQcmVtdWx0aXBsaWVkOmJvb2xlYW47XG5cdHB1YmxpYyB1c2VCb3RoU2lkZXM6Ym9vbGVhbjtcblx0cHVibGljIHVzZU1pcG1hcHBpbmc6Ym9vbGVhbjtcblx0cHVibGljIHVzZVNtb290aFRleHR1cmVzOmJvb2xlYW47XG5cdHB1YmxpYyByZXBlYXRUZXh0dXJlczpib29sZWFuO1xuXHRwdWJsaWMgdXNlc1VWVHJhbnNmb3JtOmJvb2xlYW47XG5cdHB1YmxpYyBhbHBoYVRocmVzaG9sZDpudW1iZXI7XG5cdHB1YmxpYyB0ZXh0dXJlOlRleHR1cmUyREJhc2U7XG5cdHB1YmxpYyBjb2xvcjpudW1iZXI7XG5cblxuXHQvL3NldCBhbWJpZW50IHZhbHVlcyB0byBkZWZhdWx0XG5cdHB1YmxpYyBhbWJpZW50UjpudW1iZXIgPSAweEZGO1xuXHRwdWJsaWMgYW1iaWVudEc6bnVtYmVyID0gMHhGRjtcblx0cHVibGljIGFtYmllbnRCOm51bWJlciA9IDB4RkY7XG5cblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZSBwYXNzIHJlcXVpcmVzIGFueSBmcmFnbWVudCBhbmltYXRpb24gY29kZS5cblx0ICovXG5cdHB1YmxpYyB1c2VzRnJhZ21lbnRBbmltYXRpb246Ym9vbGVhbjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIHByb2plY3RlZCBwb3NpdGlvbi5cblx0ICovXG5cdHB1YmxpYyBwcm9qZWN0aW9uRGVwZW5kZW5jaWVzOm51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIG5vcm1hbCB2ZWN0b3IuXG5cdCAqL1xuXHRwdWJsaWMgbm9ybWFsRGVwZW5kZW5jaWVzOm51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIHZpZXcgZGlyZWN0aW9uLlxuXHQgKi9cblx0cHVibGljIHZpZXdEaXJEZXBlbmRlbmNpZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgcHJpbWFyeSBVViBjb29yZGluYXRlcy5cblx0ICovXG5cdHB1YmxpYyB1dkRlcGVuZGVuY2llczpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBzZWNvbmRhcnkgVVYgY29vcmRpbmF0ZXMuXG5cdCAqL1xuXHRwdWJsaWMgc2Vjb25kYXJ5VVZEZXBlbmRlbmNpZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgbG9jYWwgcG9zaXRpb24uIFRoaXMgY2FuIGJlIDAgd2hpbGUgaGFzR2xvYmFsUG9zRGVwZW5kZW5jaWVzIGlzIHRydWUgd2hlblxuXHQgKiB0aGUgZ2xvYmFsIHBvc2l0aW9uIGlzIHVzZWQgYXMgYSB0ZW1wb3JhcnkgdmFsdWUgKGZlIHRvIGNhbGN1bGF0ZSB0aGUgdmlldyBkaXJlY3Rpb24pXG5cdCAqL1xuXHRwdWJsaWMgbG9jYWxQb3NEZXBlbmRlbmNpZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgZ2xvYmFsIHBvc2l0aW9uLiBUaGlzIGNhbiBiZSAwIHdoaWxlIGhhc0dsb2JhbFBvc0RlcGVuZGVuY2llcyBpcyB0cnVlIHdoZW5cblx0ICogdGhlIGdsb2JhbCBwb3NpdGlvbiBpcyB1c2VkIGFzIGEgdGVtcG9yYXJ5IHZhbHVlIChmZSB0byBjYWxjdWxhdGUgdGhlIHZpZXcgZGlyZWN0aW9uKVxuXHQgKi9cblx0cHVibGljIGdsb2JhbFBvc0RlcGVuZGVuY2llczpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBhbW91bnQgb2YgdGFuZ2VudCB2ZWN0b3IgZGVwZW5kZW5jaWVzIChmcmFnbWVudCBzaGFkZXIpLlxuXHQgKi9cblx0cHVibGljIHRhbmdlbnREZXBlbmRlbmNpZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIG91dHB1dHNOb3JtYWxzOmJvb2xlYW47XG5cblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIG9yIG5vdCBub3JtYWwgY2FsY3VsYXRpb25zIGFyZSBleHBlY3RlZCBpbiB0YW5nZW50IHNwYWNlLiBUaGlzIGlzIG9ubHkgdGhlIGNhc2UgaWYgbm8gd29ybGQtc3BhY2Vcblx0ICogZGVwZW5kZW5jaWVzIGV4aXN0LlxuXHQgKi9cblx0cHVibGljIHVzZXNUYW5nZW50U3BhY2U6Ym9vbGVhbjtcblxuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IG5vcm1hbCBjYWxjdWxhdGlvbnMgYXJlIG91dHB1dCBpbiB0YW5nZW50IHNwYWNlLlxuXHQgKi9cblx0cHVibGljIG91dHB1dHNUYW5nZW50Tm9ybWFsczpib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciB0aGVyZSBhcmUgYW55IGRlcGVuZGVuY2llcyBvbiB0aGUgd29ybGQtc3BhY2UgcG9zaXRpb24gdmVjdG9yLlxuXHQgKi9cblx0cHVibGljIHVzZXNHbG9iYWxQb3NGcmFnbWVudDpib29sZWFuID0gZmFsc2U7XG5cblx0cHVibGljIHZlcnRleENvbnN0YW50RGF0YTpBcnJheTxudW1iZXI+ID0gbmV3IEFycmF5PG51bWJlcj4oKTtcblx0cHVibGljIGZyYWdtZW50Q29uc3RhbnREYXRhOkFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggZm9yIHRoZSBjb21tb24gZGF0YSByZWdpc3Rlci5cblx0ICovXG5cdHB1YmxpYyBjb21tb25zRGF0YUluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGluZGV4IGZvciB0aGUgVVYgdmVydGV4IGF0dHJpYnV0ZSBzdHJlYW0uXG5cdCAqL1xuXHRwdWJsaWMgdXZCdWZmZXJJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBmb3IgdGhlIHNlY29uZGFyeSBVViB2ZXJ0ZXggYXR0cmlidXRlIHN0cmVhbS5cblx0ICovXG5cdHB1YmxpYyBzZWNvbmRhcnlVVkJ1ZmZlckluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGluZGV4IGZvciB0aGUgdmVydGV4IG5vcm1hbCBhdHRyaWJ1dGUgc3RyZWFtLlxuXHQgKi9cblx0cHVibGljIG5vcm1hbEJ1ZmZlckluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGluZGV4IGZvciB0aGUgdmVydGV4IHRhbmdlbnQgYXR0cmlidXRlIHN0cmVhbS5cblx0ICovXG5cdHB1YmxpYyB0YW5nZW50QnVmZmVySW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggb2YgdGhlIHZlcnRleCBjb25zdGFudCBjb250YWluaW5nIHRoZSB2aWV3IG1hdHJpeC5cblx0ICovXG5cdHB1YmxpYyB2aWV3TWF0cml4SW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggb2YgdGhlIHZlcnRleCBjb25zdGFudCBjb250YWluaW5nIHRoZSBzY2VuZSBtYXRyaXguXG5cdCAqL1xuXHRwdWJsaWMgc2NlbmVNYXRyaXhJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgdmVydGV4IGNvbnN0YW50IGNvbnRhaW5pbmcgdGhlIHVuaWZvcm0gc2NlbmUgbWF0cml4ICh0aGUgaW52ZXJzZSB0cmFuc3Bvc2UpLlxuXHQgKi9cblx0cHVibGljIHNjZW5lTm9ybWFsTWF0cml4SW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggb2YgdGhlIHZlcnRleCBjb25zdGFudCBjb250YWluaW5nIHRoZSBjYW1lcmEgcG9zaXRpb24uXG5cdCAqL1xuXHRwdWJsaWMgY2FtZXJhUG9zaXRpb25JbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBmb3IgdGhlIFVWIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCB2ZXJ0ZXggY29uc3RhbnQuXG5cdCAqL1xuXHRwdWJsaWMgdXZUcmFuc2Zvcm1JbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgTWV0aG9kQ29tcGlsZXJWTyBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwcm9maWxlKVxuXHR7XG5cdFx0dGhpcy5wcm9maWxlID0gcHJvZmlsZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBGYWN0b3J5IG1ldGhvZCB0byBjcmVhdGUgYSBjb25jcmV0ZSBjb21waWxlciBvYmplY3QgZm9yIHRoaXMgb2JqZWN0XG5cdCAqXG5cdCAqIEBwYXJhbSBtYXRlcmlhbFBhc3NWT1xuXHQgKiBAcmV0dXJucyB7YXdheS5tYXRlcmlhbHMuU2hhZGVyQ29tcGlsZXJCYXNlfVxuXHQgKi9cblx0cHVibGljIGNyZWF0ZUNvbXBpbGVyKG1hdGVyaWFsOlN0YWdlR0xNYXRlcmlhbEJhc2UsIG1hdGVyaWFsUGFzczpJTWF0ZXJpYWxQYXNzU3RhZ2VHTCk6U2hhZGVyQ29tcGlsZXJCYXNlXG5cdHtcblx0XHRyZXR1cm4gbmV3IFNoYWRlckNvbXBpbGVyQmFzZShtYXRlcmlhbCwgbWF0ZXJpYWxQYXNzLCB0aGlzKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhcnMgZGVwZW5kZW5jeSBjb3VudHMgZm9yIGFsbCByZWdpc3RlcnMuIENhbGxlZCB3aGVuIHJlY29tcGlsaW5nIGEgcGFzcy5cblx0ICovXG5cdHB1YmxpYyByZXNldCgpXG5cdHtcblx0XHR0aGlzLnByb2plY3Rpb25EZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMubm9ybWFsRGVwZW5kZW5jaWVzID0gMDtcblx0XHR0aGlzLnZpZXdEaXJEZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMudXZEZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMuc2Vjb25kYXJ5VVZEZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMuZ2xvYmFsUG9zRGVwZW5kZW5jaWVzID0gMDtcblx0XHR0aGlzLnRhbmdlbnREZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMudXNlc0dsb2JhbFBvc0ZyYWdtZW50ID0gZmFsc2U7XG5cdFx0dGhpcy51c2VzRnJhZ21lbnRBbmltYXRpb24gPSBmYWxzZTtcblx0XHR0aGlzLnVzZXNUYW5nZW50U3BhY2UgPSBmYWxzZTtcblx0XHR0aGlzLm91dHB1dHNOb3JtYWxzID0gZmFsc2U7XG5cdFx0dGhpcy5vdXRwdXRzVGFuZ2VudE5vcm1hbHMgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGRzIGFueSBleHRlcm5hbCB3b3JsZCBzcGFjZSBkZXBlbmRlbmNpZXMsIHVzZWQgdG8gZm9yY2Ugd29ybGQgc3BhY2UgY2FsY3VsYXRpb25zLlxuXHQgKi9cblx0cHVibGljIGFkZFdvcmxkU3BhY2VEZXBlbmRlbmNpZXMoZnJhZ21lbnRMaWdodHM6Ym9vbGVhbilcblx0e1xuXHRcdGlmICh0aGlzLnZpZXdEaXJEZXBlbmRlbmNpZXMgPiAwKVxuXHRcdFx0Kyt0aGlzLmdsb2JhbFBvc0RlcGVuZGVuY2llcztcblx0fVxuXG5cdHB1YmxpYyBwSW5pdFJlZ2lzdGVySW5kaWNlcygpXG5cdHtcblx0XHR0aGlzLmNvbW1vbnNEYXRhSW5kZXggPSAtMTtcblx0XHR0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggPSAtMTtcblx0XHR0aGlzLnV2QnVmZmVySW5kZXggPSAtMTtcblx0XHR0aGlzLnV2VHJhbnNmb3JtSW5kZXggPSAtMTtcblx0XHR0aGlzLnNlY29uZGFyeVVWQnVmZmVySW5kZXggPSAtMTtcblx0XHR0aGlzLm5vcm1hbEJ1ZmZlckluZGV4ID0gLTE7XG5cdFx0dGhpcy50YW5nZW50QnVmZmVySW5kZXggPSAtMTtcblx0XHR0aGlzLnNjZW5lTWF0cml4SW5kZXggPSAtMTtcblx0XHR0aGlzLnNjZW5lTm9ybWFsTWF0cml4SW5kZXggPSAtMTtcblx0fVxuXG5cdC8qKlxuXHQgKiBJbml0aWFsaXplcyB0aGUgdW5jaGFuZ2luZyBjb25zdGFudCBkYXRhIGZvciB0aGlzIHNoYWRlciBvYmplY3QuXG5cdCAqL1xuXHRwdWJsaWMgaW5pdENvbnN0YW50RGF0YShyZWdpc3RlckNhY2hlOlNoYWRlclJlZ2lzdGVyQ2FjaGUsIGFuaW1hdGFibGVBdHRyaWJ1dGVzOkFycmF5PHN0cmluZz4sIGFuaW1hdGlvblRhcmdldFJlZ2lzdGVyczpBcnJheTxzdHJpbmc+LCB1dlNvdXJjZTpzdHJpbmcsIHV2VGFyZ2V0OnN0cmluZylcblx0e1xuXHRcdC8vVXBkYXRlcyB0aGUgYW1vdW50IG9mIHVzZWQgcmVnaXN0ZXIgaW5kaWNlcy5cblx0XHR0aGlzLm51bVVzZWRWZXJ0ZXhDb25zdGFudHMgPSByZWdpc3RlckNhY2hlLm51bVVzZWRWZXJ0ZXhDb25zdGFudHM7XG5cdFx0dGhpcy5udW1Vc2VkRnJhZ21lbnRDb25zdGFudHMgPSByZWdpc3RlckNhY2hlLm51bVVzZWRGcmFnbWVudENvbnN0YW50cztcblx0XHR0aGlzLm51bVVzZWRTdHJlYW1zID0gcmVnaXN0ZXJDYWNoZS5udW1Vc2VkU3RyZWFtcztcblx0XHR0aGlzLm51bVVzZWRUZXh0dXJlcyA9IHJlZ2lzdGVyQ2FjaGUubnVtVXNlZFRleHR1cmVzO1xuXHRcdHRoaXMubnVtVXNlZFZhcnlpbmdzID0gcmVnaXN0ZXJDYWNoZS5udW1Vc2VkVmFyeWluZ3M7XG5cdFx0dGhpcy5udW1Vc2VkRnJhZ21lbnRDb25zdGFudHMgPSByZWdpc3RlckNhY2hlLm51bVVzZWRGcmFnbWVudENvbnN0YW50cztcblxuXHRcdHRoaXMuYW5pbWF0YWJsZUF0dHJpYnV0ZXMgPSBhbmltYXRhYmxlQXR0cmlidXRlcztcblx0XHR0aGlzLmFuaW1hdGlvblRhcmdldFJlZ2lzdGVycyA9IGFuaW1hdGlvblRhcmdldFJlZ2lzdGVycztcblx0XHR0aGlzLnV2U291cmNlID0gdXZTb3VyY2U7XG5cdFx0dGhpcy51dlRhcmdldCA9IHV2VGFyZ2V0O1xuXG5cdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGEubGVuZ3RoID0gdGhpcy5udW1Vc2VkVmVydGV4Q29uc3RhbnRzKjQ7XG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50RGF0YS5sZW5ndGggPSB0aGlzLm51bVVzZWRGcmFnbWVudENvbnN0YW50cyo0O1xuXG5cdFx0Ly9Jbml0aWFsaXplcyBjb21tb25seSByZXF1aXJlZCBjb25zdGFudCB2YWx1ZXMuXG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50RGF0YVt0aGlzLmNvbW1vbnNEYXRhSW5kZXhdID0gLjU7XG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50RGF0YVt0aGlzLmNvbW1vbnNEYXRhSW5kZXggKyAxXSA9IDA7XG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50RGF0YVt0aGlzLmNvbW1vbnNEYXRhSW5kZXggKyAyXSA9IDEvMjU1O1xuXHRcdHRoaXMuZnJhZ21lbnRDb25zdGFudERhdGFbdGhpcy5jb21tb25zRGF0YUluZGV4ICsgM10gPSAxO1xuXG5cdFx0Ly9Jbml0aWFsaXplcyB0aGUgZGVmYXVsdCBVViB0cmFuc2Zvcm1hdGlvbiBtYXRyaXguXG5cdFx0aWYgKHRoaXMudXZUcmFuc2Zvcm1JbmRleCA+PSAwKSB7XG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXhdID0gMTtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDFdID0gMDtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDJdID0gMDtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDNdID0gMDtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDRdID0gMDtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDVdID0gMTtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDZdID0gMDtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDddID0gMDtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ID49IDApXG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggKyAzXSA9IDE7XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlBY3RpdmF0ZShzdGFnZTpTdGFnZSwgY2FtZXJhOkNhbWVyYSlcblx0e1xuXHRcdCg8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0KS5zZXRDdWxsaW5nKHRoaXMudXNlQm90aFNpZGVzPyBDb250ZXh0R0xUcmlhbmdsZUZhY2UuTk9ORSA6IHRoaXMuX2RlZmF1bHRDdWxsaW5nLCBjYW1lcmEucHJvamVjdGlvbi5jb29yZGluYXRlU3lzdGVtKTtcblxuXHRcdGlmICghdGhpcy51c2VzVGFuZ2VudFNwYWNlICYmIHRoaXMuY2FtZXJhUG9zaXRpb25JbmRleCA+PSAwKSB7XG5cdFx0XHR2YXIgcG9zOlZlY3RvcjNEID0gY2FtZXJhLnNjZW5lUG9zaXRpb247XG5cblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleF0gPSBwb3MueDtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleCArIDFdID0gcG9zLnk7XG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggKyAyXSA9IHBvcy56O1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAaW5oZXJpdERvY1xuXHQgKi9cblx0cHVibGljIGlEZWFjdGl2YXRlKHN0YWdlOlN0YWdlKVxuXHR7XG5cblx0fVxuXG5cblx0LyoqXG5cdCAqXG5cdCAqXG5cdCAqIEBwYXJhbSByZW5kZXJhYmxlXG5cdCAqIEBwYXJhbSBzdGFnZVxuXHQgKiBAcGFyYW0gY2FtZXJhXG5cdCAqL1xuXHRwdWJsaWMgc2V0UmVuZGVyU3RhdGUocmVuZGVyYWJsZTpSZW5kZXJhYmxlQmFzZSwgc3RhZ2U6U3RhZ2UsIGNhbWVyYTpDYW1lcmEsIHZpZXdQcm9qZWN0aW9uOk1hdHJpeDNEKVxuXHR7XG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRTdGFnZUdMID0gPElDb250ZXh0U3RhZ2VHTD4gc3RhZ2UuY29udGV4dDtcblxuXHRcdGlmIChyZW5kZXJhYmxlLm1hdGVyaWFsT3duZXIuYW5pbWF0b3IpXG5cdFx0XHQoPEFuaW1hdG9yQmFzZT4gcmVuZGVyYWJsZS5tYXRlcmlhbE93bmVyLmFuaW1hdG9yKS5zZXRSZW5kZXJTdGF0ZSh0aGlzLCByZW5kZXJhYmxlLCBzdGFnZSwgY2FtZXJhLCB0aGlzLm51bVVzZWRWZXJ0ZXhDb25zdGFudHMsIHRoaXMubnVtVXNlZFN0cmVhbXMpO1xuXG5cdFx0aWYgKHRoaXMudXZCdWZmZXJJbmRleCA+PSAwKVxuXHRcdFx0Y29udGV4dC5hY3RpdmF0ZUJ1ZmZlcih0aGlzLnV2QnVmZmVySW5kZXgsIHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlVWX0RBVEEpLCByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5LlVWX0RBVEEpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlVWX0ZPUk1BVCk7XG5cblx0XHRpZiAodGhpcy5zZWNvbmRhcnlVVkJ1ZmZlckluZGV4ID49IDApXG5cdFx0XHRjb250ZXh0LmFjdGl2YXRlQnVmZmVyKHRoaXMuc2Vjb25kYXJ5VVZCdWZmZXJJbmRleCwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuU0VDT05EQVJZX1VWX0RBVEEpLCByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5LlNFQ09OREFSWV9VVl9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5TRUNPTkRBUllfVVZfRk9STUFUKTtcblxuXHRcdGlmICh0aGlzLm5vcm1hbEJ1ZmZlckluZGV4ID49IDApXG5cdFx0XHRjb250ZXh0LmFjdGl2YXRlQnVmZmVyKHRoaXMubm9ybWFsQnVmZmVySW5kZXgsIHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5Lk5PUk1BTF9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5OT1JNQUxfREFUQSksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuTk9STUFMX0ZPUk1BVCk7XG5cblx0XHRpZiAodGhpcy50YW5nZW50QnVmZmVySW5kZXggPj0gMClcblx0XHRcdGNvbnRleHQuYWN0aXZhdGVCdWZmZXIodGhpcy50YW5nZW50QnVmZmVySW5kZXgsIHJlbmRlcmFibGUuZ2V0VmVydGV4RGF0YShUcmlhbmdsZVN1Ykdlb21ldHJ5LlRBTkdFTlRfREFUQSksIHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuVEFOR0VOVF9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5UQU5HRU5UX0ZPUk1BVCk7XG5cblxuXHRcdGlmICh0aGlzLnVzZXNVVlRyYW5zZm9ybSkge1xuXHRcdFx0dmFyIHV2VHJhbnNmb3JtOk1hdHJpeCA9IHJlbmRlcmFibGUubWF0ZXJpYWxPd25lci51dlRyYW5zZm9ybS5tYXRyaXg7XG5cblx0XHRcdGlmICh1dlRyYW5zZm9ybSkge1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXhdID0gdXZUcmFuc2Zvcm0uYTtcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgMV0gPSB1dlRyYW5zZm9ybS5iO1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyAzXSA9IHV2VHJhbnNmb3JtLnR4O1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA0XSA9IHV2VHJhbnNmb3JtLmM7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDVdID0gdXZUcmFuc2Zvcm0uZDtcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgN10gPSB1dlRyYW5zZm9ybS50eTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleF0gPSAxO1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyAxXSA9IDA7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDNdID0gMDtcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgNF0gPSAwO1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA1XSA9IDE7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDddID0gMDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAodGhpcy5zY2VuZU5vcm1hbE1hdHJpeEluZGV4ID49IDApXG5cdFx0XHRyZW5kZXJhYmxlLnNvdXJjZUVudGl0eS5pbnZlcnNlU2NlbmVUcmFuc2Zvcm0uY29weVJhd0RhdGFUbyh0aGlzLnZlcnRleENvbnN0YW50RGF0YSwgdGhpcy5zY2VuZU5vcm1hbE1hdHJpeEluZGV4LCBmYWxzZSk7XG5cblx0XHRpZiAodGhpcy51c2VzVGFuZ2VudFNwYWNlICYmIHRoaXMuY2FtZXJhUG9zaXRpb25JbmRleCA+PSAwKSB7XG5cblx0XHRcdHJlbmRlcmFibGUuc291cmNlRW50aXR5LmludmVyc2VTY2VuZVRyYW5zZm9ybS5jb3B5UmF3RGF0YVRvKHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXgpO1xuXHRcdFx0dmFyIHBvczpWZWN0b3IzRCA9IGNhbWVyYS5zY2VuZVBvc2l0aW9uO1xuXHRcdFx0dmFyIHg6bnVtYmVyID0gcG9zLng7XG5cdFx0XHR2YXIgeTpudW1iZXIgPSBwb3MueTtcblx0XHRcdHZhciB6Om51bWJlciA9IHBvcy56O1xuXG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXhdID0gdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFswXSp4ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFs0XSp5ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFs4XSp6ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFsxMl07XG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggKyAxXSA9IHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbMV0qeCArIHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbNV0qeSArIHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbOV0qeiArIHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbMTNdO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ICsgMl0gPSB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzJdKnggKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzZdKnkgKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzEwXSp6ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFsxNF07XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0Ly9UT0RPIHVuY291bnQgYXNzb2NpYXRlZCBwcm9ncmFtIGRhdGFcblx0fVxufVxuXG5leHBvcnQgPSBTaGFkZXJPYmplY3RCYXNlOyJdfQ==