var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var ContextGLTriangleFace = require("awayjs-stagegl/lib/core/stagegl/ContextGLTriangleFace");
var ShaderCompilerBase = require("awayjs-stagegl/lib/materials/compilation/ShaderCompilerBase");
/**
 * ShaderObjectBase keeps track of the number of dependencies for "named registers" used across a pass.
 * Named registers are that are not necessarily limited to a single method. They are created by the compiler and
 * passed on to methods. The compiler uses the results to reserve usages through RegisterPool, which can be removed
 * each time a method has been compiled into the shader.
 *
 * @see RegisterPool.addUsage
 */
var ShaderObjectBase = (function () {
    /**
     * Creates a new MethodCompilerVO object.
     */
    function ShaderObjectBase(profile) {
        this._defaultCulling = ContextGLTriangleFace.BACK;
        this._pInverseSceneMatrix = new Array();
        //set ambient values to default
        this.ambientR = 0xFF;
        this.ambientG = 0xFF;
        this.ambientB = 0xFF;
        /**
         * Indicates whether there are any dependencies on the world-space position vector.
         */
        this.usesGlobalPosFragment = false;
        this.vertexConstantData = new Array();
        this.fragmentConstantData = new Array();
        this.profile = profile;
    }
    /**
     * Factory method to create a concrete compiler object for this object
     *
     * @param materialPassVO
     * @returns {away.materials.ShaderCompilerBase}
     */
    ShaderObjectBase.prototype.createCompiler = function (material, materialPass) {
        return new ShaderCompilerBase(material, materialPass, this);
    };
    /**
     * Clears dependency counts for all registers. Called when recompiling a pass.
     */
    ShaderObjectBase.prototype.reset = function () {
        this.projectionDependencies = 0;
        this.normalDependencies = 0;
        this.viewDirDependencies = 0;
        this.uvDependencies = 0;
        this.secondaryUVDependencies = 0;
        this.globalPosDependencies = 0;
        this.tangentDependencies = 0;
        this.usesGlobalPosFragment = false;
        this.usesFragmentAnimation = false;
        this.usesTangentSpace = false;
        this.outputsNormals = false;
        this.outputsTangentNormals = false;
    };
    /**
     * Adds any external world space dependencies, used to force world space calculations.
     */
    ShaderObjectBase.prototype.addWorldSpaceDependencies = function (fragmentLights) {
        if (this.viewDirDependencies > 0)
            ++this.globalPosDependencies;
    };
    ShaderObjectBase.prototype.pInitRegisterIndices = function () {
        this.commonsDataIndex = -1;
        this.cameraPositionIndex = -1;
        this.uvBufferIndex = -1;
        this.uvTransformIndex = -1;
        this.secondaryUVBufferIndex = -1;
        this.normalBufferIndex = -1;
        this.tangentBufferIndex = -1;
        this.sceneMatrixIndex = -1;
        this.sceneNormalMatrixIndex = -1;
    };
    /**
     * Initializes the unchanging constant data for this shader object.
     */
    ShaderObjectBase.prototype.initConstantData = function (registerCache, animatableAttributes, animationTargetRegisters, uvSource, uvTarget) {
        //Updates the amount of used register indices.
        this.numUsedVertexConstants = registerCache.numUsedVertexConstants;
        this.numUsedFragmentConstants = registerCache.numUsedFragmentConstants;
        this.numUsedStreams = registerCache.numUsedStreams;
        this.numUsedTextures = registerCache.numUsedTextures;
        this.numUsedVaryings = registerCache.numUsedVaryings;
        this.numUsedFragmentConstants = registerCache.numUsedFragmentConstants;
        this.animatableAttributes = animatableAttributes;
        this.animationTargetRegisters = animationTargetRegisters;
        this.uvSource = uvSource;
        this.uvTarget = uvTarget;
        this.vertexConstantData.length = this.numUsedVertexConstants * 4;
        this.fragmentConstantData.length = this.numUsedFragmentConstants * 4;
        //Initializes commonly required constant values.
        this.fragmentConstantData[this.commonsDataIndex] = .5;
        this.fragmentConstantData[this.commonsDataIndex + 1] = 0;
        this.fragmentConstantData[this.commonsDataIndex + 2] = 1 / 255;
        this.fragmentConstantData[this.commonsDataIndex + 3] = 1;
        //Initializes the default UV transformation matrix.
        if (this.uvTransformIndex >= 0) {
            this.vertexConstantData[this.uvTransformIndex] = 1;
            this.vertexConstantData[this.uvTransformIndex + 1] = 0;
            this.vertexConstantData[this.uvTransformIndex + 2] = 0;
            this.vertexConstantData[this.uvTransformIndex + 3] = 0;
            this.vertexConstantData[this.uvTransformIndex + 4] = 0;
            this.vertexConstantData[this.uvTransformIndex + 5] = 1;
            this.vertexConstantData[this.uvTransformIndex + 6] = 0;
            this.vertexConstantData[this.uvTransformIndex + 7] = 0;
        }
        if (this.cameraPositionIndex >= 0)
            this.vertexConstantData[this.cameraPositionIndex + 3] = 1;
    };
    /**
     * @inheritDoc
     */
    ShaderObjectBase.prototype.iActivate = function (stage, camera) {
        stage.context.setCulling(this.useBothSides ? ContextGLTriangleFace.NONE : this._defaultCulling, camera.projection.coordinateSystem);
        if (!this.usesTangentSpace && this.cameraPositionIndex >= 0) {
            var pos = camera.scenePosition;
            this.vertexConstantData[this.cameraPositionIndex] = pos.x;
            this.vertexConstantData[this.cameraPositionIndex + 1] = pos.y;
            this.vertexConstantData[this.cameraPositionIndex + 2] = pos.z;
        }
    };
    /**
     * @inheritDoc
     */
    ShaderObjectBase.prototype.iDeactivate = function (stage) {
    };
    /**
     *
     *
     * @param renderable
     * @param stage
     * @param camera
     */
    ShaderObjectBase.prototype.setRenderState = function (renderable, stage, camera, viewProjection) {
        var context = stage.context;
        if (renderable.materialOwner.animator)
            renderable.materialOwner.animator.setRenderState(this, renderable, stage, camera, this.numUsedVertexConstants, this.numUsedStreams);
        if (this.uvBufferIndex >= 0)
            context.activateBuffer(this.uvBufferIndex, renderable.getVertexData(TriangleSubGeometry.UV_DATA), renderable.getVertexOffset(TriangleSubGeometry.UV_DATA), TriangleSubGeometry.UV_FORMAT);
        if (this.secondaryUVBufferIndex >= 0)
            context.activateBuffer(this.secondaryUVBufferIndex, renderable.getVertexData(TriangleSubGeometry.SECONDARY_UV_DATA), renderable.getVertexOffset(TriangleSubGeometry.SECONDARY_UV_DATA), TriangleSubGeometry.SECONDARY_UV_FORMAT);
        if (this.normalBufferIndex >= 0)
            context.activateBuffer(this.normalBufferIndex, renderable.getVertexData(TriangleSubGeometry.NORMAL_DATA), renderable.getVertexOffset(TriangleSubGeometry.NORMAL_DATA), TriangleSubGeometry.NORMAL_FORMAT);
        if (this.tangentBufferIndex >= 0)
            context.activateBuffer(this.tangentBufferIndex, renderable.getVertexData(TriangleSubGeometry.TANGENT_DATA), renderable.getVertexOffset(TriangleSubGeometry.TANGENT_DATA), TriangleSubGeometry.TANGENT_FORMAT);
        if (this.usesUVTransform) {
            var uvTransform = renderable.materialOwner.uvTransform.matrix;
            if (uvTransform) {
                this.vertexConstantData[this.uvTransformIndex] = uvTransform.a;
                this.vertexConstantData[this.uvTransformIndex + 1] = uvTransform.b;
                this.vertexConstantData[this.uvTransformIndex + 3] = uvTransform.tx;
                this.vertexConstantData[this.uvTransformIndex + 4] = uvTransform.c;
                this.vertexConstantData[this.uvTransformIndex + 5] = uvTransform.d;
                this.vertexConstantData[this.uvTransformIndex + 7] = uvTransform.ty;
            }
            else {
                this.vertexConstantData[this.uvTransformIndex] = 1;
                this.vertexConstantData[this.uvTransformIndex + 1] = 0;
                this.vertexConstantData[this.uvTransformIndex + 3] = 0;
                this.vertexConstantData[this.uvTransformIndex + 4] = 0;
                this.vertexConstantData[this.uvTransformIndex + 5] = 1;
                this.vertexConstantData[this.uvTransformIndex + 7] = 0;
            }
        }
        if (this.sceneNormalMatrixIndex >= 0)
            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this.vertexConstantData, this.sceneNormalMatrixIndex, false);
        if (this.usesTangentSpace && this.cameraPositionIndex >= 0) {
            renderable.sourceEntity.inverseSceneTransform.copyRawDataTo(this._pInverseSceneMatrix);
            var pos = camera.scenePosition;
            var x = pos.x;
            var y = pos.y;
            var z = pos.z;
            this.vertexConstantData[this.cameraPositionIndex] = this._pInverseSceneMatrix[0] * x + this._pInverseSceneMatrix[4] * y + this._pInverseSceneMatrix[8] * z + this._pInverseSceneMatrix[12];
            this.vertexConstantData[this.cameraPositionIndex + 1] = this._pInverseSceneMatrix[1] * x + this._pInverseSceneMatrix[5] * y + this._pInverseSceneMatrix[9] * z + this._pInverseSceneMatrix[13];
            this.vertexConstantData[this.cameraPositionIndex + 2] = this._pInverseSceneMatrix[2] * x + this._pInverseSceneMatrix[6] * y + this._pInverseSceneMatrix[10] * z + this._pInverseSceneMatrix[14];
        }
    };
    ShaderObjectBase.prototype.dispose = function () {
        //TODO uncount associated program data
    };
    return ShaderObjectBase;
})();
module.exports = ShaderObjectBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vc2hhZGVyb2JqZWN0YmFzZS50cyJdLCJuYW1lcyI6WyJTaGFkZXJPYmplY3RCYXNlIiwiU2hhZGVyT2JqZWN0QmFzZS5jb25zdHJ1Y3RvciIsIlNoYWRlck9iamVjdEJhc2UuY3JlYXRlQ29tcGlsZXIiLCJTaGFkZXJPYmplY3RCYXNlLnJlc2V0IiwiU2hhZGVyT2JqZWN0QmFzZS5hZGRXb3JsZFNwYWNlRGVwZW5kZW5jaWVzIiwiU2hhZGVyT2JqZWN0QmFzZS5wSW5pdFJlZ2lzdGVySW5kaWNlcyIsIlNoYWRlck9iamVjdEJhc2UuaW5pdENvbnN0YW50RGF0YSIsIlNoYWRlck9iamVjdEJhc2UuaUFjdGl2YXRlIiwiU2hhZGVyT2JqZWN0QmFzZS5pRGVhY3RpdmF0ZSIsIlNoYWRlck9iamVjdEJhc2Uuc2V0UmVuZGVyU3RhdGUiLCJTaGFkZXJPYmplY3RCYXNlLmRpc3Bvc2UiXSwibWFwcGluZ3MiOiJBQU9BLElBQU8sbUJBQW1CLFdBQWEsNkNBQTZDLENBQUMsQ0FBQztBQVN0RixJQUFPLHFCQUFxQixXQUFZLHVEQUF1RCxDQUFDLENBQUM7QUFFakcsSUFBTyxrQkFBa0IsV0FBYSw2REFBNkQsQ0FBQyxDQUFDO0FBSXJHLEFBUUE7Ozs7Ozs7R0FERztJQUNHLGdCQUFnQjtJQWtMckJBOztPQUVHQTtJQUNIQSxTQXJMS0EsZ0JBQWdCQSxDQXFMVEEsT0FBT0E7UUFsTFhDLG9CQUFlQSxHQUFVQSxxQkFBcUJBLENBQUNBLElBQUlBLENBQUNBO1FBRXJEQSx5QkFBb0JBLEdBQWlCQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtRQStDaEVBLCtCQUErQkE7UUFDeEJBLGFBQVFBLEdBQVVBLElBQUlBLENBQUNBO1FBQ3ZCQSxhQUFRQSxHQUFVQSxJQUFJQSxDQUFDQTtRQUN2QkEsYUFBUUEsR0FBVUEsSUFBSUEsQ0FBQ0E7UUFpRTlCQTs7V0FFR0E7UUFDSUEsMEJBQXFCQSxHQUFXQSxL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R0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFFekRBLEFBQ0FBLG1EQURtREE7UUFDbkRBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDaENBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNuREEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3ZEQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFDdkRBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3hEQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLElBQUlBLENBQUNB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Z0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBO2dCQUNwRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLENBQUNBLENBQUNBO2dCQUNuRUEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBO1lBQ3JFQSxDQUFDQTtZQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtnQkFDUEEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUNuREEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO2dCQUN2REEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBO1lBQ3hEQSxDQUFDQTtRQUNGQSxDQUFDQTtRQUVEQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxzQkFBc0JBLElBQUlBLENBQUNBLENBQUNBO1lBQ3BDQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxxQkFBcUJBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLGtCQUFrQkEsRUFBRUEsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxLQUFLQSxDQUFDQSxDQUFDQTtRQUUxSEEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxJQUFJQSxJQUFJQSxDQUFDQSxtQkFBbUJBLElBQUlBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRTVEQSxVQUFVQSxDQUFDQSxZQUFZQSxDQUFDQSxxQkFBcUJBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0E7WUFDdkZBLElBQUlBLEdBQUdBLEdBQVlBLE1BQU1BLENBQUNBLGFBQWFBLENBQUNBO1lBQ3hDQSxJQUFJQSxDQUFDQSxHQUFVQSxHQUFHQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNyQkEsSUFBSUEsQ0FBQ0EsR0FBVUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLEdBQVVBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1lBRXJCQSxJQUFJQSxDQUFDQSxrQkFBa0JBLENBQUNBLElBQUlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtZQUNyTEEsSUFBSUEsQ0FBQ0Esa0JBQWtCQSxDQUFDQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7WUFDekxBLElBQUlBLENBQUNBLGtCQUFrQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBLENBQUNBLEdBQUNBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQzNMQSxDQUFDQTtJQUNGQSxDQUFDQTtJQUVNVCxrQ0FBT0EsR0FBZEE7UUFFQ1Usc0NBQXNDQTtJQUN2Q0EsQ0FBQ0E7SUFDRlYsdUJBQUNBO0FBQURBLENBdlhBLEFBdVhDQSxJQUFBO0FBRUQsQUFBMEIsaUJBQWpCLGdCQUFnQixDQUFDIiwiZmlsZSI6Im1hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJPYmplY3RCYXNlLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNYXRyaXhcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXhcIik7XG5pbXBvcnQgTWF0cml4M0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFwiKTtcbmltcG9ydCBNYXRyaXgzRFV0aWxzXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9NYXRyaXgzRFV0aWxzXCIpO1xuaW1wb3J0IFJlY3RhbmdsZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9SZWN0YW5nbGVcIik7XG5pbXBvcnQgVmVjdG9yM0RcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZ2VvbS9WZWN0b3IzRFwiKTtcbmltcG9ydCBUZXh0dXJlMkRCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvdGV4dHVyZXMvVGV4dHVyZTJEQmFzZVwiKTtcblxuaW1wb3J0IFRyaWFuZ2xlU3ViR2VvbWV0cnlcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IENhbWVyYVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9DYW1lcmFcIik7XG5cbmltcG9ydCBTdGFnZVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL2Jhc2UvU3RhZ2VcIik7XG5pbXBvcnQgQW5pbWF0aW9uU2V0QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2FuaW1hdG9ycy9BbmltYXRpb25TZXRCYXNlXCIpO1xuaW1wb3J0IEFuaW1hdG9yQmFzZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvYW5pbWF0b3JzL0FuaW1hdG9yQmFzZVwiKTtcbmltcG9ydCBBbmltYXRpb25SZWdpc3RlckNhY2hlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hbmltYXRvcnMvZGF0YS9BbmltYXRpb25SZWdpc3RlckNhY2hlXCIpO1xuaW1wb3J0IFJlbmRlcmFibGVCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9wb29sL1JlbmRlcmFibGVCYXNlXCIpO1xuaW1wb3J0IElDb250ZXh0U3RhZ2VHTFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JQ29udGV4dFN0YWdlR0xcIik7XG5pbXBvcnQgQ29udGV4dEdMVHJpYW5nbGVGYWNlXHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvQ29udGV4dEdMVHJpYW5nbGVGYWNlXCIpO1xuaW1wb3J0IFN0YWdlR0xNYXRlcmlhbEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL1N0YWdlR0xNYXRlcmlhbEJhc2VcIik7XG5pbXBvcnQgU2hhZGVyQ29tcGlsZXJCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9jb21waWxhdGlvbi9TaGFkZXJDb21waWxlckJhc2VcIik7XG5pbXBvcnQgU2hhZGVyUmVnaXN0ZXJDYWNoZVx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vU2hhZGVyUmVnaXN0ZXJDYWNoZVwiKTtcbmltcG9ydCBJTWF0ZXJpYWxQYXNzU3RhZ2VHTFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvcGFzc2VzL0lNYXRlcmlhbFBhc3NTdGFnZUdMXCIpO1xuXG4vKipcbiAqIFNoYWRlck9iamVjdEJhc2Uga2VlcHMgdHJhY2sgb2YgdGhlIG51bWJlciBvZiBkZXBlbmRlbmNpZXMgZm9yIFwibmFtZWQgcmVnaXN0ZXJzXCIgdXNlZCBhY3Jvc3MgYSBwYXNzLlxuICogTmFtZWQgcmVnaXN0ZXJzIGFyZSB0aGF0IGFyZSBub3QgbmVjZXNzYXJpbHkgbGltaXRlZCB0byBhIHNpbmdsZSBtZXRob2QuIFRoZXkgYXJlIGNyZWF0ZWQgYnkgdGhlIGNvbXBpbGVyIGFuZFxuICogcGFzc2VkIG9uIHRvIG1ldGhvZHMuIFRoZSBjb21waWxlciB1c2VzIHRoZSByZXN1bHRzIHRvIHJlc2VydmUgdXNhZ2VzIHRocm91Z2ggUmVnaXN0ZXJQb29sLCB3aGljaCBjYW4gYmUgcmVtb3ZlZFxuICogZWFjaCB0aW1lIGEgbWV0aG9kIGhhcyBiZWVuIGNvbXBpbGVkIGludG8gdGhlIHNoYWRlci5cbiAqXG4gKiBAc2VlIFJlZ2lzdGVyUG9vbC5hZGRVc2FnZVxuICovXG5jbGFzcyBTaGFkZXJPYmplY3RCYXNlXG57XG5cblx0cHJpdmF0ZSBfZGVmYXVsdEN1bGxpbmc6c3RyaW5nID0gQ29udGV4dEdMVHJpYW5nbGVGYWNlLkJBQ0s7XG5cblx0cHVibGljIF9wSW52ZXJzZVNjZW5lTWF0cml4OkFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXG5cdHB1YmxpYyBhbmltYXRpb25SZWdpc3RlckNhY2hlOkFuaW1hdGlvblJlZ2lzdGVyQ2FjaGU7XG5cblx0cHVibGljIHByb2ZpbGU6c3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIHVzZWQgdmVydGV4IGNvbnN0YW50cyBpbiB0aGUgdmVydGV4IGNvZGUuIFVzZWQgYnkgdGhlIGFuaW1hdGlvbiBjb2RlIGdlbmVyYXRpb24gdG8ga25vdyBmcm9tIHdoaWNoIGluZGV4IG9uIHJlZ2lzdGVycyBhcmUgYXZhaWxhYmxlLlxuXHQgKi9cblx0cHVibGljIG51bVVzZWRWZXJ0ZXhDb25zdGFudHM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIHVzZWQgZnJhZ21lbnQgY29uc3RhbnRzIGluIHRoZSBmcmFnbWVudCBjb2RlLiBVc2VkIGJ5IHRoZSBhbmltYXRpb24gY29kZSBnZW5lcmF0aW9uIHRvIGtub3cgZnJvbSB3aGljaCBpbmRleCBvbiByZWdpc3RlcnMgYXJlIGF2YWlsYWJsZS5cblx0ICovXG5cdHB1YmxpYyBudW1Vc2VkRnJhZ21lbnRDb25zdGFudHM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIHVzZWQgdmVydGV4IHN0cmVhbXMgaW4gdGhlIHZlcnRleCBjb2RlLiBVc2VkIGJ5IHRoZSBhbmltYXRpb24gY29kZSBnZW5lcmF0aW9uIHRvIGtub3cgZnJvbSB3aGljaCBpbmRleCBvbiBzdHJlYW1zIGFyZSBhdmFpbGFibGUuXG5cdCAqL1xuXHRwdWJsaWMgbnVtVXNlZFN0cmVhbXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIG51bVVzZWRUZXh0dXJlczpudW1iZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgbnVtVXNlZFZhcnlpbmdzOm51bWJlcjtcblxuXHRwdWJsaWMgYW5pbWF0YWJsZUF0dHJpYnV0ZXM6QXJyYXk8c3RyaW5nPjtcblx0cHVibGljIGFuaW1hdGlvblRhcmdldFJlZ2lzdGVyczpBcnJheTxzdHJpbmc+O1xuXHRwdWJsaWMgdXZTb3VyY2U6c3RyaW5nO1xuXHRwdWJsaWMgdXZUYXJnZXQ6c3RyaW5nO1xuXG5cdHB1YmxpYyB1c2VBbHBoYVByZW11bHRpcGxpZWQ6Ym9vbGVhbjtcblx0cHVibGljIHVzZUJvdGhTaWRlczpib29sZWFuO1xuXHRwdWJsaWMgdXNlTWlwbWFwcGluZzpib29sZWFuO1xuXHRwdWJsaWMgdXNlU21vb3RoVGV4dHVyZXM6Ym9vbGVhbjtcblx0cHVibGljIHJlcGVhdFRleHR1cmVzOmJvb2xlYW47XG5cdHB1YmxpYyB1c2VzVVZUcmFuc2Zvcm06Ym9vbGVhbjtcblx0cHVibGljIGFscGhhVGhyZXNob2xkOm51bWJlcjtcblx0cHVibGljIHRleHR1cmU6VGV4dHVyZTJEQmFzZTtcblx0cHVibGljIGNvbG9yOm51bWJlcjtcblxuXG5cdC8vc2V0IGFtYmllbnQgdmFsdWVzIHRvIGRlZmF1bHRcblx0cHVibGljIGFtYmllbnRSOm51bWJlciA9IDB4RkY7XG5cdHB1YmxpYyBhbWJpZW50RzpudW1iZXIgPSAweEZGO1xuXHRwdWJsaWMgYW1iaWVudEI6bnVtYmVyID0gMHhGRjtcblxuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHBhc3MgcmVxdWlyZXMgYW55IGZyYWdtZW50IGFuaW1hdGlvbiBjb2RlLlxuXHQgKi9cblx0cHVibGljIHVzZXNGcmFnbWVudEFuaW1hdGlvbjpib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgcHJvamVjdGVkIHBvc2l0aW9uLlxuXHQgKi9cblx0cHVibGljIHByb2plY3Rpb25EZXBlbmRlbmNpZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgbm9ybWFsIHZlY3Rvci5cblx0ICovXG5cdHB1YmxpYyBub3JtYWxEZXBlbmRlbmNpZXM6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgYW1vdW50IG9mIGRlcGVuZGVuY2llcyBvbiB0aGUgdmlldyBkaXJlY3Rpb24uXG5cdCAqL1xuXHRwdWJsaWMgdmlld0RpckRlcGVuZGVuY2llczpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBwcmltYXJ5IFVWIGNvb3JkaW5hdGVzLlxuXHQgKi9cblx0cHVibGljIHV2RGVwZW5kZW5jaWVzOm51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiBkZXBlbmRlbmNpZXMgb24gdGhlIHNlY29uZGFyeSBVViBjb29yZGluYXRlcy5cblx0ICovXG5cdHB1YmxpYyBzZWNvbmRhcnlVVkRlcGVuZGVuY2llczpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBsb2NhbCBwb3NpdGlvbi4gVGhpcyBjYW4gYmUgMCB3aGlsZSBoYXNHbG9iYWxQb3NEZXBlbmRlbmNpZXMgaXMgdHJ1ZSB3aGVuXG5cdCAqIHRoZSBnbG9iYWwgcG9zaXRpb24gaXMgdXNlZCBhcyBhIHRlbXBvcmFyeSB2YWx1ZSAoZmUgdG8gY2FsY3VsYXRlIHRoZSB2aWV3IGRpcmVjdGlvbilcblx0ICovXG5cdHB1YmxpYyBsb2NhbFBvc0RlcGVuZGVuY2llczpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBhbW91bnQgb2YgZGVwZW5kZW5jaWVzIG9uIHRoZSBnbG9iYWwgcG9zaXRpb24uIFRoaXMgY2FuIGJlIDAgd2hpbGUgaGFzR2xvYmFsUG9zRGVwZW5kZW5jaWVzIGlzIHRydWUgd2hlblxuXHQgKiB0aGUgZ2xvYmFsIHBvc2l0aW9uIGlzIHVzZWQgYXMgYSB0ZW1wb3JhcnkgdmFsdWUgKGZlIHRvIGNhbGN1bGF0ZSB0aGUgdmlldyBkaXJlY3Rpb24pXG5cdCAqL1xuXHRwdWJsaWMgZ2xvYmFsUG9zRGVwZW5kZW5jaWVzOm51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGFtb3VudCBvZiB0YW5nZW50IHZlY3RvciBkZXBlbmRlbmNpZXMgKGZyYWdtZW50IHNoYWRlcikuXG5cdCAqL1xuXHRwdWJsaWMgdGFuZ2VudERlcGVuZGVuY2llczpudW1iZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgb3V0cHV0c05vcm1hbHM6Ym9vbGVhbjtcblxuXHQvKipcblx0ICogSW5kaWNhdGVzIHdoZXRoZXIgb3Igbm90IG5vcm1hbCBjYWxjdWxhdGlvbnMgYXJlIGV4cGVjdGVkIGluIHRhbmdlbnQgc3BhY2UuIFRoaXMgaXMgb25seSB0aGUgY2FzZSBpZiBubyB3b3JsZC1zcGFjZVxuXHQgKiBkZXBlbmRlbmNpZXMgZXhpc3QuXG5cdCAqL1xuXHRwdWJsaWMgdXNlc1RhbmdlbnRTcGFjZTpib29sZWFuO1xuXG5cdC8qKlxuXHQgKiBJbmRpY2F0ZXMgd2hldGhlciBvciBub3Qgbm9ybWFsIGNhbGN1bGF0aW9ucyBhcmUgb3V0cHV0IGluIHRhbmdlbnQgc3BhY2UuXG5cdCAqL1xuXHRwdWJsaWMgb3V0cHV0c1RhbmdlbnROb3JtYWxzOmJvb2xlYW47XG5cblx0LyoqXG5cdCAqIEluZGljYXRlcyB3aGV0aGVyIHRoZXJlIGFyZSBhbnkgZGVwZW5kZW5jaWVzIG9uIHRoZSB3b3JsZC1zcGFjZSBwb3NpdGlvbiB2ZWN0b3IuXG5cdCAqL1xuXHRwdWJsaWMgdXNlc0dsb2JhbFBvc0ZyYWdtZW50OmJvb2xlYW4gPSBmYWxzZTtcblxuXHRwdWJsaWMgdmVydGV4Q29uc3RhbnREYXRhOkFycmF5PG51bWJlcj4gPSBuZXcgQXJyYXk8bnVtYmVyPigpO1xuXHRwdWJsaWMgZnJhZ21lbnRDb25zdGFudERhdGE6QXJyYXk8bnVtYmVyPiA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBmb3IgdGhlIGNvbW1vbiBkYXRhIHJlZ2lzdGVyLlxuXHQgKi9cblx0cHVibGljIGNvbW1vbnNEYXRhSW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggZm9yIHRoZSBVViB2ZXJ0ZXggYXR0cmlidXRlIHN0cmVhbS5cblx0ICovXG5cdHB1YmxpYyB1dkJ1ZmZlckluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGluZGV4IGZvciB0aGUgc2Vjb25kYXJ5IFVWIHZlcnRleCBhdHRyaWJ1dGUgc3RyZWFtLlxuXHQgKi9cblx0cHVibGljIHNlY29uZGFyeVVWQnVmZmVySW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggZm9yIHRoZSB2ZXJ0ZXggbm9ybWFsIGF0dHJpYnV0ZSBzdHJlYW0uXG5cdCAqL1xuXHRwdWJsaWMgbm9ybWFsQnVmZmVySW5kZXg6bnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBUaGUgaW5kZXggZm9yIHRoZSB2ZXJ0ZXggdGFuZ2VudCBhdHRyaWJ1dGUgc3RyZWFtLlxuXHQgKi9cblx0cHVibGljIHRhbmdlbnRCdWZmZXJJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgdmVydGV4IGNvbnN0YW50IGNvbnRhaW5pbmcgdGhlIHZpZXcgbWF0cml4LlxuXHQgKi9cblx0cHVibGljIHZpZXdNYXRyaXhJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgdmVydGV4IGNvbnN0YW50IGNvbnRhaW5pbmcgdGhlIHNjZW5lIG1hdHJpeC5cblx0ICovXG5cdHB1YmxpYyBzY2VuZU1hdHJpeEluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGluZGV4IG9mIHRoZSB2ZXJ0ZXggY29uc3RhbnQgY29udGFpbmluZyB0aGUgdW5pZm9ybSBzY2VuZSBtYXRyaXggKHRoZSBpbnZlcnNlIHRyYW5zcG9zZSkuXG5cdCAqL1xuXHRwdWJsaWMgc2NlbmVOb3JtYWxNYXRyaXhJbmRleDpudW1iZXI7XG5cblx0LyoqXG5cdCAqIFRoZSBpbmRleCBvZiB0aGUgdmVydGV4IGNvbnN0YW50IGNvbnRhaW5pbmcgdGhlIGNhbWVyYSBwb3NpdGlvbi5cblx0ICovXG5cdHB1YmxpYyBjYW1lcmFQb3NpdGlvbkluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogVGhlIGluZGV4IGZvciB0aGUgVVYgdHJhbnNmb3JtYXRpb24gbWF0cml4IHZlcnRleCBjb25zdGFudC5cblx0ICovXG5cdHB1YmxpYyB1dlRyYW5zZm9ybUluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBNZXRob2RDb21waWxlclZPIG9iamVjdC5cblx0ICovXG5cdGNvbnN0cnVjdG9yKHByb2ZpbGUpXG5cdHtcblx0XHR0aGlzLnByb2ZpbGUgPSBwcm9maWxlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZhY3RvcnkgbWV0aG9kIHRvIGNyZWF0ZSBhIGNvbmNyZXRlIGNvbXBpbGVyIG9iamVjdCBmb3IgdGhpcyBvYmplY3Rcblx0ICpcblx0ICogQHBhcmFtIG1hdGVyaWFsUGFzc1ZPXG5cdCAqIEByZXR1cm5zIHthd2F5Lm1hdGVyaWFscy5TaGFkZXJDb21waWxlckJhc2V9XG5cdCAqL1xuXHRwdWJsaWMgY3JlYXRlQ29tcGlsZXIobWF0ZXJpYWw6U3RhZ2VHTE1hdGVyaWFsQmFzZSwgbWF0ZXJpYWxQYXNzOklNYXRlcmlhbFBhc3NTdGFnZUdMKTpTaGFkZXJDb21waWxlckJhc2Vcblx0e1xuXHRcdHJldHVybiBuZXcgU2hhZGVyQ29tcGlsZXJCYXNlKG1hdGVyaWFsLCBtYXRlcmlhbFBhc3MsIHRoaXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIENsZWFycyBkZXBlbmRlbmN5IGNvdW50cyBmb3IgYWxsIHJlZ2lzdGVycy4gQ2FsbGVkIHdoZW4gcmVjb21waWxpbmcgYSBwYXNzLlxuXHQgKi9cblx0cHVibGljIHJlc2V0KClcblx0e1xuXHRcdHRoaXMucHJvamVjdGlvbkRlcGVuZGVuY2llcyA9IDA7XG5cdFx0dGhpcy5ub3JtYWxEZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMudmlld0RpckRlcGVuZGVuY2llcyA9IDA7XG5cdFx0dGhpcy51dkRlcGVuZGVuY2llcyA9IDA7XG5cdFx0dGhpcy5zZWNvbmRhcnlVVkRlcGVuZGVuY2llcyA9IDA7XG5cdFx0dGhpcy5nbG9iYWxQb3NEZXBlbmRlbmNpZXMgPSAwO1xuXHRcdHRoaXMudGFuZ2VudERlcGVuZGVuY2llcyA9IDA7XG5cdFx0dGhpcy51c2VzR2xvYmFsUG9zRnJhZ21lbnQgPSBmYWxzZTtcblx0XHR0aGlzLnVzZXNGcmFnbWVudEFuaW1hdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMudXNlc1RhbmdlbnRTcGFjZSA9IGZhbHNlO1xuXHRcdHRoaXMub3V0cHV0c05vcm1hbHMgPSBmYWxzZTtcblx0XHR0aGlzLm91dHB1dHNUYW5nZW50Tm9ybWFscyA9IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEFkZHMgYW55IGV4dGVybmFsIHdvcmxkIHNwYWNlIGRlcGVuZGVuY2llcywgdXNlZCB0byBmb3JjZSB3b3JsZCBzcGFjZSBjYWxjdWxhdGlvbnMuXG5cdCAqL1xuXHRwdWJsaWMgYWRkV29ybGRTcGFjZURlcGVuZGVuY2llcyhmcmFnbWVudExpZ2h0czpib29sZWFuKVxuXHR7XG5cdFx0aWYgKHRoaXMudmlld0RpckRlcGVuZGVuY2llcyA+IDApXG5cdFx0XHQrK3RoaXMuZ2xvYmFsUG9zRGVwZW5kZW5jaWVzO1xuXHR9XG5cblx0cHVibGljIHBJbml0UmVnaXN0ZXJJbmRpY2VzKClcblx0e1xuXHRcdHRoaXMuY29tbW9uc0RhdGFJbmRleCA9IC0xO1xuXHRcdHRoaXMuY2FtZXJhUG9zaXRpb25JbmRleCA9IC0xO1xuXHRcdHRoaXMudXZCdWZmZXJJbmRleCA9IC0xO1xuXHRcdHRoaXMudXZUcmFuc2Zvcm1JbmRleCA9IC0xO1xuXHRcdHRoaXMuc2Vjb25kYXJ5VVZCdWZmZXJJbmRleCA9IC0xO1xuXHRcdHRoaXMubm9ybWFsQnVmZmVySW5kZXggPSAtMTtcblx0XHR0aGlzLnRhbmdlbnRCdWZmZXJJbmRleCA9IC0xO1xuXHRcdHRoaXMuc2NlbmVNYXRyaXhJbmRleCA9IC0xO1xuXHRcdHRoaXMuc2NlbmVOb3JtYWxNYXRyaXhJbmRleCA9IC0xO1xuXHR9XG5cblx0LyoqXG5cdCAqIEluaXRpYWxpemVzIHRoZSB1bmNoYW5naW5nIGNvbnN0YW50IGRhdGEgZm9yIHRoaXMgc2hhZGVyIG9iamVjdC5cblx0ICovXG5cdHB1YmxpYyBpbml0Q29uc3RhbnREYXRhKHJlZ2lzdGVyQ2FjaGU6U2hhZGVyUmVnaXN0ZXJDYWNoZSwgYW5pbWF0YWJsZUF0dHJpYnV0ZXM6QXJyYXk8c3RyaW5nPiwgYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzOkFycmF5PHN0cmluZz4sIHV2U291cmNlOnN0cmluZywgdXZUYXJnZXQ6c3RyaW5nKVxuXHR7XG5cdFx0Ly9VcGRhdGVzIHRoZSBhbW91bnQgb2YgdXNlZCByZWdpc3RlciBpbmRpY2VzLlxuXHRcdHRoaXMubnVtVXNlZFZlcnRleENvbnN0YW50cyA9IHJlZ2lzdGVyQ2FjaGUubnVtVXNlZFZlcnRleENvbnN0YW50cztcblx0XHR0aGlzLm51bVVzZWRGcmFnbWVudENvbnN0YW50cyA9IHJlZ2lzdGVyQ2FjaGUubnVtVXNlZEZyYWdtZW50Q29uc3RhbnRzO1xuXHRcdHRoaXMubnVtVXNlZFN0cmVhbXMgPSByZWdpc3RlckNhY2hlLm51bVVzZWRTdHJlYW1zO1xuXHRcdHRoaXMubnVtVXNlZFRleHR1cmVzID0gcmVnaXN0ZXJDYWNoZS5udW1Vc2VkVGV4dHVyZXM7XG5cdFx0dGhpcy5udW1Vc2VkVmFyeWluZ3MgPSByZWdpc3RlckNhY2hlLm51bVVzZWRWYXJ5aW5ncztcblx0XHR0aGlzLm51bVVzZWRGcmFnbWVudENvbnN0YW50cyA9IHJlZ2lzdGVyQ2FjaGUubnVtVXNlZEZyYWdtZW50Q29uc3RhbnRzO1xuXG5cdFx0dGhpcy5hbmltYXRhYmxlQXR0cmlidXRlcyA9IGFuaW1hdGFibGVBdHRyaWJ1dGVzO1xuXHRcdHRoaXMuYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzID0gYW5pbWF0aW9uVGFyZ2V0UmVnaXN0ZXJzO1xuXHRcdHRoaXMudXZTb3VyY2UgPSB1dlNvdXJjZTtcblx0XHR0aGlzLnV2VGFyZ2V0ID0gdXZUYXJnZXQ7XG5cblx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YS5sZW5ndGggPSB0aGlzLm51bVVzZWRWZXJ0ZXhDb25zdGFudHMqNDtcblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnREYXRhLmxlbmd0aCA9IHRoaXMubnVtVXNlZEZyYWdtZW50Q29uc3RhbnRzKjQ7XG5cblx0XHQvL0luaXRpYWxpemVzIGNvbW1vbmx5IHJlcXVpcmVkIGNvbnN0YW50IHZhbHVlcy5cblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnREYXRhW3RoaXMuY29tbW9uc0RhdGFJbmRleF0gPSAuNTtcblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnREYXRhW3RoaXMuY29tbW9uc0RhdGFJbmRleCArIDFdID0gMDtcblx0XHR0aGlzLmZyYWdtZW50Q29uc3RhbnREYXRhW3RoaXMuY29tbW9uc0RhdGFJbmRleCArIDJdID0gMS8yNTU7XG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50RGF0YVt0aGlzLmNvbW1vbnNEYXRhSW5kZXggKyAzXSA9IDE7XG5cblx0XHQvL0luaXRpYWxpemVzIHRoZSBkZWZhdWx0IFVWIHRyYW5zZm9ybWF0aW9uIG1hdHJpeC5cblx0XHRpZiAodGhpcy51dlRyYW5zZm9ybUluZGV4ID49IDApIHtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleF0gPSAxO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgMV0gPSAwO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgMl0gPSAwO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgM10gPSAwO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgNF0gPSAwO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgNV0gPSAxO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgNl0gPSAwO1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgN10gPSAwO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggPj0gMClcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleCArIDNdID0gMTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgaUFjdGl2YXRlKHN0YWdlOlN0YWdlLCBjYW1lcmE6Q2FtZXJhKVxuXHR7XG5cdFx0KDxJQ29udGV4dFN0YWdlR0w+IHN0YWdlLmNvbnRleHQpLnNldEN1bGxpbmcodGhpcy51c2VCb3RoU2lkZXM/IENvbnRleHRHTFRyaWFuZ2xlRmFjZS5OT05FIDogdGhpcy5fZGVmYXVsdEN1bGxpbmcsIGNhbWVyYS5wcm9qZWN0aW9uLmNvb3JkaW5hdGVTeXN0ZW0pO1xuXG5cdFx0aWYgKCF0aGlzLnVzZXNUYW5nZW50U3BhY2UgJiYgdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ID49IDApIHtcblx0XHRcdHZhciBwb3M6VmVjdG9yM0QgPSBjYW1lcmEuc2NlbmVQb3NpdGlvbjtcblxuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4XSA9IHBvcy54O1xuXHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ICsgMV0gPSBwb3MueTtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleCArIDJdID0gcG9zLno7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEBpbmhlcml0RG9jXG5cdCAqL1xuXHRwdWJsaWMgaURlYWN0aXZhdGUoc3RhZ2U6U3RhZ2UpXG5cdHtcblxuXHR9XG5cblxuXHQvKipcblx0ICpcblx0ICpcblx0ICogQHBhcmFtIHJlbmRlcmFibGVcblx0ICogQHBhcmFtIHN0YWdlXG5cdCAqIEBwYXJhbSBjYW1lcmFcblx0ICovXG5cdHB1YmxpYyBzZXRSZW5kZXJTdGF0ZShyZW5kZXJhYmxlOlJlbmRlcmFibGVCYXNlLCBzdGFnZTpTdGFnZSwgY2FtZXJhOkNhbWVyYSwgdmlld1Byb2plY3Rpb246TWF0cml4M0QpXG5cdHtcblx0XHR2YXIgY29udGV4dDpJQ29udGV4dFN0YWdlR0wgPSA8SUNvbnRleHRTdGFnZUdMPiBzdGFnZS5jb250ZXh0O1xuXG5cdFx0aWYgKHJlbmRlcmFibGUubWF0ZXJpYWxPd25lci5hbmltYXRvcilcblx0XHRcdCg8QW5pbWF0b3JCYXNlPiByZW5kZXJhYmxlLm1hdGVyaWFsT3duZXIuYW5pbWF0b3IpLnNldFJlbmRlclN0YXRlKHRoaXMsIHJlbmRlcmFibGUsIHN0YWdlLCBjYW1lcmEsIHRoaXMubnVtVXNlZFZlcnRleENvbnN0YW50cywgdGhpcy5udW1Vc2VkU3RyZWFtcyk7XG5cblx0XHRpZiAodGhpcy51dkJ1ZmZlckluZGV4ID49IDApXG5cdFx0XHRjb250ZXh0LmFjdGl2YXRlQnVmZmVyKHRoaXMudXZCdWZmZXJJbmRleCwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSksIHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfREFUQSksIFRyaWFuZ2xlU3ViR2VvbWV0cnkuVVZfRk9STUFUKTtcblxuXHRcdGlmICh0aGlzLnNlY29uZGFyeVVWQnVmZmVySW5kZXggPj0gMClcblx0XHRcdGNvbnRleHQuYWN0aXZhdGVCdWZmZXIodGhpcy5zZWNvbmRhcnlVVkJ1ZmZlckluZGV4LCByZW5kZXJhYmxlLmdldFZlcnRleERhdGEoVHJpYW5nbGVTdWJHZW9tZXRyeS5TRUNPTkRBUllfVVZfREFUQSksIHJlbmRlcmFibGUuZ2V0VmVydGV4T2Zmc2V0KFRyaWFuZ2xlU3ViR2VvbWV0cnkuU0VDT05EQVJZX1VWX0RBVEEpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlNFQ09OREFSWV9VVl9GT1JNQVQpO1xuXG5cdFx0aWYgKHRoaXMubm9ybWFsQnVmZmVySW5kZXggPj0gMClcblx0XHRcdGNvbnRleHQuYWN0aXZhdGVCdWZmZXIodGhpcy5ub3JtYWxCdWZmZXJJbmRleCwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuTk9STUFMX0RBVEEpLCByZW5kZXJhYmxlLmdldFZlcnRleE9mZnNldChUcmlhbmdsZVN1Ykdlb21ldHJ5Lk5PUk1BTF9EQVRBKSwgVHJpYW5nbGVTdWJHZW9tZXRyeS5OT1JNQUxfRk9STUFUKTtcblxuXHRcdGlmICh0aGlzLnRhbmdlbnRCdWZmZXJJbmRleCA+PSAwKVxuXHRcdFx0Y29udGV4dC5hY3RpdmF0ZUJ1ZmZlcih0aGlzLnRhbmdlbnRCdWZmZXJJbmRleCwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhEYXRhKFRyaWFuZ2xlU3ViR2VvbWV0cnkuVEFOR0VOVF9EQVRBKSwgcmVuZGVyYWJsZS5nZXRWZXJ0ZXhPZmZzZXQoVHJpYW5nbGVTdWJHZW9tZXRyeS5UQU5HRU5UX0RBVEEpLCBUcmlhbmdsZVN1Ykdlb21ldHJ5LlRBTkdFTlRfRk9STUFUKTtcblxuXG5cdFx0aWYgKHRoaXMudXNlc1VWVHJhbnNmb3JtKSB7XG5cdFx0XHR2YXIgdXZUcmFuc2Zvcm06TWF0cml4ID0gcmVuZGVyYWJsZS5tYXRlcmlhbE93bmVyLnV2VHJhbnNmb3JtLm1hdHJpeDtcblxuXHRcdFx0aWYgKHV2VHJhbnNmb3JtKSB7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleF0gPSB1dlRyYW5zZm9ybS5hO1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyAxXSA9IHV2VHJhbnNmb3JtLmI7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDNdID0gdXZUcmFuc2Zvcm0udHg7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDRdID0gdXZUcmFuc2Zvcm0uYztcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgNV0gPSB1dlRyYW5zZm9ybS5kO1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA3XSA9IHV2VHJhbnNmb3JtLnR5O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4XSA9IDE7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDFdID0gMDtcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgM10gPSAwO1xuXHRcdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLnV2VHJhbnNmb3JtSW5kZXggKyA0XSA9IDA7XG5cdFx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMudXZUcmFuc2Zvcm1JbmRleCArIDVdID0gMTtcblx0XHRcdFx0dGhpcy52ZXJ0ZXhDb25zdGFudERhdGFbdGhpcy51dlRyYW5zZm9ybUluZGV4ICsgN10gPSAwO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICh0aGlzLnNjZW5lTm9ybWFsTWF0cml4SW5kZXggPj0gMClcblx0XHRcdHJlbmRlcmFibGUuc291cmNlRW50aXR5LmludmVyc2VTY2VuZVRyYW5zZm9ybS5jb3B5UmF3RGF0YVRvKHRoaXMudmVydGV4Q29uc3RhbnREYXRhLCB0aGlzLnNjZW5lTm9ybWFsTWF0cml4SW5kZXgsIGZhbHNlKTtcblxuXHRcdGlmICh0aGlzLnVzZXNUYW5nZW50U3BhY2UgJiYgdGhpcy5jYW1lcmFQb3NpdGlvbkluZGV4ID49IDApIHtcblxuXHRcdFx0cmVuZGVyYWJsZS5zb3VyY2VFbnRpdHkuaW52ZXJzZVNjZW5lVHJhbnNmb3JtLmNvcHlSYXdEYXRhVG8odGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeCk7XG5cdFx0XHR2YXIgcG9zOlZlY3RvcjNEID0gY2FtZXJhLnNjZW5lUG9zaXRpb247XG5cdFx0XHR2YXIgeDpudW1iZXIgPSBwb3MueDtcblx0XHRcdHZhciB5Om51bWJlciA9IHBvcy55O1xuXHRcdFx0dmFyIHo6bnVtYmVyID0gcG9zLno7XG5cblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleF0gPSB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzBdKnggKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzRdKnkgKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzhdKnogKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzEyXTtcblx0XHRcdHRoaXMudmVydGV4Q29uc3RhbnREYXRhW3RoaXMuY2FtZXJhUG9zaXRpb25JbmRleCArIDFdID0gdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFsxXSp4ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFs1XSp5ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFs5XSp6ICsgdGhpcy5fcEludmVyc2VTY2VuZU1hdHJpeFsxM107XG5cdFx0XHR0aGlzLnZlcnRleENvbnN0YW50RGF0YVt0aGlzLmNhbWVyYVBvc2l0aW9uSW5kZXggKyAyXSA9IHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbMl0qeCArIHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbNl0qeSArIHRoaXMuX3BJbnZlcnNlU2NlbmVNYXRyaXhbMTBdKnogKyB0aGlzLl9wSW52ZXJzZVNjZW5lTWF0cml4WzE0XTtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHQvL1RPRE8gdW5jb3VudCBhc3NvY2lhdGVkIHByb2dyYW0gZGF0YVxuXHR9XG59XG5cbmV4cG9ydCA9IFNoYWRlck9iamVjdEJhc2U7Il19