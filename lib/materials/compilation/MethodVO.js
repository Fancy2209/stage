/**
 * MethodVO contains data for a given shader object for the use within a single material.
 * This allows shader methods to be shared across materials while their non-public state differs.
 */
var MethodVO = (function () {
    /**
     * Creates a new MethodVO object.
     */
    function MethodVO(method) {
        this.useMethod = true;
        this.method = method;
    }
    /**
     * Resets the values of the value object to their "unused" state.
     */
    MethodVO.prototype.reset = function () {
        this.method.iReset();
        this.texturesIndex = -1;
        this.vertexConstantsIndex = -1;
        this.fragmentConstantsIndex = -1;
        this.needsProjection = false;
        this.needsView = false;
        this.needsNormals = false;
        this.needsTangents = false;
        this.needsUV = false;
        this.needsSecondaryUV = false;
        this.needsGlobalVertexPos = false;
        this.needsGlobalFragmentPos = false;
    };
    return MethodVO;
})();
module.exports = MethodVO;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9tYXRlcmlhbHMvY29tcGlsYXRpb24vbWV0aG9kdm8udHMiXSwibmFtZXMiOlsiTWV0aG9kVk8iLCJNZXRob2RWTy5jb25zdHJ1Y3RvciIsIk1ldGhvZFZPLnJlc2V0Il0sIm1hcHBpbmdzIjoiQUFFQSxBQUlBOzs7R0FERztJQUNHLFFBQVE7SUEwQmJBOztPQUVHQTtJQUNIQSxTQTdCS0EsUUFBUUEsQ0E2QkRBLE1BQXdCQTtRQTNCN0JDLGNBQVNBLEdBQVdBLElBQUlBLENBQUNBO1FBNkIvQkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsTUFBTUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRUREOztPQUVHQTtJQUNJQSx3QkFBS0EsR0FBWkE7UUFFQ0UsSUFBSUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsTUFBTUEsRUFBRUEsQ0FBQ0E7UUFFckJBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxvQkFBb0JBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBQy9CQSxJQUFJQSxDQUFDQSxzQkFBc0JBLEdBQUdBLENBQUNBLENBQUNBLENBQUNBO1FBRWpDQSxJQUFJQSxDQUFDQSxlQUFlQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUM3QkEsSUFBSUEsQ0FBQ0EsU0FBU0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDdkJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzFCQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUMzQkEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDckJBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDOUJBLElBQUlBLENBQUNBLG9CQUFvQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDbENBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFDckNBLENBQUNBO0lBQ0ZGLGVBQUNBO0FBQURBLENBdERBLEFBc0RDQSxJQUFBO0FBRUQsQUFBa0IsaUJBQVQsUUFBUSxDQUFDIiwiZmlsZSI6Im1hdGVyaWFscy9jb21waWxhdGlvbi9NZXRob2RWTy5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU2hhZGluZ01ldGhvZEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL21ldGhvZHMvU2hhZGluZ01ldGhvZEJhc2VcIik7XG5cbi8qKlxuICogTWV0aG9kVk8gY29udGFpbnMgZGF0YSBmb3IgYSBnaXZlbiBzaGFkZXIgb2JqZWN0IGZvciB0aGUgdXNlIHdpdGhpbiBhIHNpbmdsZSBtYXRlcmlhbC5cbiAqIFRoaXMgYWxsb3dzIHNoYWRlciBtZXRob2RzIHRvIGJlIHNoYXJlZCBhY3Jvc3MgbWF0ZXJpYWxzIHdoaWxlIHRoZWlyIG5vbi1wdWJsaWMgc3RhdGUgZGlmZmVycy5cbiAqL1xuY2xhc3MgTWV0aG9kVk9cbntcblx0cHVibGljIHVzZU1ldGhvZDpib29sZWFuID0gdHJ1ZTtcblxuXHRwdWJsaWMgbWV0aG9kOlNoYWRpbmdNZXRob2RCYXNlO1xuXG5cdC8vIHB1YmxpYyByZWdpc3RlciBpbmRpY2VzXG5cdHB1YmxpYyB0ZXh0dXJlc0luZGV4Om51bWJlcjtcblx0cHVibGljIHNlY29uZGFyeVRleHR1cmVzSW5kZXg6bnVtYmVyOyAvLyBzb21ldGltZXMgbmVlZGVkIGZvciBjb21wb3NpdGVzXG5cdHB1YmxpYyB2ZXJ0ZXhDb25zdGFudHNJbmRleDpudW1iZXI7XG5cdHB1YmxpYyBzZWNvbmRhcnlWZXJ0ZXhDb25zdGFudHNJbmRleDpudW1iZXI7IC8vIHNvbWV0aW1lcyBuZWVkZWQgZm9yIGNvbXBvc2l0ZXNcblx0cHVibGljIGZyYWdtZW50Q29uc3RhbnRzSW5kZXg6bnVtYmVyO1xuXHRwdWJsaWMgc2Vjb25kYXJ5RnJhZ21lbnRDb25zdGFudHNJbmRleDpudW1iZXI7IC8vIHNvbWV0aW1lcyBuZWVkZWQgZm9yIGNvbXBvc2l0ZXNcblxuXHQvLyBpbnRlcm5hbCBzdHVmZiBmb3IgdGhlIG1hdGVyaWFsIHRvIGtub3cgYmVmb3JlIGFzc2VtYmxpbmcgY29kZVxuXHRwdWJsaWMgbmVlZHNQcm9qZWN0aW9uOmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc1ZpZXc6Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzTm9ybWFsczpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNUYW5nZW50czpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNVVjpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNTZWNvbmRhcnlVVjpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNHbG9iYWxWZXJ0ZXhQb3M6Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzR2xvYmFsRnJhZ21lbnRQb3M6Ym9vbGVhbjtcblxuXHRwdWJsaWMgdXNlc1RleHR1cmU6Ym9vbGVhbjtcblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBNZXRob2RWTyBvYmplY3QuXG5cdCAqL1xuXHRjb25zdHJ1Y3RvcihtZXRob2Q6U2hhZGluZ01ldGhvZEJhc2UpXG5cdHtcblx0XHR0aGlzLm1ldGhvZCA9IG1ldGhvZDtcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXNldHMgdGhlIHZhbHVlcyBvZiB0aGUgdmFsdWUgb2JqZWN0IHRvIHRoZWlyIFwidW51c2VkXCIgc3RhdGUuXG5cdCAqL1xuXHRwdWJsaWMgcmVzZXQoKVxuXHR7XG5cdFx0dGhpcy5tZXRob2QuaVJlc2V0KCk7XG5cblx0XHR0aGlzLnRleHR1cmVzSW5kZXggPSAtMTtcblx0XHR0aGlzLnZlcnRleENvbnN0YW50c0luZGV4ID0gLTE7XG5cdFx0dGhpcy5mcmFnbWVudENvbnN0YW50c0luZGV4ID0gLTE7XG5cblx0XHR0aGlzLm5lZWRzUHJvamVjdGlvbiA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNWaWV3ID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc05vcm1hbHMgPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzVGFuZ2VudHMgPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzVVYgPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzU2Vjb25kYXJ5VVYgPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzR2xvYmFsVmVydGV4UG9zID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc0dsb2JhbEZyYWdtZW50UG9zID0gZmFsc2U7XG5cdH1cbn1cblxuZXhwb3J0ID0gTWV0aG9kVk87XG4iXX0=