/**
 * MethodVO contains data for a given shader object for the use within a single material.
 * This allows shader methods to be shared across materials while their non-public state differs.
 */
var MethodVO = (function () {
    /**
     * Creates a new MethodVO object.
     */
    function MethodVO(method) {
        this.useMethod = true;
        this.method = method;
    }
    /**
     * Resets the values of the value object to their "unused" state.
     */
    MethodVO.prototype.reset = function () {
        this.method.iReset();
        this.texturesIndex = -1;
        this.vertexConstantsIndex = -1;
        this.fragmentConstantsIndex = -1;
        this.needsProjection = false;
        this.needsView = false;
        this.needsNormals = false;
        this.needsTangents = false;
        this.needsUV = false;
        this.needsSecondaryUV = false;
        this.needsGlobalVertexPos = false;
        this.needsGlobalFragmentPos = false;
    };
    return MethodVO;
})();
module.exports = MethodVO;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdGVyaWFscy9jb21waWxhdGlvbi9tZXRob2R2by50cyJdLCJuYW1lcyI6WyJNZXRob2RWTyIsIk1ldGhvZFZPLmNvbnN0cnVjdG9yIiwiTWV0aG9kVk8ucmVzZXQiXSwibWFwcGluZ3MiOiJBQUVBLEFBSUE7OztHQURHO0lBQ0csUUFBUTtJQTBCYkE7O09BRUdBO0lBQ0hBLFNBN0JLQSxRQUFRQSxDQTZCREEsTUFBd0JBO1FBM0I3QkMsY0FBU0EsR0FBV0EsSUFBSUEsQ0FBQ0E7UUE2Qi9CQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxNQUFNQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFFREQ7O09BRUdBO0lBQ0lBLHdCQUFLQSxHQUFaQTtRQUVDRSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxNQUFNQSxFQUFFQSxDQUFDQTtRQUVyQkEsSUFBSUEsQ0FBQ0EsYUFBYUEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLG9CQUFvQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDL0JBLElBQUlBLENBQUNBLHNCQUFzQkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFFakNBLElBQUlBLENBQUNBLGVBQWVBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzdCQSxJQUFJQSxDQUFDQSxTQUFTQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUN2QkEsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsS0FBS0EsQ0FBQ0E7UUFDMUJBLElBQUlBLENBQUNBLGFBQWFBLEdBQUdBLEtBQUtBLENBQUNBO1FBQzNCQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNyQkEsSUFBSUEsQ0FBQ0EsZ0JBQWdCQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUM5QkEsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNsQ0EsSUFBSUEsQ0FBQ0Esc0JBQXNCQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUNyQ0EsQ0FBQ0E7SUFDRkYsZUFBQ0E7QUFBREEsQ0F0REEsQUFzRENBLElBQUE7QUFFRCxBQUFrQixpQkFBVCxRQUFRLENBQUMiLCJmaWxlIjoibWF0ZXJpYWxzL2NvbXBpbGF0aW9uL01ldGhvZFZPLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLXN0YWdlZ2wvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFNoYWRpbmdNZXRob2RCYXNlXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9tZXRob2RzL1NoYWRpbmdNZXRob2RCYXNlXCIpO1xuXG4vKipcbiAqIE1ldGhvZFZPIGNvbnRhaW5zIGRhdGEgZm9yIGEgZ2l2ZW4gc2hhZGVyIG9iamVjdCBmb3IgdGhlIHVzZSB3aXRoaW4gYSBzaW5nbGUgbWF0ZXJpYWwuXG4gKiBUaGlzIGFsbG93cyBzaGFkZXIgbWV0aG9kcyB0byBiZSBzaGFyZWQgYWNyb3NzIG1hdGVyaWFscyB3aGlsZSB0aGVpciBub24tcHVibGljIHN0YXRlIGRpZmZlcnMuXG4gKi9cbmNsYXNzIE1ldGhvZFZPXG57XG5cdHB1YmxpYyB1c2VNZXRob2Q6Ym9vbGVhbiA9IHRydWU7XG5cblx0cHVibGljIG1ldGhvZDpTaGFkaW5nTWV0aG9kQmFzZTtcblxuXHQvLyBwdWJsaWMgcmVnaXN0ZXIgaW5kaWNlc1xuXHRwdWJsaWMgdGV4dHVyZXNJbmRleDpudW1iZXI7XG5cdHB1YmxpYyBzZWNvbmRhcnlUZXh0dXJlc0luZGV4Om51bWJlcjsgLy8gc29tZXRpbWVzIG5lZWRlZCBmb3IgY29tcG9zaXRlc1xuXHRwdWJsaWMgdmVydGV4Q29uc3RhbnRzSW5kZXg6bnVtYmVyO1xuXHRwdWJsaWMgc2Vjb25kYXJ5VmVydGV4Q29uc3RhbnRzSW5kZXg6bnVtYmVyOyAvLyBzb21ldGltZXMgbmVlZGVkIGZvciBjb21wb3NpdGVzXG5cdHB1YmxpYyBmcmFnbWVudENvbnN0YW50c0luZGV4Om51bWJlcjtcblx0cHVibGljIHNlY29uZGFyeUZyYWdtZW50Q29uc3RhbnRzSW5kZXg6bnVtYmVyOyAvLyBzb21ldGltZXMgbmVlZGVkIGZvciBjb21wb3NpdGVzXG5cblx0Ly8gaW50ZXJuYWwgc3R1ZmYgZm9yIHRoZSBtYXRlcmlhbCB0byBrbm93IGJlZm9yZSBhc3NlbWJsaW5nIGNvZGVcblx0cHVibGljIG5lZWRzUHJvamVjdGlvbjpib29sZWFuO1xuXHRwdWJsaWMgbmVlZHNWaWV3OmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc05vcm1hbHM6Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzVGFuZ2VudHM6Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzVVY6Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzU2Vjb25kYXJ5VVY6Ym9vbGVhbjtcblx0cHVibGljIG5lZWRzR2xvYmFsVmVydGV4UG9zOmJvb2xlYW47XG5cdHB1YmxpYyBuZWVkc0dsb2JhbEZyYWdtZW50UG9zOmJvb2xlYW47XG5cblx0cHVibGljIHVzZXNUZXh0dXJlOmJvb2xlYW47XG5cblx0LyoqXG5cdCAqIENyZWF0ZXMgYSBuZXcgTWV0aG9kVk8gb2JqZWN0LlxuXHQgKi9cblx0Y29uc3RydWN0b3IobWV0aG9kOlNoYWRpbmdNZXRob2RCYXNlKVxuXHR7XG5cdFx0dGhpcy5tZXRob2QgPSBtZXRob2Q7XG5cdH1cblxuXHQvKipcblx0ICogUmVzZXRzIHRoZSB2YWx1ZXMgb2YgdGhlIHZhbHVlIG9iamVjdCB0byB0aGVpciBcInVudXNlZFwiIHN0YXRlLlxuXHQgKi9cblx0cHVibGljIHJlc2V0KClcblx0e1xuXHRcdHRoaXMubWV0aG9kLmlSZXNldCgpO1xuXG5cdFx0dGhpcy50ZXh0dXJlc0luZGV4ID0gLTE7XG5cdFx0dGhpcy52ZXJ0ZXhDb25zdGFudHNJbmRleCA9IC0xO1xuXHRcdHRoaXMuZnJhZ21lbnRDb25zdGFudHNJbmRleCA9IC0xO1xuXG5cdFx0dGhpcy5uZWVkc1Byb2plY3Rpb24gPSBmYWxzZTtcblx0XHR0aGlzLm5lZWRzVmlldyA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNOb3JtYWxzID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc1RhbmdlbnRzID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc1VWID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc1NlY29uZGFyeVVWID0gZmFsc2U7XG5cdFx0dGhpcy5uZWVkc0dsb2JhbFZlcnRleFBvcyA9IGZhbHNlO1xuXHRcdHRoaXMubmVlZHNHbG9iYWxGcmFnbWVudFBvcyA9IGZhbHNlO1xuXHR9XG59XG5cbmV4cG9ydCA9IE1ldGhvZFZPO1xuIl19