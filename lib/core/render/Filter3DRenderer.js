var Event = require("awayjs-core/lib/events/Event");
var ContextGLBlendFactor = require("awayjs-stagegl/lib/core/stagegl/ContextGLBlendFactor");
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/core/stagegl/ContextGLVertexBufferFormat");
var RTTBufferManager = require("awayjs-stagegl/lib/managers/RTTBufferManager");
/**
 * @class away.render.Filter3DRenderer
 */
var Filter3DRenderer = (function () {
    function Filter3DRenderer(stage) {
        var _this = this;
        this._filterSizesInvalid = true;
        this._onRTTResizeDelegate = function (event) { return _this.onRTTResize(event); };
        this._stage = stage;
        this._rttManager = RTTBufferManager.getInstance(stage);
        this._rttManager.addEventListener(Event.RESIZE, this._onRTTResizeDelegate);
    }
    Filter3DRenderer.prototype.onRTTResize = function (event) {
        this._filterSizesInvalid = true;
    };
    Object.defineProperty(Filter3DRenderer.prototype, "requireDepthRender", {
        get: function () {
            return this._requireDepthRender;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DRenderer.prototype.getMainInputTexture = function (stage) {
        if (this._filterTasksInvalid) {
            this.updateFilterTasks(stage);
        }
        return this._mainInputTexture;
    };
    Object.defineProperty(Filter3DRenderer.prototype, "filters", {
        get: function () {
            return this._filters;
        },
        set: function (value) {
            this._filters = value;
            this._filterTasksInvalid = true;
            this._requireDepthRender = false;
            if (!this._filters) {
                return;
            }
            for (var i = 0; i < this._filters.length; ++i) {
                // TODO: check logic:
                // this._requireDepthRender ||=  Boolean ( this._filters[i].requireDepthRender )
                var s = this._filters[i];
                var b = (s.requireDepthRender == null) ? false : s.requireDepthRender;
                this._requireDepthRender = this._requireDepthRender || b;
            }
            this._filterSizesInvalid = true;
        },
        enumerable: true,
        configurable: true
    });
    Filter3DRenderer.prototype.updateFilterTasks = function (stage) {
        var len;
        if (this._filterSizesInvalid) {
            this.updateFilterSizes();
        }
        if (!this._filters) {
            this._tasks = null;
            return;
        }
        this._tasks = new Array();
        len = this._filters.length - 1;
        var filter;
        for (var i = 0; i <= len; ++i) {
            // make sure all internal tasks are linked together
            filter = this._filters[i];
            // TODO: check logic
            // filter.setRenderTargets(i == len? null : Filter3DBase(_filters[i + 1]).getMainInputTexture(stage), stage);
            filter.setRenderTargets(i == len ? null : this._filters[i + 1].getMainInputTexture(stage), stage);
            this._tasks = this._tasks.concat(filter.tasks);
        }
        this._mainInputTexture = this._filters[0].getMainInputTexture(stage);
    };
    Filter3DRenderer.prototype.render = function (stage, camera, depthTexture) {
        var len;
        var i;
        var task;
        var context = stage.context;
        var indexBuffer = this._rttManager.indexBuffer;
        var vertexBuffer = this._rttManager.renderToTextureVertexBuffer;
        if (!this._filters) {
            return;
        }
        if (this._filterSizesInvalid) {
            this.updateFilterSizes();
        }
        if (this._filterTasksInvalid) {
            this.updateFilterTasks(stage);
        }
        len = this._filters.length;
        for (i = 0; i < len; ++i) {
            this._filters[i].update(stage, camera);
        }
        len = this._tasks.length;
        if (len > 1) {
            context.setVertexBufferAt(0, vertexBuffer, 0, ContextGLVertexBufferFormat.FLOAT_2);
            context.setVertexBufferAt(1, vertexBuffer, 2, ContextGLVertexBufferFormat.FLOAT_2);
        }
        for (i = 0; i < len; ++i) {
            task = this._tasks[i];
            //stage.setRenderTarget(task.target); //TODO
            if (!task.target) {
                stage.scissorRect = null;
                vertexBuffer = this._rttManager.renderToScreenVertexBuffer;
                context.setVertexBufferAt(0, vertexBuffer, 0, ContextGLVertexBufferFormat.FLOAT_2);
                context.setVertexBufferAt(1, vertexBuffer, 2, ContextGLVertexBufferFormat.FLOAT_2);
            }
            context.setTextureAt(0, task.getMainInputTexture(stage));
            context.setProgram(task.getProgram(stage));
            context.clear(0.0, 0.0, 0.0, 0.0);
            task.activate(stage, camera, depthTexture);
            context.setBlendFactors(ContextGLBlendFactor.ONE, ContextGLBlendFactor.ZERO);
            context.drawTriangles(indexBuffer, 0, 2);
            task.deactivate(stage);
        }
        context.setTextureAt(0, null);
        context.setVertexBufferAt(0, null);
        context.setVertexBufferAt(1, null);
    };
    Filter3DRenderer.prototype.updateFilterSizes = function () {
        for (var i = 0; i < this._filters.length; ++i) {
            this._filters[i].textureWidth = this._rttManager.textureWidth;
            this._filters[i].textureHeight = this._rttManager.textureHeight;
        }
        this._filterSizesInvalid = true;
    };
    Filter3DRenderer.prototype.dispose = function () {
        this._rttManager.removeEventListener(Event.RESIZE, this._onRTTResizeDelegate);
        this._rttManager = null;
        this._stage = null;
    };
    return Filter3DRenderer;
})();
module.exports = Filter3DRenderer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3JlbmRlci9maWx0ZXIzZHJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbIkZpbHRlcjNEUmVuZGVyZXIiLCJGaWx0ZXIzRFJlbmRlcmVyLmNvbnN0cnVjdG9yIiwiRmlsdGVyM0RSZW5kZXJlci5vblJUVFJlc2l6ZSIsIkZpbHRlcjNEUmVuZGVyZXIucmVxdWlyZURlcHRoUmVuZGVyIiwiRmlsdGVyM0RSZW5kZXJlci5nZXRNYWluSW5wdXRUZXh0dXJlIiwiRmlsdGVyM0RSZW5kZXJlci5maWx0ZXJzIiwiRmlsdGVyM0RSZW5kZXJlci51cGRhdGVGaWx0ZXJUYXNrcyIsIkZpbHRlcjNEUmVuZGVyZXIucmVuZGVyIiwiRmlsdGVyM0RSZW5kZXJlci51cGRhdGVGaWx0ZXJTaXplcyIsIkZpbHRlcjNEUmVuZGVyZXIuZGlzcG9zZSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxLQUFLLFdBQWdCLDhCQUE4QixDQUFDLENBQUM7QUFLNUQsSUFBTyxvQkFBb0IsV0FBYSxzREFBc0QsQ0FBQyxDQUFDO0FBQ2hHLElBQU8sMkJBQTJCLFdBQVcsNkRBQTZELENBQUMsQ0FBQztBQU81RyxJQUFPLGdCQUFnQixXQUFjLDhDQUE4QyxDQUFDLENBQUM7QUFFckYsQUFHQTs7R0FERztJQUNHLGdCQUFnQjtJQVlyQkEsU0FaS0EsZ0JBQWdCQSxDQVlUQSxLQUFXQTtRQVp4QkMsaUJBME1DQTtRQWpNUUEsd0JBQW1CQSxHQUFXQSxJQUFJQSxDQUFDQTtRQUsxQ0EsSUFBSUEsQ0FBQ0Esb0JBQW9CQSxHQUFHQSxVQUFDQSxLQUFXQSxJQUFLQSxPQUFBQSxLQUFJQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUF2QkEsQ0FBdUJBLENBQUNBO1FBRXJFQSxJQUFJQSxDQUFDQSxNQUFNQSxHQUFHQSxLQUFLQSxDQUFDQTtRQUNwQkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsZ0JBQWdCQSxDQUFDQSxXQUFXQSxDQUFDQSxLQUFLQSxD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Q0EsRUFBRUEsWUFBWUEsRUFBRUEsQ0FBQ0EsRUFBRUEsMkJBQTJCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUNwRkEsQ0FBQ0E7UUFFREEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0E7WUFFMUJBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBRXRCQSxBQUVBQSw0Q0FGNENBO1lBRTVDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxJQUFJQSxDQUFDQSxNQUFNQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFbEJBLEtBQUtBLENBQUNBLFdBQVdBLEdBQUdBLElBQUlBLENBQUNBO2dCQUN6QkEsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsMEJBQTBCQSxDQUFDQTtnQkFDM0RBLE9BQU9BLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsWUFBWUEsRUFBRUEsQ0FBQ0EsRUFBRUEsMkJBQTJCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtnQkFDbkZBLE9BQU9BLENBQUNBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsWUFBWUEsRUFBRUEsQ0FBQ0EsRUFBRUEsMkJBQTJCQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtZQUVwRkEsQ0FBQ0E7WUFFREEsT0FBT0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN6REEsT0FBT0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDM0NBLE9BQU9BLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLEVBQUVBLEdBQUdBLENBQUNBLENBQUNBO1lBRWxDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxLQUFLQSxFQUFFQSxNQUFNQSxFQUFFQSxZQUFZQSxDQUFDQSxDQUFDQTtZQUUzQ0EsT0FBT0EsQ0FBQ0EsZUFBZUEsQ0FBQ0Esb0JBQW9CQSxDQUFDQSxHQUFHQSxFQUFFQSxvQkFBb0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1lBQzdFQSxPQUFPQSxDQUFDQSxhQUFhQSxDQUFDQSxXQUFXQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUV6Q0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0E7UUFDeEJBLENBQUNBO1FBRURBLE9BQU9BLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQzlCQSxPQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBQ25DQSxPQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO0lBQ3BDQSxDQUFDQTtJQUVPUCw0Q0FBaUJBLEdBQXpCQTtRQUVDUSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxNQUFNQSxFQUFFQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQTtZQUN0REEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsWUFBWUEsR0FBR0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsWUFBWUEsQ0FBQ0E7WUFDOURBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLGFBQWFBLEdBQUdBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLGFBQWFBLENBQUNBO1FBQ2pFQSxDQUFDQTtRQUVEQSxJQUFJQSxDQUFDQSxtQkFBbUJBLEdBQUdBLElBQUlBLENBQUNBO0lBRWpDQSxDQUFDQTtJQUVNUixrQ0FBT0EsR0FBZEE7UUFFQ1MsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxLQUFLQSxDQUFDQSxNQUFNQSxFQUFFQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLENBQUNBO1FBQzlFQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsTUFBTUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDcEJBLENBQUNBO0lBQ0ZULHVCQUFDQTtBQUFEQSxDQTFNQSxBQTBNQ0EsSUFBQTtBQUVELEFBQTBCLGlCQUFqQixnQkFBZ0IsQ0FBQyIsImZpbGUiOiJjb3JlL3JlbmRlci9GaWx0ZXIzRFJlbmRlcmVyLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBFdmVudFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9ldmVudHMvRXZlbnRcIik7XG5cbmltcG9ydCBDYW1lcmFcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvZW50aXRpZXMvQ2FtZXJhXCIpO1xuXG5pbXBvcnQgU3RhZ2VcdFx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9iYXNlL1N0YWdlXCIpO1xuaW1wb3J0IENvbnRleHRHTEJsZW5kRmFjdG9yXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9Db250ZXh0R0xCbGVuZEZhY3RvclwiKTtcbmltcG9ydCBDb250ZXh0R0xWZXJ0ZXhCdWZmZXJGb3JtYXRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0XCIpO1xuaW1wb3J0IElDb250ZXh0U3RhZ2VHTFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JQ29udGV4dFN0YWdlR0xcIik7XG5pbXBvcnQgSUluZGV4QnVmZmVyXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvSUluZGV4QnVmZmVyXCIpO1xuaW1wb3J0IElUZXh0dXJlXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JVGV4dHVyZVwiKTtcbmltcG9ydCBJVmVydGV4QnVmZmVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0lWZXJ0ZXhCdWZmZXJcIik7XG5pbXBvcnQgRmlsdGVyM0RCYXNlXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9maWx0ZXJzL0ZpbHRlcjNEQmFzZVwiKTtcbmltcG9ydCBGaWx0ZXIzRFRhc2tCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvZmlsdGVycy90YXNrcy9GaWx0ZXIzRFRhc2tCYXNlXCIpO1xuaW1wb3J0IFJUVEJ1ZmZlck1hbmFnZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9tYW5hZ2Vycy9SVFRCdWZmZXJNYW5hZ2VyXCIpO1xuXG4vKipcbiAqIEBjbGFzcyBhd2F5LnJlbmRlci5GaWx0ZXIzRFJlbmRlcmVyXG4gKi9cbmNsYXNzIEZpbHRlcjNEUmVuZGVyZXJcbntcblx0cHJpdmF0ZSBfZmlsdGVyczpBcnJheTxGaWx0ZXIzREJhc2U+O1xuXHRwcml2YXRlIF90YXNrczpBcnJheTxGaWx0ZXIzRFRhc2tCYXNlPjtcblx0cHJpdmF0ZSBfZmlsdGVyVGFza3NJbnZhbGlkOmJvb2xlYW47XG5cdHByaXZhdGUgX21haW5JbnB1dFRleHR1cmU6SVRleHR1cmU7XG5cdHByaXZhdGUgX3JlcXVpcmVEZXB0aFJlbmRlcjpib29sZWFuO1xuXHRwcml2YXRlIF9ydHRNYW5hZ2VyOlJUVEJ1ZmZlck1hbmFnZXI7XG5cdHByaXZhdGUgX3N0YWdlOlN0YWdlO1xuXHRwcml2YXRlIF9maWx0ZXJTaXplc0ludmFsaWQ6Ym9vbGVhbiA9IHRydWU7XG5cdHByaXZhdGUgX29uUlRUUmVzaXplRGVsZWdhdGU6KGV2ZW50OkV2ZW50KSA9PiB2b2lkO1xuXG5cdGNvbnN0cnVjdG9yKHN0YWdlOlN0YWdlKVxuXHR7XG5cdFx0dGhpcy5fb25SVFRSZXNpemVEZWxlZ2F0ZSA9IChldmVudDpFdmVudCkgPT4gdGhpcy5vblJUVFJlc2l6ZShldmVudCk7XG5cblx0XHR0aGlzLl9zdGFnZSA9IHN0YWdlO1xuXHRcdHRoaXMuX3J0dE1hbmFnZXIgPSBSVFRCdWZmZXJNYW5hZ2VyLmdldEluc3RhbmNlKHN0YWdlKTtcblx0XHR0aGlzLl9ydHRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoRXZlbnQuUkVTSVpFLCB0aGlzLl9vblJUVFJlc2l6ZURlbGVnYXRlKTtcblxuXHR9XG5cblx0cHJpdmF0ZSBvblJUVFJlc2l6ZShldmVudDpFdmVudClcblx0e1xuXHRcdHRoaXMuX2ZpbHRlclNpemVzSW52YWxpZCA9IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IHJlcXVpcmVEZXB0aFJlbmRlcigpOmJvb2xlYW5cblx0e1xuXHRcdHJldHVybiB0aGlzLl9yZXF1aXJlRGVwdGhSZW5kZXI7XG5cdH1cblxuXHRwdWJsaWMgZ2V0TWFpbklucHV0VGV4dHVyZShzdGFnZTpTdGFnZSk6SVRleHR1cmVcblx0e1xuXHRcdGlmICh0aGlzLl9maWx0ZXJUYXNrc0ludmFsaWQpIHtcblxuXHRcdFx0dGhpcy51cGRhdGVGaWx0ZXJUYXNrcyhzdGFnZSk7XG5cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5fbWFpbklucHV0VGV4dHVyZTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgZmlsdGVycygpOkZpbHRlcjNEQmFzZVtdXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZmlsdGVycztcblx0fVxuXG5cdHB1YmxpYyBzZXQgZmlsdGVycyh2YWx1ZTpGaWx0ZXIzREJhc2VbXSlcblx0e1xuXHRcdHRoaXMuX2ZpbHRlcnMgPSB2YWx1ZTtcblxuXHRcdHRoaXMuX2ZpbHRlclRhc2tzSW52YWxpZCA9IHRydWU7XG5cblx0XHR0aGlzLl9yZXF1aXJlRGVwdGhSZW5kZXIgPSBmYWxzZTtcblxuXHRcdGlmICghdGhpcy5fZmlsdGVycykge1xuXG5cdFx0XHRyZXR1cm47XG5cblx0XHR9XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCB0aGlzLl9maWx0ZXJzLmxlbmd0aDsgKytpKSB7XG5cblx0XHRcdC8vIFRPRE86IGNoZWNrIGxvZ2ljOlxuXHRcdFx0Ly8gdGhpcy5fcmVxdWlyZURlcHRoUmVuZGVyIHx8PSAgQm9vbGVhbiAoIHRoaXMuX2ZpbHRlcnNbaV0ucmVxdWlyZURlcHRoUmVuZGVyIClcblxuXHRcdFx0dmFyIHM6YW55ID0gdGhpcy5fZmlsdGVyc1tpXTtcblx0XHRcdHZhciBiOmJvb2xlYW4gPSA8Ym9vbGVhbj4gKCBzLnJlcXVpcmVEZXB0aFJlbmRlciA9PSBudWxsICk/IGZhbHNlIDogcy5yZXF1aXJlRGVwdGhSZW5kZXI7XG5cblx0XHRcdHRoaXMuX3JlcXVpcmVEZXB0aFJlbmRlciA9IHRoaXMuX3JlcXVpcmVEZXB0aFJlbmRlciB8fCBiO1xuXG5cdFx0fVxuXG5cdFx0dGhpcy5fZmlsdGVyU2l6ZXNJbnZhbGlkID0gdHJ1ZTtcblxuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVGaWx0ZXJUYXNrcyhzdGFnZTpTdGFnZSlcblx0e1xuXHRcdHZhciBsZW46bnVtYmVyO1xuXG5cdFx0aWYgKHRoaXMuX2ZpbHRlclNpemVzSW52YWxpZCkge1xuXG5cdFx0XHR0aGlzLnVwZGF0ZUZpbHRlclNpemVzKCk7XG5cblx0XHR9XG5cblx0XHRpZiAoIXRoaXMuX2ZpbHRlcnMpIHtcblx0XHRcdHRoaXMuX3Rhc2tzID0gbnVsbDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR0aGlzLl90YXNrcyA9IG5ldyBBcnJheTxGaWx0ZXIzRFRhc2tCYXNlPigpO1xuXG5cdFx0bGVuID0gdGhpcy5fZmlsdGVycy5sZW5ndGggLSAxO1xuXG5cdFx0dmFyIGZpbHRlcjpGaWx0ZXIzREJhc2U7XG5cblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPD0gbGVuOyArK2kpIHtcblxuXHRcdFx0Ly8gbWFrZSBzdXJlIGFsbCBpbnRlcm5hbCB0YXNrcyBhcmUgbGlua2VkIHRvZ2V0aGVyXG5cdFx0XHRmaWx0ZXIgPSB0aGlzLl9maWx0ZXJzW2ldO1xuXG5cdFx0XHQvLyBUT0RPOiBjaGVjayBsb2dpY1xuXHRcdFx0Ly8gZmlsdGVyLnNldFJlbmRlclRhcmdldHMoaSA9PSBsZW4/IG51bGwgOiBGaWx0ZXIzREJhc2UoX2ZpbHRlcnNbaSArIDFdKS5nZXRNYWluSW5wdXRUZXh0dXJlKHN0YWdlKSwgc3RhZ2UpO1xuXG5cdFx0XHRmaWx0ZXIuc2V0UmVuZGVyVGFyZ2V0cyhpID09IGxlbj8gbnVsbCA6IHRoaXMuX2ZpbHRlcnNbaSArIDFdLmdldE1haW5JbnB1dFRleHR1cmUoc3RhZ2UpLCBzdGFnZSk7XG5cblx0XHRcdHRoaXMuX3Rhc2tzID0gdGhpcy5fdGFza3MuY29uY2F0KGZpbHRlci50YXNrcyk7XG5cblx0XHR9XG5cblx0XHR0aGlzLl9tYWluSW5wdXRUZXh0dXJlID0gdGhpcy5fZmlsdGVyc1swXS5nZXRNYWluSW5wdXRUZXh0dXJlKHN0YWdlKTtcblxuXHR9XG5cblx0cHVibGljIHJlbmRlcihzdGFnZTpTdGFnZSwgY2FtZXJhOkNhbWVyYSwgZGVwdGhUZXh0dXJlOklUZXh0dXJlKVxuXHR7XG5cdFx0dmFyIGxlbjpudW1iZXI7XG5cdFx0dmFyIGk6bnVtYmVyO1xuXHRcdHZhciB0YXNrOkZpbHRlcjNEVGFza0Jhc2U7XG5cdFx0dmFyIGNvbnRleHQ6SUNvbnRleHRTdGFnZUdMID0gPElDb250ZXh0U3RhZ2VHTD4gc3RhZ2UuY29udGV4dDtcblxuXHRcdHZhciBpbmRleEJ1ZmZlcjpJSW5kZXhCdWZmZXIgPSB0aGlzLl9ydHRNYW5hZ2VyLmluZGV4QnVmZmVyO1xuXG5cdFx0dmFyIHZlcnRleEJ1ZmZlcjpJVmVydGV4QnVmZmVyID0gdGhpcy5fcnR0TWFuYWdlci5yZW5kZXJUb1RleHR1cmVWZXJ0ZXhCdWZmZXI7XG5cblx0XHRpZiAoIXRoaXMuX2ZpbHRlcnMpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fZmlsdGVyU2l6ZXNJbnZhbGlkKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZUZpbHRlclNpemVzKCk7XG5cdFx0fVxuXG5cdFx0aWYgKHRoaXMuX2ZpbHRlclRhc2tzSW52YWxpZCkge1xuXHRcdFx0dGhpcy51cGRhdGVGaWx0ZXJUYXNrcyhzdGFnZSk7XG5cdFx0fVxuXG5cdFx0bGVuID0gdGhpcy5fZmlsdGVycy5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdHRoaXMuX2ZpbHRlcnNbaV0udXBkYXRlKHN0YWdlLCBjYW1lcmEpO1xuXHRcdH1cblxuXHRcdGxlbiA9IHRoaXMuX3Rhc2tzLmxlbmd0aDtcblxuXHRcdGlmIChsZW4gPiAxKSB7XG5cdFx0XHRjb250ZXh0LnNldFZlcnRleEJ1ZmZlckF0KDAsIHZlcnRleEJ1ZmZlciwgMCwgQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0LkZMT0FUXzIpO1xuXHRcdFx0Y29udGV4dC5zZXRWZXJ0ZXhCdWZmZXJBdCgxLCB2ZXJ0ZXhCdWZmZXIsIDIsIENvbnRleHRHTFZlcnRleEJ1ZmZlckZvcm1hdC5GTE9BVF8yKTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcblxuXHRcdFx0dGFzayA9IHRoaXMuX3Rhc2tzW2ldO1xuXG5cdFx0XHQvL3N0YWdlLnNldFJlbmRlclRhcmdldCh0YXNrLnRhcmdldCk7IC8vVE9ET1xuXG5cdFx0XHRpZiAoIXRhc2sudGFyZ2V0KSB7XG5cblx0XHRcdFx0c3RhZ2Uuc2Npc3NvclJlY3QgPSBudWxsO1xuXHRcdFx0XHR2ZXJ0ZXhCdWZmZXIgPSB0aGlzLl9ydHRNYW5hZ2VyLnJlbmRlclRvU2NyZWVuVmVydGV4QnVmZmVyO1xuXHRcdFx0XHRjb250ZXh0LnNldFZlcnRleEJ1ZmZlckF0KDAsIHZlcnRleEJ1ZmZlciwgMCwgQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0LkZMT0FUXzIpO1xuXHRcdFx0XHRjb250ZXh0LnNldFZlcnRleEJ1ZmZlckF0KDEsIHZlcnRleEJ1ZmZlciwgMiwgQ29udGV4dEdMVmVydGV4QnVmZmVyRm9ybWF0LkZMT0FUXzIpO1xuXG5cdFx0XHR9XG5cblx0XHRcdGNvbnRleHQuc2V0VGV4dHVyZUF0KDAsIHRhc2suZ2V0TWFpbklucHV0VGV4dHVyZShzdGFnZSkpO1xuXHRcdFx0Y29udGV4dC5zZXRQcm9ncmFtKHRhc2suZ2V0UHJvZ3JhbShzdGFnZSkpO1xuXHRcdFx0Y29udGV4dC5jbGVhcigwLjAsIDAuMCwgMC4wLCAwLjApO1xuXG5cdFx0XHR0YXNrLmFjdGl2YXRlKHN0YWdlLCBjYW1lcmEsIGRlcHRoVGV4dHVyZSk7XG5cblx0XHRcdGNvbnRleHQuc2V0QmxlbmRGYWN0b3JzKENvbnRleHRHTEJsZW5kRmFjdG9yLk9ORSwgQ29udGV4dEdMQmxlbmRGYWN0b3IuWkVSTyk7XG5cdFx0XHRjb250ZXh0LmRyYXdUcmlhbmdsZXMoaW5kZXhCdWZmZXIsIDAsIDIpO1xuXG5cdFx0XHR0YXNrLmRlYWN0aXZhdGUoc3RhZ2UpO1xuXHRcdH1cblxuXHRcdGNvbnRleHQuc2V0VGV4dHVyZUF0KDAsIG51bGwpO1xuXHRcdGNvbnRleHQuc2V0VmVydGV4QnVmZmVyQXQoMCwgbnVsbCk7XG5cdFx0Y29udGV4dC5zZXRWZXJ0ZXhCdWZmZXJBdCgxLCBudWxsKTtcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlRmlsdGVyU2l6ZXMoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgdGhpcy5fZmlsdGVycy5sZW5ndGg7ICsraSkge1xuXHRcdFx0dGhpcy5fZmlsdGVyc1tpXS50ZXh0dXJlV2lkdGggPSB0aGlzLl9ydHRNYW5hZ2VyLnRleHR1cmVXaWR0aDtcblx0XHRcdHRoaXMuX2ZpbHRlcnNbaV0udGV4dHVyZUhlaWdodCA9IHRoaXMuX3J0dE1hbmFnZXIudGV4dHVyZUhlaWdodDtcblx0XHR9XG5cblx0XHR0aGlzLl9maWx0ZXJTaXplc0ludmFsaWQgPSB0cnVlO1xuXG5cdH1cblxuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHR0aGlzLl9ydHRNYW5hZ2VyLnJlbW92ZUV2ZW50TGlzdGVuZXIoRXZlbnQuUkVTSVpFLCB0aGlzLl9vblJUVFJlc2l6ZURlbGVnYXRlKTtcblx0XHR0aGlzLl9ydHRNYW5hZ2VyID0gbnVsbDtcblx0XHR0aGlzLl9zdGFnZSA9IG51bGw7XG5cdH1cbn1cblxuZXhwb3J0ID0gRmlsdGVyM0RSZW5kZXJlcjsiXX0=