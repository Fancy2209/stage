var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var OpCodes = require("awayjs-stagegl/lib/core/stagegl/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/core/stagegl/ResourceBaseFlash");
var VertexBufferFlash = (function (_super) {
    __extends(VertexBufferFlash, _super);
    function VertexBufferFlash(context, numVertices, data32PerVertex) {
        _super.call(this);
        this._context = context;
        this._numVertices = numVertices;
        this._data32PerVertex = data32PerVertex;
        this._context.addStream(String.fromCharCode(OpCodes.initVertexBuffer, data32PerVertex + OpCodes.intMask) + numVertices.toString() + ",");
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    VertexBufferFlash.prototype.uploadFromArray = function (data, startVertex, numVertices) {
        this._context.addStream(String.fromCharCode(OpCodes.uploadArrayVertexBuffer, this._pId + OpCodes.intMask) + data.join() + "#" + [startVertex, numVertices].join() + ",");
        this._context.execute();
    };
    Object.defineProperty(VertexBufferFlash.prototype, "numVertices", {
        get: function () {
            return this._numVertices;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexBufferFlash.prototype, "data32PerVertex", {
        get: function () {
            return this._data32PerVertex;
        },
        enumerable: true,
        configurable: true
    });
    VertexBufferFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeVertexBuffer, this._pId + OpCodes.intMask));
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    return VertexBufferFlash;
})(ResourceBaseFlash);
module.exports = VertexBufferFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvc3RhZ2VnbC92ZXJ0ZXhidWZmZXJmbGFzaC50cyJdLCJuYW1lcyI6WyJWZXJ0ZXhCdWZmZXJGbGFzaCIsIlZlcnRleEJ1ZmZlckZsYXNoLmNvbnN0cnVjdG9yIiwiVmVydGV4QnVmZmVyRmxhc2gudXBsb2FkRnJvbUFycmF5IiwiVmVydGV4QnVmZmVyRmxhc2gubnVtVmVydGljZXMiLCJWZXJ0ZXhCdWZmZXJGbGFzaC5kYXRhMzJQZXJWZXJ0ZXgiLCJWZXJ0ZXhCdWZmZXJGbGFzaC5kaXNwb3NlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFPLE9BQU8sV0FBZ0IseUNBQXlDLENBQUMsQ0FBQztBQUN6RSxJQUFPLGlCQUFpQixXQUFhLG1EQUFtRCxDQUFDLENBQUM7QUFFMUYsSUFBTSxpQkFBaUI7SUFBU0EsVUFBMUJBLGlCQUFpQkEsVUFBMEJBO0lBTWhEQSxTQU5LQSxpQkFBaUJBLENBTVZBLE9BQXNCQSxFQUFFQSxXQUFrQkEsRUFBRUEsZUFBc0JBO1FBRTdFQyxpQkFBT0EsQ0FBQ0E7UUFFUkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLFdBQVdBLENBQUNBO1FBQ2hDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLGVBQWVBLENBQUNBO1FBQ3hDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLGVBQWVBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLFdBQVdBLENBQUNBLFFBQVFBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3pJQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNwQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBO0lBRU1ELDJDQUFlQSxHQUF0QkEsVUFBdUJBLElBQWFBLEVBQUVBLFdBQWtCQSxFQUFFQSxXQUFrQkE7UUFFM0VFLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLHVCQUF1QkEsRUFBRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsV0FBV0EsRUFBRUEsV0FBV0EsQ0FBQ0EsQ0FBQ0EsSUFBSUEsRUFBRUEsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDektBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUVERixzQkFBV0EsMENBQVdBO2FBQXRCQTtZQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7OztPQUFBSDtJQUVEQSxzQkFBV0EsOENBQWVBO2FBQTFCQTtZQUVDSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1FBQzlCQSxDQUFDQTs7O09BQUFKO0lBRU1BLG1DQUFPQSxHQUFkQTtRQUVDSyxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxtQkFBbUJBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1FBQ3ZHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVyQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBQ0ZMLHdCQUFDQTtBQUFEQSxDQTFDQSxBQTBDQ0EsRUExQytCLGlCQUFpQixFQTBDaEQ7QUFFRCxBQUEyQixpQkFBbEIsaUJBQWlCLENBQUMiLCJmaWxlIjoiY29yZS9zdGFnZWdsL1ZlcnRleEJ1ZmZlckZsYXNoLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLXN0YWdlZ2wvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnRleHRTdGFnZTNEXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0NvbnRleHRTdGFnZTNEXCIpO1xuaW1wb3J0IElWZXJ0ZXhCdWZmZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvSVZlcnRleEJ1ZmZlclwiKTtcbmltcG9ydCBPcENvZGVzXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9PcENvZGVzXCIpO1xuaW1wb3J0IFJlc291cmNlQmFzZUZsYXNoXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9SZXNvdXJjZUJhc2VGbGFzaFwiKTtcblxuY2xhc3MgVmVydGV4QnVmZmVyRmxhc2ggZXh0ZW5kcyBSZXNvdXJjZUJhc2VGbGFzaCBpbXBsZW1lbnRzIElWZXJ0ZXhCdWZmZXJcbntcblx0cHJpdmF0ZSBfY29udGV4dDpDb250ZXh0U3RhZ2UzRDtcblx0cHJpdmF0ZSBfbnVtVmVydGljZXM6bnVtYmVyO1xuXHRwcml2YXRlIF9kYXRhMzJQZXJWZXJ0ZXg6bnVtYmVyO1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQ6Q29udGV4dFN0YWdlM0QsIG51bVZlcnRpY2VzOm51bWJlciwgZGF0YTMyUGVyVmVydGV4Om51bWJlcilcblx0e1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcblx0XHR0aGlzLl9udW1WZXJ0aWNlcyA9IG51bVZlcnRpY2VzO1xuXHRcdHRoaXMuX2RhdGEzMlBlclZlcnRleCA9IGRhdGEzMlBlclZlcnRleDtcblx0XHR0aGlzLl9jb250ZXh0LmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuaW5pdFZlcnRleEJ1ZmZlciwgZGF0YTMyUGVyVmVydGV4ICsgT3BDb2Rlcy5pbnRNYXNrKSArIG51bVZlcnRpY2VzLnRvU3RyaW5nKCkgKyBcIixcIik7XG5cdFx0dGhpcy5fcElkID0gdGhpcy5fY29udGV4dC5leGVjdXRlKCk7XG5cdFx0dGhpcy5fY29udGV4dC5faUFkZFJlc291cmNlKHRoaXMpO1xuXHR9XG5cblx0cHVibGljIHVwbG9hZEZyb21BcnJheShkYXRhOm51bWJlcltdLCBzdGFydFZlcnRleDpudW1iZXIsIG51bVZlcnRpY2VzOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy51cGxvYWRBcnJheVZlcnRleEJ1ZmZlciwgdGhpcy5fcElkICsgT3BDb2Rlcy5pbnRNYXNrKSArIGRhdGEuam9pbigpICsgXCIjXCIgKyBbc3RhcnRWZXJ0ZXgsIG51bVZlcnRpY2VzXS5qb2luKCkgKyBcIixcIik7XG5cdFx0dGhpcy5fY29udGV4dC5leGVjdXRlKCk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IG51bVZlcnRpY2VzKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fbnVtVmVydGljZXM7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IGRhdGEzMlBlclZlcnRleCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2RhdGEzMlBlclZlcnRleDtcblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5kaXNwb3NlVmVydGV4QnVmZmVyLCB0aGlzLl9wSWQgKyBPcENvZGVzLmludE1hc2spKTtcblx0XHR0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcblx0XHR0aGlzLl9jb250ZXh0Ll9pUmVtb3ZlUmVzb3VyY2UodGhpcyk7XG5cblx0XHR0aGlzLl9jb250ZXh0ID0gbnVsbDtcblx0fVxufVxuXG5leHBvcnQgPSBWZXJ0ZXhCdWZmZXJGbGFzaDsiXX0=