var AGALTokenizer = require("awayjs-stagegl/lib/aglsl/AGALTokenizer");
var AGLSLParser = require("awayjs-stagegl/lib/aglsl/AGLSLParser");
var ProgramWebGL = (function () {
    function ProgramWebGL(gl) {
        this._gl = gl;
        this._program = this._gl.createProgram();
    }
    ProgramWebGL.prototype.upload = function (vertexProgram, fragmentProgram) {
        var vertexString = ProgramWebGL._aglslParser.parse(ProgramWebGL._tokenizer.decribeAGALByteArray(vertexProgram));
        var fragmentString = ProgramWebGL._aglslParser.parse(ProgramWebGL._tokenizer.decribeAGALByteArray(fragmentProgram));
        this._vertexShader = this._gl.createShader(this._gl.VERTEX_SHADER);
        this._fragmentShader = this._gl.createShader(this._gl.FRAGMENT_SHADER);
        this._gl.shaderSource(this._vertexShader, vertexString);
        this._gl.compileShader(this._vertexShader);
        if (!this._gl.getShaderParameter(this._vertexShader, this._gl.COMPILE_STATUS)) {
            throw new Error(this._gl.getShaderInfoLog(this._vertexShader));
            return;
        }
        this._gl.shaderSource(this._fragmentShader, fragmentString);
        this._gl.compileShader(this._fragmentShader);
        if (!this._gl.getShaderParameter(this._fragmentShader, this._gl.COMPILE_STATUS)) {
            throw new Error(this._gl.getShaderInfoLog(this._fragmentShader));
            return;
        }
        this._gl.attachShader(this._program, this._vertexShader);
        this._gl.attachShader(this._program, this._fragmentShader);
        this._gl.linkProgram(this._program);
        if (!this._gl.getProgramParameter(this._program, this._gl.LINK_STATUS)) {
            throw new Error(this._gl.getProgramInfoLog(this._program));
        }
    };
    ProgramWebGL.prototype.dispose = function () {
        this._gl.deleteProgram(this._program);
    };
    ProgramWebGL.prototype.focusProgram = function () {
        this._gl.useProgram(this._program);
    };
    Object.defineProperty(ProgramWebGL.prototype, "glProgram", {
        get: function () {
            return this._program;
        },
        enumerable: true,
        configurable: true
    });
    ProgramWebGL._tokenizer = new AGALTokenizer();
    ProgramWebGL._aglslParser = new AGLSLParser();
    return ProgramWebGL;
})();
module.exports = ProgramWebGL;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvc3RhZ2VnbC9wcm9ncmFtd2ViZ2wudHMiXSwibmFtZXMiOlsiUHJvZ3JhbVdlYkdMIiwiUHJvZ3JhbVdlYkdMLmNvbnN0cnVjdG9yIiwiUHJvZ3JhbVdlYkdMLnVwbG9hZCIsIlByb2dyYW1XZWJHTC5kaXNwb3NlIiwiUHJvZ3JhbVdlYkdMLmZvY3VzUHJvZ3JhbSIsIlByb2dyYW1XZWJHTC5nbFByb2dyYW0iXSwibWFwcGluZ3MiOiJBQUVBLElBQU8sYUFBYSxXQUFjLHdDQUF3QyxDQUFDLENBQUM7QUFDNUUsSUFBTyxXQUFXLFdBQWUsc0NBQXNDLENBQUMsQ0FBQztBQUl6RSxJQUFNLFlBQVk7SUFVakJBLFNBVktBLFlBQVlBLENBVUxBLEVBQXdCQTtRQUVuQ0MsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDZEEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsYUFBYUEsRUFBRUEsQ0FBQ0E7SUFDMUNBLENBQUNBO0lBRU1ELDZCQUFNQSxHQUFiQSxVQUFjQSxhQUF1QkEsRUFBRUEsZUFBeUJBO1FBRS9ERSxJQUFJQSxZQUFZQSxHQUFVQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxvQkFBb0JBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBLENBQUNBO1FBQ3ZIQSxJQUFJQSxjQUFjQSxHQUFVQSxZQUFZQSxDQUFDQSxZQUFZQSxDQUFDQSxLQUFLQSxDQUFDQSxZQUFZQSxDQUFDQSxVQUFVQSxDQUFDQSxvQkFBb0JBLENBQUNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBO1FBRTNIQSxJQUFJQSxDQUFDQSxhQUFhQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxhQUFhQSxDQUFDQSxDQUFDQTtRQUNuRUEsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0Es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O0lBNURjQSx1QkFBVUEsR0FBaUJBLElBQUlBLGFBQWFBLEVBQUVBLENBQUNBO0lBQy9DQSx5QkFBWUEsR0FBZUEsSUFBSUEsV0FBV0EsRUFBRUEsQ0FBQ0E7SUE0RDdEQSxtQkFBQ0E7QUFBREEsQ0EvREEsQUErRENBLElBQUE7QUFFRCxBQUFzQixpQkFBYixZQUFZLENBQUMiLCJmaWxlIjoiY29yZS9zdGFnZWdsL1Byb2dyYW1XZWJHTC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1zdGFnZWdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBCeXRlQXJyYXlcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheVwiKTtcblxuaW1wb3J0IEFHQUxUb2tlbml6ZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hZ2xzbC9BR0FMVG9rZW5pemVyXCIpO1xuaW1wb3J0IEFHTFNMUGFyc2VyXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9hZ2xzbC9BR0xTTFBhcnNlclwiKTtcbmltcG9ydCBJUHJvZ3JhbVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvSVByb2dyYW1cIik7XG5cblxuY2xhc3MgUHJvZ3JhbVdlYkdMIGltcGxlbWVudHMgSVByb2dyYW1cbntcblx0cHJpdmF0ZSBzdGF0aWMgX3Rva2VuaXplcjpBR0FMVG9rZW5pemVyID0gbmV3IEFHQUxUb2tlbml6ZXIoKTtcblx0cHJpdmF0ZSBzdGF0aWMgX2FnbHNsUGFyc2VyOkFHTFNMUGFyc2VyID0gbmV3IEFHTFNMUGFyc2VyKCk7XG5cblx0cHJpdmF0ZSBfZ2w6V2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuXHRwcml2YXRlIF9wcm9ncmFtOldlYkdMUHJvZ3JhbTtcblx0cHJpdmF0ZSBfdmVydGV4U2hhZGVyOldlYkdMU2hhZGVyO1xuXHRwcml2YXRlIF9mcmFnbWVudFNoYWRlcjpXZWJHTFNoYWRlcjtcblxuXHRjb25zdHJ1Y3RvcihnbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQpXG5cdHtcblx0XHR0aGlzLl9nbCA9IGdsO1xuXHRcdHRoaXMuX3Byb2dyYW0gPSB0aGlzLl9nbC5jcmVhdGVQcm9ncmFtKCk7XG5cdH1cblxuXHRwdWJsaWMgdXBsb2FkKHZlcnRleFByb2dyYW06Qnl0ZUFycmF5LCBmcmFnbWVudFByb2dyYW06Qnl0ZUFycmF5KVxuXHR7XG5cdFx0dmFyIHZlcnRleFN0cmluZzpzdHJpbmcgPSBQcm9ncmFtV2ViR0wuX2FnbHNsUGFyc2VyLnBhcnNlKFByb2dyYW1XZWJHTC5fdG9rZW5pemVyLmRlY3JpYmVBR0FMQnl0ZUFycmF5KHZlcnRleFByb2dyYW0pKTtcblx0XHR2YXIgZnJhZ21lbnRTdHJpbmc6c3RyaW5nID0gUHJvZ3JhbVdlYkdMLl9hZ2xzbFBhcnNlci5wYXJzZShQcm9ncmFtV2ViR0wuX3Rva2VuaXplci5kZWNyaWJlQUdBTEJ5dGVBcnJheShmcmFnbWVudFByb2dyYW0pKTtcblxuXHRcdHRoaXMuX3ZlcnRleFNoYWRlciA9IHRoaXMuX2dsLmNyZWF0ZVNoYWRlcih0aGlzLl9nbC5WRVJURVhfU0hBREVSKTtcblx0XHR0aGlzLl9mcmFnbWVudFNoYWRlciA9IHRoaXMuX2dsLmNyZWF0ZVNoYWRlcih0aGlzLl9nbC5GUkFHTUVOVF9TSEFERVIpO1xuXG5cdFx0dGhpcy5fZ2wuc2hhZGVyU291cmNlKHRoaXMuX3ZlcnRleFNoYWRlciwgdmVydGV4U3RyaW5nKTtcblx0XHR0aGlzLl9nbC5jb21waWxlU2hhZGVyKHRoaXMuX3ZlcnRleFNoYWRlcik7XG5cblx0XHRpZiAoIXRoaXMuX2dsLmdldFNoYWRlclBhcmFtZXRlcih0aGlzLl92ZXJ0ZXhTaGFkZXIsIHRoaXMuX2dsLkNPTVBJTEVfU1RBVFVTKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKHRoaXMuX2dsLmdldFNoYWRlckluZm9Mb2codGhpcy5fdmVydGV4U2hhZGVyKSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5fZ2wuc2hhZGVyU291cmNlKHRoaXMuX2ZyYWdtZW50U2hhZGVyLCBmcmFnbWVudFN0cmluZyk7XG5cdFx0dGhpcy5fZ2wuY29tcGlsZVNoYWRlcih0aGlzLl9mcmFnbWVudFNoYWRlcik7XG5cblx0XHRpZiAoIXRoaXMuX2dsLmdldFNoYWRlclBhcmFtZXRlcih0aGlzLl9mcmFnbWVudFNoYWRlciwgdGhpcy5fZ2wuQ09NUElMRV9TVEFUVVMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IodGhpcy5fZ2wuZ2V0U2hhZGVySW5mb0xvZyh0aGlzLl9mcmFnbWVudFNoYWRlcikpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuX2dsLmF0dGFjaFNoYWRlcih0aGlzLl9wcm9ncmFtLCB0aGlzLl92ZXJ0ZXhTaGFkZXIpO1xuXHRcdHRoaXMuX2dsLmF0dGFjaFNoYWRlcih0aGlzLl9wcm9ncmFtLCB0aGlzLl9mcmFnbWVudFNoYWRlcik7XG5cdFx0dGhpcy5fZ2wubGlua1Byb2dyYW0odGhpcy5fcHJvZ3JhbSk7XG5cblx0XHRpZiAoIXRoaXMuX2dsLmdldFByb2dyYW1QYXJhbWV0ZXIodGhpcy5fcHJvZ3JhbSwgdGhpcy5fZ2wuTElOS19TVEFUVVMpKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IodGhpcy5fZ2wuZ2V0UHJvZ3JhbUluZm9Mb2codGhpcy5fcHJvZ3JhbSkpO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdHRoaXMuX2dsLmRlbGV0ZVByb2dyYW0odGhpcy5fcHJvZ3JhbSk7XG5cdH1cblxuXHRwdWJsaWMgZm9jdXNQcm9ncmFtKClcblx0e1xuXHRcdHRoaXMuX2dsLnVzZVByb2dyYW0odGhpcy5fcHJvZ3JhbSk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IGdsUHJvZ3JhbSgpOldlYkdMUHJvZ3JhbVxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX3Byb2dyYW07XG5cdH1cbn1cblxuZXhwb3J0ID0gUHJvZ3JhbVdlYkdMOyJdfQ==