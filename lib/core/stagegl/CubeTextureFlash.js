var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var BitmapData = require("awayjs-core/lib/core/base/BitmapData");
var ByteArrayBase = require("awayjs-core/lib/utils/ByteArrayBase");
var OpCodes = require("awayjs-stagegl/lib/core/stagegl/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/core/stagegl/ResourceBaseFlash");
var CubeTextureFlash = (function (_super) {
    __extends(CubeTextureFlash, _super);
    function CubeTextureFlash(context, size, format, forRTT, streaming) {
        if (streaming === void 0) { streaming = false; }
        _super.call(this);
        this._context = context;
        this._size = size;
        this._context.addStream(String.fromCharCode(OpCodes.initCubeTexture, (forRTT ? OpCodes.trueValue : OpCodes.falseValue)) + size + "," + streaming + "," + format + "$");
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    Object.defineProperty(CubeTextureFlash.prototype, "size", {
        get: function () {
            return this._size;
        },
        enumerable: true,
        configurable: true
    });
    CubeTextureFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeCubeTexture) + this._pId.toString() + ",");
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    CubeTextureFlash.prototype.uploadFromData = function (data, side, miplevel) {
        if (miplevel === void 0) { miplevel = 0; }
        if (data instanceof BitmapData) {
            data = data.imageData.data;
        }
        else if (data instanceof HTMLImageElement) {
            var can = document.createElement("canvas");
            var w = data.width;
            var h = data.height;
            can.width = w;
            can.height = h;
            var ctx = can.getContext("2d");
            ctx.drawImage(data, 0, 0);
            data = ctx.getImageData(0, 0, w, h).data;
        }
        var pos = 0;
        var bytes = ByteArrayBase.internalGetBase64String(data.length, function () {
            return data[pos++];
        }, null);
        this._context.addStream(String.fromCharCode(OpCodes.uploadBytesCubeTexture) + this._pId + "," + miplevel + "," + side + "," + (this.size >> miplevel) + "," + bytes + "%");
        this._context.execute();
    };
    CubeTextureFlash.prototype.uploadCompressedTextureFromByteArray = function (data, byteArrayOffset /*uint*/, async) {
        if (async === void 0) { async = false; }
    };
    return CubeTextureFlash;
})(ResourceBaseFlash);
module.exports = CubeTextureFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvc3RhZ2VnbC9jdWJldGV4dHVyZWZsYXNoLnRzIl0sIm5hbWVzIjpbIkN1YmVUZXh0dXJlRmxhc2giLCJDdWJlVGV4dHVyZUZsYXNoLmNvbnN0cnVjdG9yIiwiQ3ViZVRleHR1cmVGbGFzaC5zaXplIiwiQ3ViZVRleHR1cmVGbGFzaC5kaXNwb3NlIiwiQ3ViZVRleHR1cmVGbGFzaC51cGxvYWRGcm9tRGF0YSIsIkN1YmVUZXh0dXJlRmxhc2gudXBsb2FkQ29tcHJlc3NlZFRleHR1cmVGcm9tQnl0ZUFycmF5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLFVBQVUsV0FBZSxzQ0FBc0MsQ0FBQyxDQUFDO0FBRXhFLElBQU8sYUFBYSxXQUFjLHFDQUFxQyxDQUFDLENBQUM7QUFJekUsSUFBTyxPQUFPLFdBQWdCLHlDQUF5QyxDQUFDLENBQUM7QUFDekUsSUFBTyxpQkFBaUIsV0FBYSxtREFBbUQsQ0FBQyxDQUFDO0FBRTFGLElBQU0sZ0JBQWdCO0lBQVNBLFVBQXpCQSxnQkFBZ0JBLFVBQTBCQTtJQVUvQ0EsU0FWS0EsZ0JBQWdCQSxDQVVUQSxPQUFzQkEsRUFBRUEsSUFBV0EsRUFBRUEsTUFBYUEsRUFBRUEsTUFBY0EsRUFBRUEsU0FBeUJBO1FBQXpCQyx5QkFBeUJBLEdBQXpCQSxpQkFBeUJBO1FBRXhHQSxpQkFBT0EsQ0FBQ0E7UUFFUkEsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsT0FBT0EsQ0FBQ0E7UUFDeEJBLElBQUlBLENBQUNBLEtBQUtBLEdBQUdBLElBQUlBLENBQUNBO1FBRWxCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxlQUFlQSxFQUFFQSxDQUFDQSxNQUFNQSxHQUFFQSxPQUFPQSxDQUFDQSxTQUFTQSxHQUFHQSxPQUFPQSxDQUFDQSxVQUFVQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFHQSxTQUFTQSxHQUFHQSxHQUFHQSxHQUFHQSxNQUFNQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUN0S0EsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDcENBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO0lBQ25DQSxDQUFDQTtJQWZERCxzQkFBV0Esa0NBQUlBO2FBQWZBO1lBRUNFLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEtBQUtBLENBQUNBO1FBQ25CQSxDQUFDQTs7O09BQUFGO0lBY01BLGtDQUFPQSxHQUFkQTtRQUVDRyxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxrQkFBa0JBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLFFBQVFBLEVBQUVBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQ3RHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVyQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBSU1ILHlDQUFjQSxHQUFyQkEsVUFBc0JBLElBQVFBLEVBQUVBLElBQVdBLEVBQUVBLFFBQW1CQTtRQUFuQkksd0JBQW1CQSxHQUFuQkEsWUFBbUJBO1FBRS9EQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxZQUFZQSxVQUFVQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNoQ0EsSUFBSUEsR0FBaUJBLElBQUtBLENBQUNBLFNBQVNBLENBQUNBLElBQUlBLENBQUNBO1FBQzNDQSxDQUFDQTtRQUFDQSxJQUFJQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxJQUFJQSxZQUFZQSxnQkFBZ0JBLENBQUNBLENBQUNBLENBQUNBO1lBQzdDQSxJQUFJQSxHQUFHQSxHQUFHQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtZQUMzQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDbkJBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3BCQSxHQUFHQSxDQUFDQSxLQUFLQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNkQSxHQUFHQSxDQUFDQSxNQUFNQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUNmQSxJQUFJQSxHQUFHQSxHQUFHQSxHQUFHQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtZQUMvQkEsR0FBR0EsQ0FBQ0EsU0FBU0EsQ0FBQ0EsSUFBSUEsRUFBRUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDMUJBLElBQUlBLEdBQUdBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLElBQUlBLENBQUNBO1FBQzFDQSxDQUFDQTtRQUVEQSxJQUFJQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNaQSxJQUFJQSxLQUFLQSxHQUFHQSxhQUFhQSxDQUFDQSx1QkFBdUJBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLEVBQUVBO1lBQzlELE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUNwQixDQUFDLEVBQUVBLElBQUlBLENBQUNBLENBQUNBO1FBRVRBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLHNCQUFzQkEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsUUFBUUEsR0FBR0EsR0FBR0EsR0FBR0EsSUFBSUEsR0FBR0EsR0FBR0EsR0FBR0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsSUFBSUEsUUFBUUEsQ0FBQ0EsR0FBR0EsR0FBR0EsR0FBR0EsS0FBS0EsR0FBR0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7UUFDM0tBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO0lBQ3pCQSxDQUFDQTtJQUVNSiwrREFBb0NBLEdBQTNDQSxVQUE0Q0EsSUFBY0EsRUFBRUEsZUFBZUEsQ0FBUUEsUUFBREEsQUFBU0EsRUFBRUEsS0FBcUJBO1FBQXJCSyxxQkFBcUJBLEdBQXJCQSxhQUFxQkE7SUFHbEhBLENBQUNBO0lBQ0ZMLHVCQUFDQTtBQUFEQSxDQTdEQSxBQTZEQ0EsRUE3RDhCLGlCQUFpQixFQTZEL0M7QUFFRCxBQUEwQixpQkFBakIsZ0JBQWdCLENBQUMiLCJmaWxlIjoiY29yZS9zdGFnZWdsL0N1YmVUZXh0dXJlRmxhc2guanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3JvYmJhdGVtYW4vV2Vic3Rvcm1Qcm9qZWN0cy9hd2F5anMtc3RhZ2VnbC8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQml0bWFwRGF0YVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9iYXNlL0JpdG1hcERhdGFcIik7XG5pbXBvcnQgQnl0ZUFycmF5XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi91dGlscy9CeXRlQXJyYXlcIik7XG5pbXBvcnQgQnl0ZUFycmF5QmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL3V0aWxzL0J5dGVBcnJheUJhc2VcIik7XG5cbmltcG9ydCBDb250ZXh0U3RhZ2UzRFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9Db250ZXh0U3RhZ2UzRFwiKTtcbmltcG9ydCBJQ3ViZVRleHR1cmVcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JQ3ViZVRleHR1cmVcIik7XG5pbXBvcnQgT3BDb2Rlc1x0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvT3BDb2Rlc1wiKTtcbmltcG9ydCBSZXNvdXJjZUJhc2VGbGFzaFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvUmVzb3VyY2VCYXNlRmxhc2hcIik7XG5cbmNsYXNzIEN1YmVUZXh0dXJlRmxhc2ggZXh0ZW5kcyBSZXNvdXJjZUJhc2VGbGFzaCBpbXBsZW1lbnRzIElDdWJlVGV4dHVyZVxue1xuXHRwcml2YXRlIF9jb250ZXh0OkNvbnRleHRTdGFnZTNEO1xuXHRwcml2YXRlIF9zaXplOm51bWJlcjtcblxuXHRwdWJsaWMgZ2V0IHNpemUoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl9zaXplO1xuXHR9XG5cblx0Y29uc3RydWN0b3IoY29udGV4dDpDb250ZXh0U3RhZ2UzRCwgc2l6ZTpudW1iZXIsIGZvcm1hdDpzdHJpbmcsIGZvclJUVDpib29sZWFuLCBzdHJlYW1pbmc6Ym9vbGVhbiA9IGZhbHNlKVxuXHR7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuXHRcdHRoaXMuX3NpemUgPSBzaXplO1xuXG5cdFx0dGhpcy5fY29udGV4dC5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLmluaXRDdWJlVGV4dHVyZSwgKGZvclJUVD8gT3BDb2Rlcy50cnVlVmFsdWUgOiBPcENvZGVzLmZhbHNlVmFsdWUpKSArIHNpemUgKyBcIixcIiArIHN0cmVhbWluZyArIFwiLFwiICsgZm9ybWF0ICsgXCIkXCIpO1xuXHRcdHRoaXMuX3BJZCA9IHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xuXHRcdHRoaXMuX2NvbnRleHQuX2lBZGRSZXNvdXJjZSh0aGlzKTtcblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5kaXNwb3NlQ3ViZVRleHR1cmUpICsgdGhpcy5fcElkLnRvU3RyaW5nKCkgKyBcIixcIik7XG5cdFx0dGhpcy5fY29udGV4dC5leGVjdXRlKCk7XG5cdFx0dGhpcy5fY29udGV4dC5faVJlbW92ZVJlc291cmNlKHRoaXMpO1xuXG5cdFx0dGhpcy5fY29udGV4dCA9IG51bGw7XG5cdH1cblxuXHRwdWJsaWMgdXBsb2FkRnJvbURhdGEoYml0bWFwRGF0YTpCaXRtYXBEYXRhLCBzaWRlOm51bWJlciwgbWlwbGV2ZWw/Om51bWJlcik7XG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShpbWFnZTpIVE1MSW1hZ2VFbGVtZW50LCBzaWRlOm51bWJlciwgbWlwbGV2ZWw/Om51bWJlcik7XG5cdHB1YmxpYyB1cGxvYWRGcm9tRGF0YShkYXRhOmFueSwgc2lkZTpudW1iZXIsIG1pcGxldmVsOm51bWJlciA9IDApXG5cdHtcblx0XHRpZiAoZGF0YSBpbnN0YW5jZW9mIEJpdG1hcERhdGEpIHtcblx0XHRcdGRhdGEgPSAoPEJpdG1hcERhdGE+IGRhdGEpLmltYWdlRGF0YS5kYXRhO1xuXHRcdH0gZWxzZSBpZiAoZGF0YSBpbnN0YW5jZW9mIEhUTUxJbWFnZUVsZW1lbnQpIHtcblx0XHRcdHZhciBjYW4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiY2FudmFzXCIpO1xuXHRcdFx0dmFyIHcgPSBkYXRhLndpZHRoO1xuXHRcdFx0dmFyIGggPSBkYXRhLmhlaWdodDtcblx0XHRcdGNhbi53aWR0aCA9IHc7XG5cdFx0XHRjYW4uaGVpZ2h0ID0gaDtcblx0XHRcdHZhciBjdHggPSBjYW4uZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRcdFx0Y3R4LmRyYXdJbWFnZShkYXRhLCAwLCAwKTtcblx0XHRcdGRhdGEgPSBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHcsIGgpLmRhdGE7XG5cdFx0fVxuXG5cdFx0dmFyIHBvcyA9IDA7XG5cdFx0dmFyIGJ5dGVzID0gQnl0ZUFycmF5QmFzZS5pbnRlcm5hbEdldEJhc2U2NFN0cmluZyhkYXRhLmxlbmd0aCwgZnVuY3Rpb24gKCkge1xuXHRcdFx0cmV0dXJuIGRhdGFbcG9zKytdO1xuXHRcdH0sIG51bGwpO1xuXG5cdFx0dGhpcy5fY29udGV4dC5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLnVwbG9hZEJ5dGVzQ3ViZVRleHR1cmUpICsgdGhpcy5fcElkICsgXCIsXCIgKyBtaXBsZXZlbCArIFwiLFwiICsgc2lkZSArIFwiLFwiICsgKHRoaXMuc2l6ZSA+PiBtaXBsZXZlbCkgKyBcIixcIiArIGJ5dGVzICsgXCIlXCIpO1xuXHRcdHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xuXHR9XG5cblx0cHVibGljIHVwbG9hZENvbXByZXNzZWRUZXh0dXJlRnJvbUJ5dGVBcnJheShkYXRhOkJ5dGVBcnJheSwgYnl0ZUFycmF5T2Zmc2V0Om51bWJlciAvKnVpbnQqLywgYXN5bmM6Ym9vbGVhbiA9IGZhbHNlKVxuXHR7XG5cblx0fVxufVxuXG5leHBvcnQgPSBDdWJlVGV4dHVyZUZsYXNoOyJdfQ==