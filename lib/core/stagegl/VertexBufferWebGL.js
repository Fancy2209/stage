var VertexBufferWebGL = (function () {
    function VertexBufferWebGL(gl, numVertices, data32PerVertex) {
        this._gl = gl;
        this._buffer = this._gl.createBuffer();
        this._numVertices = numVertices;
        this._data32PerVertex = data32PerVertex;
    }
    VertexBufferWebGL.prototype.uploadFromArray = function (vertices, startVertex, numVertices) {
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._buffer);
        //console.log( "** WARNING upload not fully implemented, startVertex & numVertices not considered." );
        // TODO add offsets , startVertex, numVertices * this._data32PerVertex
        this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array(vertices), this._gl.STATIC_DRAW);
    };
    Object.defineProperty(VertexBufferWebGL.prototype, "numVertices", {
        get: function () {
            return this._numVertices;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexBufferWebGL.prototype, "data32PerVertex", {
        get: function () {
            return this._data32PerVertex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexBufferWebGL.prototype, "glBuffer", {
        get: function () {
            return this._buffer;
        },
        enumerable: true,
        configurable: true
    });
    VertexBufferWebGL.prototype.dispose = function () {
        this._gl.deleteBuffer(this._buffer);
    };
    return VertexBufferWebGL;
})();
module.exports = VertexBufferWebGL;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvdmVydGV4YnVmZmVyd2ViZ2wudHMiXSwibmFtZXMiOlsiVmVydGV4QnVmZmVyV2ViR0wiLCJWZXJ0ZXhCdWZmZXJXZWJHTC5jb25zdHJ1Y3RvciIsIlZlcnRleEJ1ZmZlcldlYkdMLnVwbG9hZEZyb21BcnJheSIsIlZlcnRleEJ1ZmZlcldlYkdMLm51bVZlcnRpY2VzIiwiVmVydGV4QnVmZmVyV2ViR0wuZGF0YTMyUGVyVmVydGV4IiwiVmVydGV4QnVmZmVyV2ViR0wuZ2xCdWZmZXIiLCJWZXJ0ZXhCdWZmZXJXZWJHTC5kaXNwb3NlIl0sIm1hcHBpbmdzIjoiQUFFQSxJQUFNLGlCQUFpQjtJQVF0QkEsU0FSS0EsaUJBQWlCQSxDQVFWQSxFQUF3QkEsRUFBRUEsV0FBa0JBLEVBQUVBLGVBQXNCQTtRQUUvRUMsSUFBSUEsQ0FBQ0EsR0FBR0EsR0FBR0EsRUFBRUEsQ0FBQ0E7UUFDZEEsSUFBSUEsQ0FBQ0EsT0FBT0EsR0FBR0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsQ0FBQ0E7UUFDdkNBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLFdBQVdBLENBQUNBO1FBQ2hDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLEdBQUdBLGVBQWVBLENBQUNBO0lBQ3pDQSxDQUFDQTtJQUVNRCwyQ0FBZUEsR0FBdEJBLFVBQXVCQSxRQUFpQkEsRUFBRUEsV0FBa0JBLEVBQUVBLFdBQWtCQTtRQUUvRUUsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0E7UUFFekRBLEFBRUFBLHNHQUZzR0E7UUFDdEdBLHNFQUFzRUE7UUFDdEVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFVBQVVBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLFlBQVlBLENBQUNBLFFBQVFBLENBQUNBLEVBQUVBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFdBQVdBLENBQUNBLENBQUNBO0lBQzlGQSxDQUFDQTtJQUVERixzQkFBV0EsMENBQVdBO2FBQXRCQTtZQUVDRyxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQTtRQUMxQkEsQ0FBQ0E7OztPQUFBSDtJQUVEQSxzQkFBV0EsOENBQWVBO2FBQTFCQTtZQUVDSSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxnQkFBZ0JBLENBQUNBO1FBQzlCQSxDQUFDQTs7O09BQUFKO0lBRURBLHNCQUFXQSx1Q0FBUUE7YUFBbkJBO1lBRUNLLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBO1FBQ3JCQSxDQUFDQTs7O09BQUFMO0lBRU1BLG1DQUFPQSxHQUFkQTtRQUVDTSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxDQUFDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtJQUNyQ0EsQ0FBQ0E7SUFDRk4sd0JBQUNBO0FBQURBLENBNUNBLEFBNENDQSxJQUFBO0FBRUQsQUFBMkIsaUJBQWxCLGlCQUFpQixDQUFDIiwiZmlsZSI6ImNvcmUvc3RhZ2VnbC9WZXJ0ZXhCdWZmZXJXZWJHTC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSVZlcnRleEJ1ZmZlclx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JVmVydGV4QnVmZmVyXCIpO1xuXG5jbGFzcyBWZXJ0ZXhCdWZmZXJXZWJHTCBpbXBsZW1lbnRzIElWZXJ0ZXhCdWZmZXJcbntcblxuXHRwcml2YXRlIF9nbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQ7XG5cdHByaXZhdGUgX251bVZlcnRpY2VzOm51bWJlcjtcblx0cHJpdmF0ZSBfZGF0YTMyUGVyVmVydGV4Om51bWJlcjtcblx0cHJpdmF0ZSBfYnVmZmVyOldlYkdMQnVmZmVyO1xuXG5cdGNvbnN0cnVjdG9yKGdsOldlYkdMUmVuZGVyaW5nQ29udGV4dCwgbnVtVmVydGljZXM6bnVtYmVyLCBkYXRhMzJQZXJWZXJ0ZXg6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fZ2wgPSBnbDtcblx0XHR0aGlzLl9idWZmZXIgPSB0aGlzLl9nbC5jcmVhdGVCdWZmZXIoKTtcblx0XHR0aGlzLl9udW1WZXJ0aWNlcyA9IG51bVZlcnRpY2VzO1xuXHRcdHRoaXMuX2RhdGEzMlBlclZlcnRleCA9IGRhdGEzMlBlclZlcnRleDtcblx0fVxuXG5cdHB1YmxpYyB1cGxvYWRGcm9tQXJyYXkodmVydGljZXM6bnVtYmVyW10sIHN0YXJ0VmVydGV4Om51bWJlciwgbnVtVmVydGljZXM6bnVtYmVyKVxuXHR7XG5cdFx0dGhpcy5fZ2wuYmluZEJ1ZmZlcih0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIHRoaXMuX2J1ZmZlcik7XG5cblx0XHQvL2NvbnNvbGUubG9nKCBcIioqIFdBUk5JTkcgdXBsb2FkIG5vdCBmdWxseSBpbXBsZW1lbnRlZCwgc3RhcnRWZXJ0ZXggJiBudW1WZXJ0aWNlcyBub3QgY29uc2lkZXJlZC5cIiApO1xuXHRcdC8vIFRPRE8gYWRkIG9mZnNldHMgLCBzdGFydFZlcnRleCwgbnVtVmVydGljZXMgKiB0aGlzLl9kYXRhMzJQZXJWZXJ0ZXhcblx0XHR0aGlzLl9nbC5idWZmZXJEYXRhKHRoaXMuX2dsLkFSUkFZX0JVRkZFUiwgbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlcyksIHRoaXMuX2dsLlNUQVRJQ19EUkFXKTtcblx0fVxuXG5cdHB1YmxpYyBnZXQgbnVtVmVydGljZXMoKTpudW1iZXJcblx0e1xuXHRcdHJldHVybiB0aGlzLl9udW1WZXJ0aWNlcztcblx0fVxuXG5cdHB1YmxpYyBnZXQgZGF0YTMyUGVyVmVydGV4KCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fZGF0YTMyUGVyVmVydGV4O1xuXHR9XG5cblx0cHVibGljIGdldCBnbEJ1ZmZlcigpOldlYkdMQnVmZmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fYnVmZmVyO1xuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKVxuXHR7XG5cdFx0dGhpcy5fZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2J1ZmZlcik7XG5cdH1cbn1cblxuZXhwb3J0ID0gVmVydGV4QnVmZmVyV2ViR0w7Il19