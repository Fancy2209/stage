var VertexBufferWebGL = (function () {
    function VertexBufferWebGL(gl, numVertices, data32PerVertex) {
        this._gl = gl;
        this._buffer = this._gl.createBuffer();
        this._numVertices = numVertices;
        this._data32PerVertex = data32PerVertex;
    }
    VertexBufferWebGL.prototype.uploadFromArray = function (vertices, startVertex, numVertices) {
        this._gl.bindBuffer(this._gl.ARRAY_BUFFER, this._buffer);
        //console.log( "** WARNING upload not fully implemented, startVertex & numVertices not considered." );
        // TODO add offsets , startVertex, numVertices * this._data32PerVertex
        this._gl.bufferData(this._gl.ARRAY_BUFFER, new Float32Array(vertices), this._gl.STATIC_DRAW);
    };
    Object.defineProperty(VertexBufferWebGL.prototype, "numVertices", {
        get: function () {
            return this._numVertices;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexBufferWebGL.prototype, "data32PerVertex", {
        get: function () {
            return this._data32PerVertex;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(VertexBufferWebGL.prototype, "glBuffer", {
        get: function () {
            return this._buffer;
        },
        enumerable: true,
        configurable: true
    });
    VertexBufferWebGL.prototype.dispose = function () {
        this._gl.deleteBuffer(this._buffer);
    };
    return VertexBufferWebGL;
})();
module.exports = VertexBufferWebGL;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvc3RhZ2VnbC92ZXJ0ZXhidWZmZXJ3ZWJnbC50cyJdLCJuYW1lcyI6WyJWZXJ0ZXhCdWZmZXJXZWJHTCIsIlZlcnRleEJ1ZmZlcldlYkdMLmNvbnN0cnVjdG9yIiwiVmVydGV4QnVmZmVyV2ViR0wudXBsb2FkRnJvbUFycmF5IiwiVmVydGV4QnVmZmVyV2ViR0wubnVtVmVydGljZXMiLCJWZXJ0ZXhCdWZmZXJXZWJHTC5kYXRhMzJQZXJWZXJ0ZXgiLCJWZXJ0ZXhCdWZmZXJXZWJHTC5nbEJ1ZmZlciIsIlZlcnRleEJ1ZmZlcldlYkdMLmRpc3Bvc2UiXSwibWFwcGluZ3MiOiJBQUVBLElBQU0saUJBQWlCO0lBUXRCQSxTQVJLQSxpQkFBaUJBLENBUVZBLEVBQXdCQSxFQUFFQSxXQUFrQkEsRUFBRUEsZUFBc0JBO1FBRS9FQyxJQUFJQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQTtRQUNkQSxJQUFJQSxDQUFDQSxPQUFPQSxHQUFHQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxFQUFFQSxDQUFDQTtRQUN2Q0EsSUFBSUEsQ0FBQ0EsWUFBWUEsR0FBR0EsV0FBV0EsQ0FBQ0E7UUFDaENBLElBQUlBLENBQUNBLGdCQUFnQkEsR0FBR0EsZUFBZUEsQ0FBQ0E7SUFDekNBLENBQUNBO0lBRU1ELDJDQUFlQSxHQUF0QkEsVUFBdUJBLFFBQWlCQSxFQUFFQSxXQUFrQkEsRUFBRUEsV0FBa0JBO1FBRS9FRSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxVQUFVQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxDQUFDQSxZQUFZQSxFQUFFQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQTtRQUV6REEsQUFFQUEsc0dBRnNHQTtRQUN0R0Esc0VBQXNFQTtRQUN0RUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsVUFBVUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsWUFBWUEsRUFBRUEsSUFBSUEsWUFBWUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsRUFBRUEsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsQ0FBQ0E7SUFDOUZBLENBQUNBO0lBRURGLHNCQUFXQSwwQ0FBV0E7YUFBdEJBO1lBRUNHLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBO1FBQzFCQSxDQUFDQTs7O09BQUFIO0lBRURBLHNCQUFXQSw4Q0FBZUE7YUFBMUJBO1lBRUNJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLGdCQUFnQkEsQ0FBQ0E7UUFDOUJBLENBQUNBOzs7T0FBQUo7SUFFREEsc0JBQVdBLHVDQUFRQTthQUFuQkE7WUFFQ0ssTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsT0FBT0EsQ0FBQ0E7UUFDckJBLENBQUNBOzs7T0FBQUw7SUFFTUEsbUNBQU9BLEdBQWRBO1FBRUNNLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLFlBQVlBLENBQUNBLElBQUlBLENBQUNBLE9BQU9BLENBQUNBLENBQUNBO0lBQ3JDQSxDQUFDQTtJQUNGTix3QkFBQ0E7QUFBREEsQ0E1Q0EsQUE0Q0NBLElBQUE7QUFFRCxBQUEyQixpQkFBbEIsaUJBQWlCLENBQUMiLCJmaWxlIjoiY29yZS9zdGFnZWdsL1ZlcnRleEJ1ZmZlcldlYkdMLmpzIiwic291cmNlUm9vdCI6Ii9Vc2Vycy9yb2JiYXRlbWFuL1dlYnN0b3JtUHJvamVjdHMvYXdheWpzLXN0YWdlZ2wvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IElWZXJ0ZXhCdWZmZXJcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvSVZlcnRleEJ1ZmZlclwiKTtcblxuY2xhc3MgVmVydGV4QnVmZmVyV2ViR0wgaW1wbGVtZW50cyBJVmVydGV4QnVmZmVyXG57XG5cblx0cHJpdmF0ZSBfZ2w6V2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuXHRwcml2YXRlIF9udW1WZXJ0aWNlczpudW1iZXI7XG5cdHByaXZhdGUgX2RhdGEzMlBlclZlcnRleDpudW1iZXI7XG5cdHByaXZhdGUgX2J1ZmZlcjpXZWJHTEJ1ZmZlcjtcblxuXHRjb25zdHJ1Y3RvcihnbDpXZWJHTFJlbmRlcmluZ0NvbnRleHQsIG51bVZlcnRpY2VzOm51bWJlciwgZGF0YTMyUGVyVmVydGV4Om51bWJlcilcblx0e1xuXHRcdHRoaXMuX2dsID0gZ2w7XG5cdFx0dGhpcy5fYnVmZmVyID0gdGhpcy5fZ2wuY3JlYXRlQnVmZmVyKCk7XG5cdFx0dGhpcy5fbnVtVmVydGljZXMgPSBudW1WZXJ0aWNlcztcblx0XHR0aGlzLl9kYXRhMzJQZXJWZXJ0ZXggPSBkYXRhMzJQZXJWZXJ0ZXg7XG5cdH1cblxuXHRwdWJsaWMgdXBsb2FkRnJvbUFycmF5KHZlcnRpY2VzOm51bWJlcltdLCBzdGFydFZlcnRleDpudW1iZXIsIG51bVZlcnRpY2VzOm51bWJlcilcblx0e1xuXHRcdHRoaXMuX2dsLmJpbmRCdWZmZXIodGhpcy5fZ2wuQVJSQVlfQlVGRkVSLCB0aGlzLl9idWZmZXIpO1xuXG5cdFx0Ly9jb25zb2xlLmxvZyggXCIqKiBXQVJOSU5HIHVwbG9hZCBub3QgZnVsbHkgaW1wbGVtZW50ZWQsIHN0YXJ0VmVydGV4ICYgbnVtVmVydGljZXMgbm90IGNvbnNpZGVyZWQuXCIgKTtcblx0XHQvLyBUT0RPIGFkZCBvZmZzZXRzICwgc3RhcnRWZXJ0ZXgsIG51bVZlcnRpY2VzICogdGhpcy5fZGF0YTMyUGVyVmVydGV4XG5cdFx0dGhpcy5fZ2wuYnVmZmVyRGF0YSh0aGlzLl9nbC5BUlJBWV9CVUZGRVIsIG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXMpLCB0aGlzLl9nbC5TVEFUSUNfRFJBVyk7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IG51bVZlcnRpY2VzKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fbnVtVmVydGljZXM7XG5cdH1cblxuXHRwdWJsaWMgZ2V0IGRhdGEzMlBlclZlcnRleCgpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2RhdGEzMlBlclZlcnRleDtcblx0fVxuXG5cdHB1YmxpYyBnZXQgZ2xCdWZmZXIoKTpXZWJHTEJ1ZmZlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX2J1ZmZlcjtcblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdHRoaXMuX2dsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9idWZmZXIpO1xuXHR9XG59XG5cbmV4cG9ydCA9IFZlcnRleEJ1ZmZlcldlYkdMOyJdfQ==