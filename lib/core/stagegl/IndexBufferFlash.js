var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var OpCodes = require("awayjs-stagegl/lib/core/stagegl/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/core/stagegl/ResourceBaseFlash");
var IndexBufferFlash = (function (_super) {
    __extends(IndexBufferFlash, _super);
    function IndexBufferFlash(context, numIndices) {
        _super.call(this);
        this._context = context;
        this._numIndices = numIndices;
        this._context.addStream(String.fromCharCode(OpCodes.initIndexBuffer, numIndices + OpCodes.intMask));
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    IndexBufferFlash.prototype.uploadFromArray = function (data, startOffset, count) {
        this._context.addStream(String.fromCharCode(OpCodes.uploadArrayIndexBuffer, this._pId + OpCodes.intMask) + data.join() + "#" + startOffset + "," + count + ",");
        this._context.execute();
    };
    IndexBufferFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeIndexBuffer, this._pId + OpCodes.intMask));
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    Object.defineProperty(IndexBufferFlash.prototype, "numIndices", {
        get: function () {
            return this._numIndices;
        },
        enumerable: true,
        configurable: true
    });
    return IndexBufferFlash;
})(ResourceBaseFlash);
module.exports = IndexBufferFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvc3RhZ2VnbC9pbmRleGJ1ZmZlcmZsYXNoLnRzIl0sIm5hbWVzIjpbIkluZGV4QnVmZmVyRmxhc2giLCJJbmRleEJ1ZmZlckZsYXNoLmNvbnN0cnVjdG9yIiwiSW5kZXhCdWZmZXJGbGFzaC51cGxvYWRGcm9tQXJyYXkiLCJJbmRleEJ1ZmZlckZsYXNoLmRpc3Bvc2UiLCJJbmRleEJ1ZmZlckZsYXNoLm51bUluZGljZXMiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUVBLElBQU8sT0FBTyxXQUFnQix5Q0FBeUMsQ0FBQyxDQUFDO0FBQ3pFLElBQU8saUJBQWlCLFdBQWEsbURBQW1ELENBQUMsQ0FBQztBQUUxRixJQUFNLGdCQUFnQjtJQUFTQSxVQUF6QkEsZ0JBQWdCQSxVQUEwQkE7SUFLL0NBLFNBTEtBLGdCQUFnQkEsQ0FLVEEsT0FBc0JBLEVBQUVBLFVBQWlCQTtRQUVwREMsaUJBQU9BLENBQUNBO1FBRVJBLElBQUlBLENBQUNBLFFBQVFBLEdBQUdBLE9BQU9BLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxXQUFXQSxHQUFHQSxVQUFVQSxDQUFDQTtRQUM5QkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0EsZUFBZUEsRUFBRUEsVUFBVUEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDcEdBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3BDQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxhQUFhQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtJQUNuQ0EsQ0FBQ0E7SUFFTUQsMENBQWVBLEdBQXRCQSxVQUF1QkEsSUFBYUEsRUFBRUEsV0FBa0JBLEVBQUVBLEtBQVlBO1FBRXJFRSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxzQkFBc0JBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLEdBQUdBLElBQUlBLENBQUNBLElBQUlBLEVBQUVBLEdBQUdBLEdBQUdBLEdBQUdBLFdBQVdBLEdBQUdBLEdBQUdBLEdBQUdBLEtBQUtBLEdBQUdBLEdBQUdBLENBQUNBLENBQUNBO1FBQ2hLQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFFTUYsa0NBQU9BLEdBQWRBO1FBRUNHLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLGtCQUFrQkEsRUFBRUEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsT0FBT0EsQ0FBQ0EsT0FBT0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDdEdBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ3hCQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxnQkFBZ0JBLENBQUNBLElBQUlBLENBQUNBLENBQUNBO1FBRXJDQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN0QkEsQ0FBQ0E7SUFFREgsc0JBQVdBLHdDQUFVQTthQUFyQkE7WUFFQ0ksTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFDekJBLENBQUNBOzs7T0FBQUo7SUFDRkEsdUJBQUNBO0FBQURBLENBbkNBLEFBbUNDQSxFQW5DOEIsaUJBQWlCLEVBbUMvQztBQUVELEFBQTBCLGlCQUFqQixnQkFBZ0IsQ0FBQyIsImZpbGUiOiJjb3JlL3N0YWdlZ2wvSW5kZXhCdWZmZXJGbGFzaC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1zdGFnZWdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb250ZXh0U3RhZ2UzRFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9Db250ZXh0U3RhZ2UzRFwiKTtcbmltcG9ydCBJSW5kZXhCdWZmZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9JSW5kZXhCdWZmZXJcIik7XG5pbXBvcnQgT3BDb2Rlc1x0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvT3BDb2Rlc1wiKTtcbmltcG9ydCBSZXNvdXJjZUJhc2VGbGFzaFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvUmVzb3VyY2VCYXNlRmxhc2hcIik7XG5cbmNsYXNzIEluZGV4QnVmZmVyRmxhc2ggZXh0ZW5kcyBSZXNvdXJjZUJhc2VGbGFzaCBpbXBsZW1lbnRzIElJbmRleEJ1ZmZlclxue1xuXHRwcml2YXRlIF9jb250ZXh0OkNvbnRleHRTdGFnZTNEO1xuXHRwcml2YXRlIF9udW1JbmRpY2VzOm51bWJlcjtcblxuXHRjb25zdHJ1Y3Rvcihjb250ZXh0OkNvbnRleHRTdGFnZTNELCBudW1JbmRpY2VzOm51bWJlcilcblx0e1xuXHRcdHN1cGVyKCk7XG5cblx0XHR0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcblx0XHR0aGlzLl9udW1JbmRpY2VzID0gbnVtSW5kaWNlcztcblx0XHR0aGlzLl9jb250ZXh0LmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuaW5pdEluZGV4QnVmZmVyLCBudW1JbmRpY2VzICsgT3BDb2Rlcy5pbnRNYXNrKSk7XG5cdFx0dGhpcy5fcElkID0gdGhpcy5fY29udGV4dC5leGVjdXRlKCk7XG5cdFx0dGhpcy5fY29udGV4dC5faUFkZFJlc291cmNlKHRoaXMpO1xuXHR9XG5cblx0cHVibGljIHVwbG9hZEZyb21BcnJheShkYXRhOm51bWJlcltdLCBzdGFydE9mZnNldDpudW1iZXIsIGNvdW50Om51bWJlcik6dm9pZFxuXHR7XG5cdFx0dGhpcy5fY29udGV4dC5hZGRTdHJlYW0oU3RyaW5nLmZyb21DaGFyQ29kZShPcENvZGVzLnVwbG9hZEFycmF5SW5kZXhCdWZmZXIsIHRoaXMuX3BJZCArIE9wQ29kZXMuaW50TWFzaykgKyBkYXRhLmpvaW4oKSArIFwiI1wiICsgc3RhcnRPZmZzZXQgKyBcIixcIiArIGNvdW50ICsgXCIsXCIpO1xuXHRcdHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xuXHR9XG5cblx0cHVibGljIGRpc3Bvc2UoKTp2b2lkXG5cdHtcblx0XHR0aGlzLl9jb250ZXh0LmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMuZGlzcG9zZUluZGV4QnVmZmVyLCB0aGlzLl9wSWQgKyBPcENvZGVzLmludE1hc2spKTtcblx0XHR0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcblx0XHR0aGlzLl9jb250ZXh0Ll9pUmVtb3ZlUmVzb3VyY2UodGhpcyk7XG5cblx0XHR0aGlzLl9jb250ZXh0ID0gbnVsbDtcblx0fVxuXG5cdHB1YmxpYyBnZXQgbnVtSW5kaWNlcygpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX251bUluZGljZXM7XG5cdH1cbn1cblxuZXhwb3J0ID0gSW5kZXhCdWZmZXJGbGFzaDsiXX0=