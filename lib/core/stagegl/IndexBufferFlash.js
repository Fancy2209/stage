var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var OpCodes = require("awayjs-stagegl/lib/core/stagegl/OpCodes");
var ResourceBaseFlash = require("awayjs-stagegl/lib/core/stagegl/ResourceBaseFlash");
var IndexBufferFlash = (function (_super) {
    __extends(IndexBufferFlash, _super);
    function IndexBufferFlash(context, numIndices) {
        _super.call(this);
        this._context = context;
        this._numIndices = numIndices;
        this._context.addStream(String.fromCharCode(OpCodes.initIndexBuffer, numIndices + OpCodes.intMask));
        this._pId = this._context.execute();
        this._context._iAddResource(this);
    }
    IndexBufferFlash.prototype.uploadFromArray = function (data, startOffset, count) {
        this._context.addStream(String.fromCharCode(OpCodes.uploadArrayIndexBuffer, this._pId + OpCodes.intMask) + data.join() + "#" + startOffset + "," + count + ",");
        this._context.execute();
    };
    IndexBufferFlash.prototype.dispose = function () {
        this._context.addStream(String.fromCharCode(OpCodes.disposeIndexBuffer, this._pId + OpCodes.intMask));
        this._context.execute();
        this._context._iRemoveResource(this);
        this._context = null;
    };
    Object.defineProperty(IndexBufferFlash.prototype, "numIndices", {
        get: function () {
            return this._numIndices;
        },
        enumerable: true,
        configurable: true
    });
    return IndexBufferFlash;
})(ResourceBaseFlash);
module.exports = IndexBufferFlash;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3N0YWdlZ2wvaW5kZXhidWZmZXJmbGFzaC50cyJdLCJuYW1lcyI6WyJJbmRleEJ1ZmZlckZsYXNoIiwiSW5kZXhCdWZmZXJGbGFzaC5jb25zdHJ1Y3RvciIsIkluZGV4QnVmZmVyRmxhc2gudXBsb2FkRnJvbUFycmF5IiwiSW5kZXhCdWZmZXJGbGFzaC5kaXNwb3NlIiwiSW5kZXhCdWZmZXJGbGFzaC5udW1JbmRpY2VzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFFQSxJQUFPLE9BQU8sV0FBZ0IseUNBQXlDLENBQUMsQ0FBQztBQUN6RSxJQUFPLGlCQUFpQixXQUFhLG1EQUFtRCxDQUFDLENBQUM7QUFFMUYsSUFBTSxnQkFBZ0I7SUFBU0EsVUFBekJBLGdCQUFnQkEsVUFBMEJBO0lBSy9DQSxTQUxLQSxnQkFBZ0JBLENBS1RBLE9BQXNCQSxFQUFFQSxVQUFpQkE7UUFFcERDLGlCQUFPQSxDQUFDQTtRQUVSQSxJQUFJQSxDQUFDQSxRQUFRQSxHQUFHQSxPQUFPQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsV0FBV0EsR0FBR0EsVUFBVUEsQ0FBQ0E7UUFDOUJBLElBQUlBLENBQUNBLFFBQVFBLENBQUNBLFNBQVNBLENBQUNBLE1BQU1BLENBQUNBLFlBQVlBLENBQUNBLE9BQU9BLENBQUNBLGVBQWVBLEVBQUVBLFVBQVVBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1FBQ3BHQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUNwQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsYUFBYUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7SUFDbkNBLENBQUNBO0lBRU1ELDBDQUFlQSxHQUF0QkEsVUFBdUJBLElBQWFBLEVBQUVBLFdBQWtCQSxFQUFFQSxLQUFZQTtRQUVyRUUsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsT0FBT0EsQ0FBQ0Esc0JBQXNCQSxFQUFFQSxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxPQUFPQSxDQUFDQSxPQUFPQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxJQUFJQSxFQUFFQSxHQUFHQSxHQUFHQSxHQUFHQSxXQUFXQSxHQUFHQSxHQUFHQSxHQUFHQSxLQUFLQSxHQUFHQSxHQUFHQSxDQUFDQSxDQUFDQTtRQUNoS0EsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7SUFDekJBLENBQUNBO0lBRU1GLGtDQUFPQSxHQUFkQTtRQUVDRyxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxTQUFTQSxDQUFDQSxNQUFNQSxDQUFDQSxZQUFZQSxDQUFDQSxPQUFPQSxDQUFDQSxrQkFBa0JBLEVBQUVBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLE9BQU9BLENBQUNBLE9BQU9BLENBQUNBLENBQUNBLENBQUNBO1FBQ3RHQSxJQUFJQSxDQUFDQSxRQUFRQSxDQUFDQSxPQUFPQSxFQUFFQSxDQUFDQTtRQUN4QkEsSUFBSUEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQTtRQUVyQ0EsSUFBSUEsQ0FBQ0EsUUFBUUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDdEJBLENBQUNBO0lBRURILHNCQUFXQSx3Q0FBVUE7YUFBckJBO1lBRUNJLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBO1FBQ3pCQSxDQUFDQTs7O09BQUFKO0lBQ0ZBLHVCQUFDQTtBQUFEQSxDQW5DQSxBQW1DQ0EsRUFuQzhCLGlCQUFpQixFQW1DL0M7QUFFRCxBQUEwQixpQkFBakIsZ0JBQWdCLENBQUMiLCJmaWxlIjoiY29yZS9zdGFnZWdsL0luZGV4QnVmZmVyRmxhc2guanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IENvbnRleHRTdGFnZTNEXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0NvbnRleHRTdGFnZTNEXCIpO1xuaW1wb3J0IElJbmRleEJ1ZmZlclx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvY29yZS9zdGFnZWdsL0lJbmRleEJ1ZmZlclwiKTtcbmltcG9ydCBPcENvZGVzXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9PcENvZGVzXCIpO1xuaW1wb3J0IFJlc291cmNlQmFzZUZsYXNoXHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvc3RhZ2VnbC9SZXNvdXJjZUJhc2VGbGFzaFwiKTtcblxuY2xhc3MgSW5kZXhCdWZmZXJGbGFzaCBleHRlbmRzIFJlc291cmNlQmFzZUZsYXNoIGltcGxlbWVudHMgSUluZGV4QnVmZmVyXG57XG5cdHByaXZhdGUgX2NvbnRleHQ6Q29udGV4dFN0YWdlM0Q7XG5cdHByaXZhdGUgX251bUluZGljZXM6bnVtYmVyO1xuXG5cdGNvbnN0cnVjdG9yKGNvbnRleHQ6Q29udGV4dFN0YWdlM0QsIG51bUluZGljZXM6bnVtYmVyKVxuXHR7XG5cdFx0c3VwZXIoKTtcblxuXHRcdHRoaXMuX2NvbnRleHQgPSBjb250ZXh0O1xuXHRcdHRoaXMuX251bUluZGljZXMgPSBudW1JbmRpY2VzO1xuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5pbml0SW5kZXhCdWZmZXIsIG51bUluZGljZXMgKyBPcENvZGVzLmludE1hc2spKTtcblx0XHR0aGlzLl9wSWQgPSB0aGlzLl9jb250ZXh0LmV4ZWN1dGUoKTtcblx0XHR0aGlzLl9jb250ZXh0Ll9pQWRkUmVzb3VyY2UodGhpcyk7XG5cdH1cblxuXHRwdWJsaWMgdXBsb2FkRnJvbUFycmF5KGRhdGE6bnVtYmVyW10sIHN0YXJ0T2Zmc2V0Om51bWJlciwgY291bnQ6bnVtYmVyKTp2b2lkXG5cdHtcblx0XHR0aGlzLl9jb250ZXh0LmFkZFN0cmVhbShTdHJpbmcuZnJvbUNoYXJDb2RlKE9wQ29kZXMudXBsb2FkQXJyYXlJbmRleEJ1ZmZlciwgdGhpcy5fcElkICsgT3BDb2Rlcy5pbnRNYXNrKSArIGRhdGEuam9pbigpICsgXCIjXCIgKyBzdGFydE9mZnNldCArIFwiLFwiICsgY291bnQgKyBcIixcIik7XG5cdFx0dGhpcy5fY29udGV4dC5leGVjdXRlKCk7XG5cdH1cblxuXHRwdWJsaWMgZGlzcG9zZSgpOnZvaWRcblx0e1xuXHRcdHRoaXMuX2NvbnRleHQuYWRkU3RyZWFtKFN0cmluZy5mcm9tQ2hhckNvZGUoT3BDb2Rlcy5kaXNwb3NlSW5kZXhCdWZmZXIsIHRoaXMuX3BJZCArIE9wQ29kZXMuaW50TWFzaykpO1xuXHRcdHRoaXMuX2NvbnRleHQuZXhlY3V0ZSgpO1xuXHRcdHRoaXMuX2NvbnRleHQuX2lSZW1vdmVSZXNvdXJjZSh0aGlzKTtcblxuXHRcdHRoaXMuX2NvbnRleHQgPSBudWxsO1xuXHR9XG5cblx0cHVibGljIGdldCBudW1JbmRpY2VzKCk6bnVtYmVyXG5cdHtcblx0XHRyZXR1cm4gdGhpcy5fbnVtSW5kaWNlcztcblx0fVxufVxuXG5leHBvcnQgPSBJbmRleEJ1ZmZlckZsYXNoOyJdfQ==