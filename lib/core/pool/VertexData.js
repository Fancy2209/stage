var SubGeometryBase = require("awayjs-core/lib/core/base/SubGeometryBase");
var SubGeometryEvent = require("awayjs-core/lib/events/SubGeometryEvent");
/**
 *
 */
var VertexData = (function () {
    function VertexData(subGeometry, dataType) {
        var _this = this;
        this._dataDirty = true;
        this.invalid = new Array(8);
        this.buffers = new Array(8);
        this.contexts = new Array(8);
        this._subGeometry = subGeometry;
        this._dataType = dataType;
        this._onVerticesUpdatedDelegate = function (event) { return _this._onVerticesUpdated(event); };
        this._subGeometry.addEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
    }
    VertexData.prototype.updateData = function (originalIndices, indexMappings) {
        if (originalIndices === void 0) { originalIndices = null; }
        if (indexMappings === void 0) { indexMappings = null; }
        if (this._dataDirty) {
            this._dataDirty = false;
            this.dataPerVertex = this._subGeometry.getStride(this._dataType);
            var vertices = this._subGeometry[this._dataType];
            if (indexMappings == null) {
                this.setData(vertices);
            }
            else {
                var splitVerts = new Array(originalIndices.length * this.dataPerVertex);
                var originalIndex;
                var splitIndex;
                var i = 0;
                var j = 0;
                while (i < originalIndices.length) {
                    originalIndex = originalIndices[i];
                    splitIndex = indexMappings[originalIndex] * this.dataPerVertex;
                    originalIndex *= this.dataPerVertex;
                    for (j = 0; j < this.dataPerVertex; j++)
                        splitVerts[splitIndex + j] = vertices[originalIndex + j];
                    i++;
                }
                this.setData(splitVerts);
            }
        }
    };
    VertexData.prototype.dispose = function () {
        for (var i = 0; i < 8; ++i) {
            if (this.contexts[i]) {
                this.contexts[i].disposeVertexData(this);
                this.contexts[i] = null;
            }
        }
    };
    /**
     * @private
     */
    VertexData.prototype.disposeBuffers = function () {
        for (var i = 0; i < 8; ++i) {
            if (this.buffers[i]) {
                this.buffers[i].dispose();
                this.buffers[i] = null;
            }
        }
    };
    /**
     * @private
     */
    VertexData.prototype.invalidateBuffers = function () {
        for (var i = 0; i < 8; ++i)
            this.invalid[i] = true;
    };
    /**
     *
     * @param data
     * @param dataPerVertex
     * @private
     */
    VertexData.prototype.setData = function (data) {
        if (this.data && this.data.length != data.length)
            this.disposeBuffers();
        else
            this.invalidateBuffers();
        this.data = data;
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    VertexData.prototype._onVerticesUpdated = function (event) {
        var dataType = this._subGeometry.concatenateArrays ? SubGeometryBase.VERTEX_DATA : event.dataType;
        if (dataType == this._dataType)
            this._dataDirty = true;
    };
    return VertexData;
})();
module.exports = VertexData;

//# sourceMappingURL=data:application/json;base64,