var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var RenderableBase = require("awayjs-stagegl/lib/core/pool/RenderableBase");
var ContextGLVertexBufferFormat = require("awayjs-stagegl/lib/core/stagegl/ContextGLVertexBufferFormat");
/**
 * @class away.pool.TriangleSubMeshRenderable
 */
var TriangleSubMeshRenderable = (function (_super) {
    __extends(TriangleSubMeshRenderable, _super);
    /**
     * //TODO
     *
     * @param pool
     * @param subMesh
     * @param level
     * @param indexOffset
     */
    function TriangleSubMeshRenderable(pool, subMesh, level, indexOffset) {
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        _super.call(this, pool, subMesh.parentMesh, subMesh, level, indexOffset);
        this.subMesh = subMesh;
    }
    /**
     *
     * @returns {SubGeometryBase}
     * @protected
     */
    TriangleSubMeshRenderable.prototype._pGetSubGeometry = function () {
        var subGeometry;
        if (this.subMesh.animator)
            subGeometry = this.subMesh.animator.getRenderableSubGeometry(this, this.subMesh.subGeometry);
        else
            subGeometry = this.subMesh.subGeometry;
        this._pVertexDataDirty[TriangleSubGeometry.POSITION_DATA] = true;
        if (subGeometry.vertexNormals)
            this._pVertexDataDirty[TriangleSubGeometry.NORMAL_DATA] = true;
        if (subGeometry.vertexTangents)
            this._pVertexDataDirty[TriangleSubGeometry.TANGENT_DATA] = true;
        if (subGeometry.uvs)
            this._pVertexDataDirty[TriangleSubGeometry.UV_DATA] = true;
        if (subGeometry.secondaryUVs)
            this._pVertexDataDirty[TriangleSubGeometry.SECONDARY_UV_DATA] = true;
        if (subGeometry.jointIndices)
            this._pVertexDataDirty[TriangleSubGeometry.JOINT_INDEX_DATA] = true;
        if (subGeometry.jointWeights)
            this._pVertexDataDirty[TriangleSubGeometry.JOINT_WEIGHT_DATA] = true;
        switch (subGeometry.jointsPerVertex) {
            case 1:
                this.JOINT_INDEX_FORMAT = this.JOINT_WEIGHT_FORMAT = ContextGLVertexBufferFormat.FLOAT_1;
                break;
            case 2:
                this.JOINT_INDEX_FORMAT = this.JOINT_WEIGHT_FORMAT = ContextGLVertexBufferFormat.FLOAT_2;
                break;
            case 3:
                this.JOINT_INDEX_FORMAT = this.JOINT_WEIGHT_FORMAT = ContextGLVertexBufferFormat.FLOAT_3;
                break;
            case 4:
                this.JOINT_INDEX_FORMAT = this.JOINT_WEIGHT_FORMAT = ContextGLVertexBufferFormat.FLOAT_4;
                break;
            default:
        }
        return subGeometry;
    };
    /**
     * //TODO
     *
     * @param pool
     * @param materialOwner
     * @param level
     * @param indexOffset
     * @returns {away.pool.TriangleSubMeshRenderable}
     * @protected
     */
    TriangleSubMeshRenderable.prototype._pGetOverflowRenderable = function (pool, materialOwner, level, indexOffset) {
        return new TriangleSubMeshRenderable(pool, materialOwner, level, indexOffset);
    };
    /**
     *
     */
    TriangleSubMeshRenderable.id = "trianglesubmesh";
    return TriangleSubMeshRenderable;
})(RenderableBase);
module.exports = TriangleSubMeshRenderable;

//# sourceMappingURL=data:application/json;base64,