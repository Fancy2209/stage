var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var TriangleSubGeometry = require("awayjs-core/lib/core/base/TriangleSubGeometry");
var RenderableBase = require("awayjs-stagegl/lib/core/pool/RenderableBase");
/**
 * @class away.pool.SkyboxRenderable
 */
var SkyboxRenderable = (function (_super) {
    __extends(SkyboxRenderable, _super);
    /**
     * //TODO
     *
     * @param pool
     * @param skybox
     */
    function SkyboxRenderable(pool, skybox) {
        _super.call(this, pool, skybox, skybox);
    }
    /**
     * //TODO
     *
     * @returns {away.base.TriangleSubGeometry}
     * @private
     */
    SkyboxRenderable.prototype._pGetSubGeometry = function () {
        var geometry = SkyboxRenderable._geometry;
        if (!geometry) {
            geometry = SkyboxRenderable._geometry = new TriangleSubGeometry(true);
            geometry.autoDeriveNormals = false;
            geometry.autoDeriveTangents = false;
            geometry.updateIndices(Array(0, 1, 2, 2, 3, 0, 6, 5, 4, 4, 7, 6, 2, 6, 7, 7, 3, 2, 4, 5, 1, 1, 0, 4, 4, 0, 3, 3, 7, 4, 2, 1, 5, 5, 6, 2));
            geometry.updatePositions(Array(-1, 1, -1, 1, 1, -1, 1, 1, 1, -1, 1, 1, -1, -1, -1, 1, -1, -1, 1, -1, 1, -1, -1, 1));
        }
        this._pVertexDataDirty[TriangleSubGeometry.POSITION_DATA] = true;
        return geometry;
    };
    /**
     *
     */
    SkyboxRenderable.id = "skybox";
    return SkyboxRenderable;
})(RenderableBase);
module.exports = SkyboxRenderable;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvcG9vbC9za3lib3hyZW5kZXJhYmxlLnRzIl0sIm5hbWVzIjpbIlNreWJveFJlbmRlcmFibGUiLCJTa3lib3hSZW5kZXJhYmxlLmNvbnN0cnVjdG9yIiwiU2t5Ym94UmVuZGVyYWJsZS5fcEdldFN1Ykdlb21ldHJ5Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFPLG1CQUFtQixXQUFhLCtDQUErQyxDQUFDLENBQUM7QUFJeEYsSUFBTyxjQUFjLFdBQWMsNkNBQTZDLENBQUMsQ0FBQztBQUVsRixBQUdBOztHQURHO0lBQ0csZ0JBQWdCO0lBQVNBLFVBQXpCQSxnQkFBZ0JBLFVBQXVCQTtJQVk1Q0E7Ozs7O09BS0dBO0lBQ0hBLFNBbEJLQSxnQkFBZ0JBLENBa0JUQSxJQUFtQkEsRUFBRUEsTUFBYUE7UUFFN0NDLGtCQUFNQSxJQUFJQSxFQUFFQSxNQUFNQSxFQUFFQSxNQUFNQSxDQUFDQSxDQUFDQTtJQUM3QkEsQ0FBQ0E7SUFFREQ7Ozs7O09BS0dBO0lBQ0lBLDJDQUFnQkEsR0FBdkJBO1FBRUNFLElBQUlBLFFBQVFBLEdBQXVCQSxnQkFBZ0JBLENBQUNBLFNBQVNBLENBQUNBO1FBRTlEQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUNmQSxRQUFRQSxHQUFHQSxnQkFBZ0JBLENBQUNBLFNBQVNBLEdBQUdBLElBQUlBLG1CQUFtQkEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0E7WUFDdEVBLFFBQVFBLENBQUNBLGlCQUFpQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDbkNBLFFBQVFBLENBQUNBLGtCQUFrQkEsR0FBR0EsS0FBS0EsQ0FBQ0E7WUFDcENBLFFBQVFBLENBQUNBLGFBQWFBLENBQUNBLEtBQUtBLENBQVNBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBO1lBQ2xKQSxRQUFRQSxDQUFDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFTQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM3SEEsQ0FBQ0E7UUFFREEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQSxtQkFBbUJBLENBQUNBLGFBQWFBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO1FBRWpFQSxNQUFNQSxDQUFDQSxRQUFRQSxDQUFDQTtJQUNqQkEsQ0FBQ0E7SUExQ0RGOztPQUVHQTtJQUNXQSxtQkFBRUEsR0FBVUEsUUFBUUEsQ0FBQ0E7SUF3Q3BDQSx1QkFBQ0E7QUFBREEsQ0E3Q0EsQUE2Q0NBLEVBN0M4QixjQUFjLEVBNkM1QztBQUVELEFBQTBCLGlCQUFqQixnQkFBZ0IsQ0FBQyIsImZpbGUiOiJjb3JlL3Bvb2wvU2t5Ym94UmVuZGVyYWJsZS5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1zdGFnZWdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2NvcmUvYmFzZS9UcmlhbmdsZVN1Ykdlb21ldHJ5XCIpO1xuaW1wb3J0IFJlbmRlcmFibGVQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvY29yZS9wb29sL1JlbmRlcmFibGVQb29sXCIpO1xuaW1wb3J0IFNreWJveFx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lbnRpdGllcy9Ta3lib3hcIik7XG5cbmltcG9ydCBSZW5kZXJhYmxlQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvcG9vbC9SZW5kZXJhYmxlQmFzZVwiKTtcblxuLyoqXG4gKiBAY2xhc3MgYXdheS5wb29sLlNreWJveFJlbmRlcmFibGVcbiAqL1xuY2xhc3MgU2t5Ym94UmVuZGVyYWJsZSBleHRlbmRzIFJlbmRlcmFibGVCYXNlXG57XG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHN0YXRpYyBpZDpzdHJpbmcgPSBcInNreWJveFwiO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHJpdmF0ZSBzdGF0aWMgX2dlb21ldHJ5OlRyaWFuZ2xlU3ViR2VvbWV0cnk7XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gcG9vbFxuXHQgKiBAcGFyYW0gc2t5Ym94XG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwb29sOlJlbmRlcmFibGVQb29sLCBza3lib3g6U2t5Ym94KVxuXHR7XG5cdFx0c3VwZXIocG9vbCwgc2t5Ym94LCBza3lib3gpO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcmV0dXJucyB7YXdheS5iYXNlLlRyaWFuZ2xlU3ViR2VvbWV0cnl9XG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwdWJsaWMgX3BHZXRTdWJHZW9tZXRyeSgpOlRyaWFuZ2xlU3ViR2VvbWV0cnlcblx0e1xuXHRcdHZhciBnZW9tZXRyeTpUcmlhbmdsZVN1Ykdlb21ldHJ5ID0gU2t5Ym94UmVuZGVyYWJsZS5fZ2VvbWV0cnk7XG5cblx0XHRpZiAoIWdlb21ldHJ5KSB7XG5cdFx0XHRnZW9tZXRyeSA9IFNreWJveFJlbmRlcmFibGUuX2dlb21ldHJ5ID0gbmV3IFRyaWFuZ2xlU3ViR2VvbWV0cnkodHJ1ZSk7XG5cdFx0XHRnZW9tZXRyeS5hdXRvRGVyaXZlTm9ybWFscyA9IGZhbHNlO1xuXHRcdFx0Z2VvbWV0cnkuYXV0b0Rlcml2ZVRhbmdlbnRzID0gZmFsc2U7XG5cdFx0XHRnZW9tZXRyeS51cGRhdGVJbmRpY2VzKEFycmF5PG51bWJlcj4oMCwgMSwgMiwgMiwgMywgMCwgNiwgNSwgNCwgNCwgNywgNiwgMiwgNiwgNywgNywgMywgMiwgNCwgNSwgMSwgMSwgMCwgNCwgNCwgMCwgMywgMywgNywgNCwgMiwgMSwgNSwgNSwgNiwgMikpO1xuXHRcdFx0Z2VvbWV0cnkudXBkYXRlUG9zaXRpb25zKEFycmF5PG51bWJlcj4oLTEsIDEsIC0xLCAxLCAxLCAtMSwgMSwgMSwgMSwgLTEsIDEsIDEsIC0xLCAtMSwgLTEsIDEsIC0xLCAtMSwgMSwgLTEsIDEsIC0xLCAtMSwgMSkpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbVHJpYW5nbGVTdWJHZW9tZXRyeS5QT1NJVElPTl9EQVRBXSA9IHRydWU7XG5cblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cdH1cbn1cblxuZXhwb3J0ID0gU2t5Ym94UmVuZGVyYWJsZTsiXX0=