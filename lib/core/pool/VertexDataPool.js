var SubGeometryBase = require("awayjs-core/lib/core/base/SubGeometryBase");
var VertexData = require("awayjs-stagegl/lib/core/pool/VertexData");
/**
 *
 */
var VertexDataPool = (function () {
    function VertexDataPool() {
    }
    VertexDataPool.getItem = function (subGeometry, indexData, dataType) {
        if (subGeometry.concatenateArrays)
            dataType = SubGeometryBase.VERTEX_DATA;
        var subGeometryDictionary = (VertexDataPool._pool[subGeometry.id] || (VertexDataPool._pool[subGeometry.id] = new Object()));
        var subGeometryData = (subGeometryDictionary[dataType] || (subGeometryDictionary[dataType] = new Array()));
        var vertexData = subGeometryData[indexData.level] || (subGeometryData[indexData.level] = new VertexData(subGeometry, dataType));
        vertexData.updateData(indexData.originalIndices, indexData.indexMappings);
        return vertexData;
    };
    VertexDataPool.disposeItem = function (subGeometry, level, dataType) {
        var subGeometryDictionary = VertexDataPool._pool[subGeometry.id];
        var subGeometryData = subGeometryDictionary[dataType];
        subGeometryData[level].dispose();
        subGeometryData[level] = null;
    };
    VertexDataPool.prototype.disposeData = function (subGeometry) {
        var subGeometryDictionary = VertexDataPool._pool[subGeometry.id];
        for (var key in subGeometryDictionary) {
            var subGeometryData = subGeometryDictionary[key];
            var len = subGeometryData.length;
            for (var i = 0; i < len; i++) {
                subGeometryData[i].dispose();
                subGeometryData[i] = null;
            }
        }
        VertexDataPool._pool[subGeometry.id] = null;
    };
    VertexDataPool._pool = new Object();
    return VertexDataPool;
})();
module.exports = VertexDataPool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvcG9vbC92ZXJ0ZXhkYXRhcG9vbC50cyJdLCJuYW1lcyI6WyJWZXJ0ZXhEYXRhUG9vbCIsIlZlcnRleERhdGFQb29sLmNvbnN0cnVjdG9yIiwiVmVydGV4RGF0YVBvb2wuZ2V0SXRlbSIsIlZlcnRleERhdGFQb29sLmRpc3Bvc2VJdGVtIiwiVmVydGV4RGF0YVBvb2wuZGlzcG9zZURhdGEiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sZUFBZSxXQUFjLDJDQUEyQyxDQUFDLENBQUM7QUFHakYsSUFBTyxVQUFVLFdBQWUseUNBQXlDLENBQUMsQ0FBQztBQUUzRSxBQUdBOztHQURHO0lBQ0csY0FBYztJQUluQkEsU0FKS0EsY0FBY0E7SUFNbkJDLENBQUNBO0lBRWFELHNCQUFPQSxHQUFyQkEsVUFBc0JBLFdBQTJCQSxFQUFFQSxTQUFtQkEsRUFBRUEsUUFBZUE7UUFFdEZFLEVBQUVBLENBQUNBLENBQUNBLFdBQVdBLENBQUNBLGlCQUFpQkEsQ0FBQ0E7WUFDakNBLFFBQVFBLEdBQUdBLGVBQWVBLENBQUNBLFdBQVdBLENBQUNBO1FBRXhDQSxJQUFJQSxxQkFBcUJBLEdBQW1CQSxDQUFDQSxjQUFjQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxFQUFFQSxDQUFDQSxJQUFJQSxDQUFDQSxjQUFjQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxJQUFJQSxNQUFNQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUM1SUEsSUFBSUEsZUFBZUEsR0FBeUNBLENBQUNBLHFCQUFxQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EscUJBQXFCQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFjQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUU3SkEsSUFBSUEsVUFBVUEsR0FBY0EsZUFBZUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsZUFBZUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsR0FBR0EsSUFBSUEsVUFBVUEsQ0FBQ0EsV0FBV0EsRUFBRUEsUUFBUUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7UUFDM0lBLFVBQVVBLENBQUNBLFVBQVVBLENBQUNBLFNBQVNBLENBQUNBLGVBQWVBLEVBQUVBLFNBQVNBLENBQUNBLGFBQWFBLENBQUNBLENBQUNBO1FBRTFFQSxNQUFNQSxDQUFDQSxVQUFVQSxDQUFDQTtJQUNuQkEsQ0FBQ0E7SUFFYUYsMEJBQVdBLEdBQXpCQSxVQUEwQkEsV0FBMkJBLEVBQUVBLEtBQVlBLEVBQUVBLFFBQWVBO1FBRW5GRyxJQUFJQSxxQkFBcUJBLEdBQW1CQSxjQUFjQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUNqRkEsSUFBSUEsZUFBZUEsR0FBeUNBLHFCQUFxQkEsQ0FBQ0EsUUFBUUEsQ0FBQ0EsQ0FBQ0E7UUFFNUZBLGVBQWVBLENBQUNBLEtBQUtBLENBQUNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO1FBQ2pDQSxlQUFlQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUMvQkEsQ0FBQ0E7SUFFTUgsb0NBQVdBLEdBQWxCQSxVQUFtQkEsV0FBMkJBO1FBRTdDSSxJQUFJQSxxQkFBcUJBLEdBQW1CQSxjQUFjQSxDQUFDQSxLQUFLQSxDQUFDQSxXQUFXQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQTtRQUVqRkEsR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEscUJBQXFCQSxDQUFDQSxDQUFDQSxDQUFDQTtZQUN2Q0EsSUFBSUEsZUFBZUEsR0FBeUNBLHFCQUFxQkEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsQ0FBQ0E7WUFFdkZBLElBQUlBLEdBQUdBLEdBQVVBLGVBQWVBLENBQUNBLE1BQU1BLENBQUNBO1lBQ3hDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFVQSxDQUFDQSxFQUFFQSxDQUFDQSxHQUFHQSxHQUFHQSxFQUFFQSxDQUFDQSxFQUFFQSxFQUFFQSxDQUFDQTtnQkFDckNBLGVBQWVBLENBQUNBLENBQUNBLENBQUNBLENBQUNBLE9BQU9BLEVBQUVBLENBQUNBO2dCQUM3QkEsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7WUFDM0JBLENBQUNBO1FBQ0ZBLENBQUNBO1FBRURBLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO0lBQzdDQSxDQUFDQTtJQTVDY0osb0JBQUtBLEdBQVVBLElBQUlBLE1BQU1BLEVBQUVBLENBQUNBO0lBNkM1Q0EscUJBQUNBO0FBQURBLENBL0NBLEFBK0NDQSxJQUFBO0FBRUQsQUFBd0IsaUJBQWYsY0FBYyxDQUFDIiwiZmlsZSI6ImNvcmUvcG9vbC9WZXJ0ZXhEYXRhUG9vbC5qcyIsInNvdXJjZVJvb3QiOiIvVXNlcnMvcm9iYmF0ZW1hbi9XZWJzdG9ybVByb2plY3RzL2F3YXlqcy1zdGFnZWdsLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBTdWJHZW9tZXRyeUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9jb3JlL2Jhc2UvU3ViR2VvbWV0cnlCYXNlXCIpO1xuXG5pbXBvcnQgSW5kZXhEYXRhXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9jb3JlL3Bvb2wvSW5kZXhEYXRhXCIpO1xuaW1wb3J0IFZlcnRleERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvcG9vbC9WZXJ0ZXhEYXRhXCIpO1xuXG4vKipcbiAqXG4gKi9cbmNsYXNzIFZlcnRleERhdGFQb29sXG57XG5cdHByaXZhdGUgc3RhdGljIF9wb29sOk9iamVjdCA9IG5ldyBPYmplY3QoKTtcblxuXHRjb25zdHJ1Y3RvcigpXG5cdHtcblx0fVxuXG5cdHB1YmxpYyBzdGF0aWMgZ2V0SXRlbShzdWJHZW9tZXRyeTpTdWJHZW9tZXRyeUJhc2UsIGluZGV4RGF0YTpJbmRleERhdGEsIGRhdGFUeXBlOnN0cmluZyk6VmVydGV4RGF0YVxuXHR7XG5cdFx0aWYgKHN1Ykdlb21ldHJ5LmNvbmNhdGVuYXRlQXJyYXlzKVxuXHRcdFx0ZGF0YVR5cGUgPSBTdWJHZW9tZXRyeUJhc2UuVkVSVEVYX0RBVEE7XG5cblx0XHR2YXIgc3ViR2VvbWV0cnlEaWN0aW9uYXJ5Ok9iamVjdCA9IDxPYmplY3Q+IChWZXJ0ZXhEYXRhUG9vbC5fcG9vbFtzdWJHZW9tZXRyeS5pZF0gfHwgKFZlcnRleERhdGFQb29sLl9wb29sW3N1Ykdlb21ldHJ5LmlkXSA9IG5ldyBPYmplY3QoKSkpO1xuXHRcdHZhciBzdWJHZW9tZXRyeURhdGE6QXJyYXk8VmVydGV4RGF0YT4gPSA8QXJyYXk8VmVydGV4RGF0YT4+IChzdWJHZW9tZXRyeURpY3Rpb25hcnlbZGF0YVR5cGVdIHx8IChzdWJHZW9tZXRyeURpY3Rpb25hcnlbZGF0YVR5cGVdID0gbmV3IEFycmF5PFZlcnRleERhdGE+KCkpKTtcblxuXHRcdHZhciB2ZXJ0ZXhEYXRhOlZlcnRleERhdGEgPSBzdWJHZW9tZXRyeURhdGFbaW5kZXhEYXRhLmxldmVsXSB8fCAoc3ViR2VvbWV0cnlEYXRhW2luZGV4RGF0YS5sZXZlbF0gPSBuZXcgVmVydGV4RGF0YShzdWJHZW9tZXRyeSwgZGF0YVR5cGUpKTtcblx0XHR2ZXJ0ZXhEYXRhLnVwZGF0ZURhdGEoaW5kZXhEYXRhLm9yaWdpbmFsSW5kaWNlcywgaW5kZXhEYXRhLmluZGV4TWFwcGluZ3MpO1xuXG5cdFx0cmV0dXJuIHZlcnRleERhdGE7XG5cdH1cblxuXHRwdWJsaWMgc3RhdGljIGRpc3Bvc2VJdGVtKHN1Ykdlb21ldHJ5OlN1Ykdlb21ldHJ5QmFzZSwgbGV2ZWw6bnVtYmVyLCBkYXRhVHlwZTpzdHJpbmcpXG5cdHtcblx0XHR2YXIgc3ViR2VvbWV0cnlEaWN0aW9uYXJ5Ok9iamVjdCA9IDxPYmplY3Q+IFZlcnRleERhdGFQb29sLl9wb29sW3N1Ykdlb21ldHJ5LmlkXTtcblx0XHR2YXIgc3ViR2VvbWV0cnlEYXRhOkFycmF5PFZlcnRleERhdGE+ID0gPEFycmF5PFZlcnRleERhdGE+PiBzdWJHZW9tZXRyeURpY3Rpb25hcnlbZGF0YVR5cGVdO1xuXG5cdFx0c3ViR2VvbWV0cnlEYXRhW2xldmVsXS5kaXNwb3NlKCk7XG5cdFx0c3ViR2VvbWV0cnlEYXRhW2xldmVsXSA9IG51bGw7XG5cdH1cblxuXHRwdWJsaWMgZGlzcG9zZURhdGEoc3ViR2VvbWV0cnk6U3ViR2VvbWV0cnlCYXNlKVxuXHR7XG5cdFx0dmFyIHN1Ykdlb21ldHJ5RGljdGlvbmFyeTpPYmplY3QgPSA8T2JqZWN0PiBWZXJ0ZXhEYXRhUG9vbC5fcG9vbFtzdWJHZW9tZXRyeS5pZF07XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gc3ViR2VvbWV0cnlEaWN0aW9uYXJ5KSB7XG5cdFx0XHR2YXIgc3ViR2VvbWV0cnlEYXRhOkFycmF5PFZlcnRleERhdGE+ID0gPEFycmF5PFZlcnRleERhdGE+PiBzdWJHZW9tZXRyeURpY3Rpb25hcnlba2V5XTtcblxuXHRcdFx0dmFyIGxlbjpudW1iZXIgPSBzdWJHZW9tZXRyeURhdGEubGVuZ3RoO1xuXHRcdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0c3ViR2VvbWV0cnlEYXRhW2ldLmRpc3Bvc2UoKTtcblx0XHRcdFx0c3ViR2VvbWV0cnlEYXRhW2ldID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRWZXJ0ZXhEYXRhUG9vbC5fcG9vbFtzdWJHZW9tZXRyeS5pZF0gPSBudWxsO1xuXHR9XG59XG5cbmV4cG9ydCA9IFZlcnRleERhdGFQb29sOyJdfQ==