var MaterialPassData = require("awayjs-stagegl/lib/core/pool/MaterialPassData");
/**
 * @class away.pool.MaterialPassDataPool
 */
var MaterialPassDataPool = (function () {
    /**
     * //TODO
     *
     * @param textureDataClass
     */
    function MaterialPassDataPool(material) {
        this._pool = new Object();
        this._material = material;
    }
    /**
     * //TODO
     *
     * @param materialOwner
     * @returns ITexture
     */
    MaterialPassDataPool.prototype.getItem = function (materialPass) {
        return (this._pool[materialPass.id] || (this._pool[materialPass.id] = this._material._iAddMaterialPassData(materialPass._iAddMaterialPassData(new MaterialPassData(this, this._material, materialPass)))));
    };
    /**
     * //TODO
     *
     * @param materialOwner
     */
    MaterialPassDataPool.prototype.disposeItem = function (materialPass) {
        materialPass._iRemoveMaterialPassData(this._pool[materialPass.id]);
        delete this._pool[materialPass.id];
    };
    MaterialPassDataPool.prototype.disposePool = function () {
        for (var id in this._pool)
            this._pool[id].materialPass._iRemoveMaterialPassData(this._pool[id]);
        delete this._pool;
    };
    return MaterialPassDataPool;
})();
module.exports = MaterialPassDataPool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvcmUvcG9vbC9tYXRlcmlhbHBhc3NkYXRhcG9vbC50cyJdLCJuYW1lcyI6WyJNYXRlcmlhbFBhc3NEYXRhUG9vbCIsIk1hdGVyaWFsUGFzc0RhdGFQb29sLmNvbnN0cnVjdG9yIiwiTWF0ZXJpYWxQYXNzRGF0YVBvb2wuZ2V0SXRlbSIsIk1hdGVyaWFsUGFzc0RhdGFQb29sLmRpc3Bvc2VJdGVtIiwiTWF0ZXJpYWxQYXNzRGF0YVBvb2wuZGlzcG9zZVBvb2wiXSwibWFwcGluZ3MiOiJBQUFBLElBQU8sZ0JBQWdCLFdBQWMsK0NBQStDLENBQUMsQ0FBQztBQUl0RixBQUdBOztHQURHO0lBQ0csb0JBQW9CO0lBS3pCQTs7OztPQUlHQTtJQUNIQSxTQVZLQSxvQkFBb0JBLENBVWJBLFFBQTRCQTtRQVJoQ0MsVUFBS0EsR0FBVUEsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7UUFVbkNBLElBQUlBLENBQUNBLFNBQVNBLEdBQUdBLFFBQVFBLENBQUNBO0lBQzNCQSxDQUFDQTtJQUVERDs7Ozs7T0FLR0E7SUFDSUEsc0NBQU9BLEdBQWRBLFVBQWVBLFlBQTZCQTtRQUUzQ0UsTUFBTUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EscUJBQXFCQSxDQUFDQSxZQUFZQSxDQUFDQSxxQkFBcUJBLENBQUNBLElBQUlBLGdCQUFnQkEsQ0FBQ0EsSUFBSUEsRUFBRUEsSUFBSUEsQ0FBQ0EsU0FBU0EsRUFBRUEsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7SUFDNU1BLENBQUNBO0lBRURGOzs7O09BSUdBO0lBQ0lBLDBDQUFXQSxHQUFsQkEsVUFBbUJBLFlBQTZCQTtRQUUvQ0csWUFBWUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxZQUFZQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVuRUEsT0FBT0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsWUFBWUEsQ0FBQ0EsRUFBRUEsQ0FBQ0EsQ0FBQ0E7SUFDcENBLENBQUNBO0lBRU1ILDBDQUFXQSxHQUFsQkE7UUFFQ0ksR0FBR0EsQ0FBQ0EsQ0FBQ0EsR0FBR0EsQ0FBQ0EsRUFBRUEsSUFBSUEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7WUFDTEEsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsRUFBRUEsQ0FBRUEsQ0FBQ0EsWUFBWUEsQ0FBQ0Esd0JBQXdCQSxDQUFDQSxJQUFJQSxDQUFDQSxLQUFLQSxDQUFDQSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUUzRkEsT0FBT0EsSUFBSUEsQ0FBQ0EsS0FBS0EsQ0FBQ0E7SUFDbkJBLENBQUNBO0lBQ0ZKLDJCQUFDQTtBQUFEQSxDQTdDQSxBQTZDQ0EsSUFBQTtBQUVELEFBQThCLGlCQUFyQixvQkFBb0IsQ0FBQyIsImZpbGUiOiJjb3JlL3Bvb2wvTWF0ZXJpYWxQYXNzRGF0YVBvb2wuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3JvYmJhdGVtYW4vV2Vic3Rvcm1Qcm9qZWN0cy9hd2F5anMtc3RhZ2VnbC8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWF0ZXJpYWxQYXNzRGF0YVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2NvcmUvcG9vbC9NYXRlcmlhbFBhc3NEYXRhXCIpO1xuaW1wb3J0IFN0YWdlR0xNYXRlcmlhbEJhc2VcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvbWF0ZXJpYWxzL1N0YWdlR0xNYXRlcmlhbEJhc2VcIik7XG5pbXBvcnQgTWF0ZXJpYWxQYXNzQmFzZVx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL21hdGVyaWFscy9wYXNzZXMvTWF0ZXJpYWxQYXNzQmFzZVwiKTtcblxuLyoqXG4gKiBAY2xhc3MgYXdheS5wb29sLk1hdGVyaWFsUGFzc0RhdGFQb29sXG4gKi9cbmNsYXNzIE1hdGVyaWFsUGFzc0RhdGFQb29sXG57XG5cdHByaXZhdGUgX3Bvb2w6T2JqZWN0ID0gbmV3IE9iamVjdCgpO1xuXHRwcml2YXRlIF9tYXRlcmlhbDpTdGFnZUdMTWF0ZXJpYWxCYXNlO1xuXG5cdC8qKlxuXHQgKiAvL1RPRE9cblx0ICpcblx0ICogQHBhcmFtIHRleHR1cmVEYXRhQ2xhc3Ncblx0ICovXG5cdGNvbnN0cnVjdG9yKG1hdGVyaWFsOlN0YWdlR0xNYXRlcmlhbEJhc2UpXG5cdHtcblx0XHR0aGlzLl9tYXRlcmlhbCA9IG1hdGVyaWFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gbWF0ZXJpYWxPd25lclxuXHQgKiBAcmV0dXJucyBJVGV4dHVyZVxuXHQgKi9cblx0cHVibGljIGdldEl0ZW0obWF0ZXJpYWxQYXNzOk1hdGVyaWFsUGFzc0Jhc2UpOk1hdGVyaWFsUGFzc0RhdGFcblx0e1xuXHRcdHJldHVybiAodGhpcy5fcG9vbFttYXRlcmlhbFBhc3MuaWRdIHx8ICh0aGlzLl9wb29sW21hdGVyaWFsUGFzcy5pZF0gPSB0aGlzLl9tYXRlcmlhbC5faUFkZE1hdGVyaWFsUGFzc0RhdGEobWF0ZXJpYWxQYXNzLl9pQWRkTWF0ZXJpYWxQYXNzRGF0YShuZXcgTWF0ZXJpYWxQYXNzRGF0YSh0aGlzLCB0aGlzLl9tYXRlcmlhbCwgbWF0ZXJpYWxQYXNzKSkpKSk7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBtYXRlcmlhbE93bmVyXG5cdCAqL1xuXHRwdWJsaWMgZGlzcG9zZUl0ZW0obWF0ZXJpYWxQYXNzOk1hdGVyaWFsUGFzc0Jhc2UpXG5cdHtcblx0XHRtYXRlcmlhbFBhc3MuX2lSZW1vdmVNYXRlcmlhbFBhc3NEYXRhKHRoaXMuX3Bvb2xbbWF0ZXJpYWxQYXNzLmlkXSk7XG5cblx0XHRkZWxldGUgdGhpcy5fcG9vbFttYXRlcmlhbFBhc3MuaWRdO1xuXHR9XG5cblx0cHVibGljIGRpc3Bvc2VQb29sKClcblx0e1xuXHRcdGZvciAodmFyIGlkIGluIHRoaXMuX3Bvb2wpXG5cdFx0XHQoPE1hdGVyaWFsUGFzc0RhdGE+IHRoaXMuX3Bvb2xbaWRdKS5tYXRlcmlhbFBhc3MuX2lSZW1vdmVNYXRlcmlhbFBhc3NEYXRhKHRoaXMuX3Bvb2xbaWRdKTtcblxuXHRcdGRlbGV0ZSB0aGlzLl9wb29sO1xuXHR9XG59XG5cbmV4cG9ydCA9IE1hdGVyaWFsUGFzc0RhdGFQb29sOyJdfQ==