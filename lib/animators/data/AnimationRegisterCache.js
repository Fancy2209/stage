var __extends = this.__extends || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    __.prototype = b.prototype;
    d.prototype = new __();
};
var ShaderRegisterCache = require("awayjs-stagegl/lib/materials/compilation/ShaderRegisterCache");
var ShaderRegisterElement = require("awayjs-stagegl/lib/materials/compilation/ShaderRegisterElement");
/**
 * ...
 */
var AnimationRegisterCache = (function (_super) {
    __extends(AnimationRegisterCache, _super);
    function AnimationRegisterCache(profile) {
        _super.call(this, profile);
        this.indexDictionary = new Object();
        this.vertexConstantData = new Array();
        this.fragmentConstantData = new Array();
    }
    AnimationRegisterCache.prototype.reset = function () {
        _super.prototype.reset.call(this);
        this.rotationRegisters = new Array();
        this.positionAttribute = this.getRegisterFromString(this.sourceRegisters[0]);
        this.scaleAndRotateTarget = this.getRegisterFromString(this.targetRegisters[0]);
        this.addVertexTempUsages(this.scaleAndRotateTarget, 1);
        for (var i = 1; i < this.targetRegisters.length; i++) {
            this.rotationRegisters.push(this.getRegisterFromString(this.targetRegisters[i]));
            this.addVertexTempUsages(this.rotationRegisters[i - 1], 1);
        }
        this.scaleAndRotateTarget = new ShaderRegisterElement(this.scaleAndRotateTarget.regName, this.scaleAndRotateTarget.index); //only use xyz, w is used as vertexLife
        //allot const register
        this.vertexZeroConst = this.getFreeVertexConstant();
        this.vertexZeroConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 0);
        this.vertexOneConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 1);
        this.vertexTwoConst = new ShaderRegisterElement(this.vertexZeroConst.regName, this.vertexZeroConst.index, 2);
        //allot temp register
        this.positionTarget = this.getFreeVertexVectorTemp();
        this.addVertexTempUsages(this.positionTarget, 1);
        this.positionTarget = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);
        if (this.needVelocity) {
            this.velocityTarget = this.getFreeVertexVectorTemp();
            this.addVertexTempUsages(this.velocityTarget, 1);
            this.velocityTarget = new ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index);
            this.vertexTime = new ShaderRegisterElement(this.velocityTarget.regName, this.velocityTarget.index, 3);
            this.vertexLife = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index, 3);
        }
        else {
            var tempTime = this.getFreeVertexVectorTemp();
            this.addVertexTempUsages(tempTime, 1);
            this.vertexTime = new ShaderRegisterElement(tempTime.regName, tempTime.index, 0);
            this.vertexLife = new ShaderRegisterElement(tempTime.regName, tempTime.index, 1);
        }
    };
    AnimationRegisterCache.prototype.setUVSourceAndTarget = function (UVAttribute, UVVaring) {
        this.uvVar = this.getRegisterFromString(UVVaring);
        this.uvAttribute = this.getRegisterFromString(UVAttribute);
        //uv action is processed after normal actions,so use offsetTarget as uvTarget
        this.uvTarget = new ShaderRegisterElement(this.positionTarget.regName, this.positionTarget.index);
    };
    AnimationRegisterCache.prototype.setRegisterIndex = function (node, parameterIndex /*int*/, registerIndex /*int*/) {
        //8 should be enough for any node.
        var t = this.indexDictionary[node.id];
        if (t == null)
            t = this.indexDictionary[node.id] = new Array(8);
        t[parameterIndex] = registerIndex;
    };
    AnimationRegisterCache.prototype.getRegisterIndex = function (node, parameterIndex /*int*/) {
        return this.indexDictionary[node.id][parameterIndex];
    };
    AnimationRegisterCache.prototype.getInitCode = function () {
        var len = this.sourceRegisters.length;
        var code = "";
        for (var i = 0; i < len; i++)
            code += "mov " + this.targetRegisters[i] + "," + this.sourceRegisters[i] + "\n";
        code += "mov " + this.positionTarget + ".xyz," + this.vertexZeroConst.toString() + "\n";
        if (this.needVelocity)
            code += "mov " + this.velocityTarget + ".xyz," + this.vertexZeroConst.toString() + "\n";
        return code;
    };
    AnimationRegisterCache.prototype.getCombinationCode = function () {
        return "add " + this.scaleAndRotateTarget + ".xyz," + this.scaleAndRotateTarget + ".xyz," + this.positionTarget + ".xyz\n";
    };
    AnimationRegisterCache.prototype.initColorRegisters = function () {
        var code = "";
        if (this.hasColorMulNode) {
            this.colorMulTarget = this.getFreeVertexVectorTemp();
            this.addVertexTempUsages(this.colorMulTarget, 1);
            this.colorMulVary = this.getFreeVarying();
            code += "mov " + this.colorMulTarget + "," + this.vertexOneConst + "\n";
        }
        if (this.hasColorAddNode) {
            this.colorAddTarget = this.getFreeVertexVectorTemp();
            this.addVertexTempUsages(this.colorAddTarget, 1);
            this.colorAddVary = this.getFreeVarying();
            code += "mov " + this.colorAddTarget + "," + this.vertexZeroConst + "\n";
        }
        return code;
    };
    AnimationRegisterCache.prototype.getColorPassCode = function () {
        var code = "";
        if (this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
            if (this.hasColorMulNode)
                code += "mov " + this.colorMulVary + "," + this.colorMulTarget + "\n";
            if (this.hasColorAddNode)
                code += "mov " + this.colorAddVary + "," + this.colorAddTarget + "\n";
        }
        return code;
    };
    AnimationRegisterCache.prototype.getColorCombinationCode = function (shadedTarget) {
        var code = "";
        if (this.needFragmentAnimation && (this.hasColorAddNode || this.hasColorMulNode)) {
            var colorTarget = this.getRegisterFromString(shadedTarget);
            this.addFragmentTempUsages(colorTarget, 1);
            if (this.hasColorMulNode)
                code += "mul " + colorTarget + "," + colorTarget + "," + this.colorMulVary + "\n";
            if (this.hasColorAddNode)
                code += "add " + colorTarget + "," + colorTarget + "," + this.colorAddVary + "\n";
        }
        return code;
    };
    AnimationRegisterCache.prototype.getRegisterFromString = function (code) {
        var temp = code.split(/(\d+)/);
        return new ShaderRegisterElement(temp[0], parseInt(temp[1]));
    };
    Object.defineProperty(AnimationRegisterCache.prototype, "numVertexConstant", {
        get: function () {
            return this._numVertexConstant;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AnimationRegisterCache.prototype, "numFragmentConstant", {
        get: function () {
            return this._numFragmentConstant;
        },
        enumerable: true,
        configurable: true
    });
    AnimationRegisterCache.prototype.setDataLength = function () {
        this._numVertexConstant = this.numUsedVertexConstants - this.vertexConstantOffset;
        this._numFragmentConstant = this.numUsedFragmentConstants - this.fragmentConstantOffset;
        this.vertexConstantData.length = this._numVertexConstant * 4;
        this.fragmentConstantData.length = this._numFragmentConstant * 4;
    };
    AnimationRegisterCache.prototype.setVertexConst = function (index /*int*/, x, y, z, w) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        if (w === void 0) { w = 0; }
        var _index = (index - this.vertexConstantOffset) * 4;
        this.vertexConstantData[_index++] = x;
        this.vertexConstantData[_index++] = y;
        this.vertexConstantData[_index++] = z;
        this.vertexConstantData[_index] = w;
    };
    AnimationRegisterCache.prototype.setVertexConstFromArray = function (index /*int*/, data) {
        var _index = (index - this.vertexConstantOffset) * 4;
        for (var i = 0; i < data.length; i++)
            this.vertexConstantData[_index++] = data[i];
    };
    AnimationRegisterCache.prototype.setVertexConstFromMatrix = function (index /*int*/, matrix) {
        var rawData = matrix.rawData;
        var _index = (index - this.vertexConstantOffset) * 4;
        this.vertexConstantData[_index++] = rawData[0];
        this.vertexConstantData[_index++] = rawData[4];
        this.vertexConstantData[_index++] = rawData[8];
        this.vertexConstantData[_index++] = rawData[12];
        this.vertexConstantData[_index++] = rawData[1];
        this.vertexConstantData[_index++] = rawData[5];
        this.vertexConstantData[_index++] = rawData[9];
        this.vertexConstantData[_index++] = rawData[13];
        this.vertexConstantData[_index++] = rawData[2];
        this.vertexConstantData[_index++] = rawData[6];
        this.vertexConstantData[_index++] = rawData[10];
        this.vertexConstantData[_index++] = rawData[14];
        this.vertexConstantData[_index++] = rawData[3];
        this.vertexConstantData[_index++] = rawData[7];
        this.vertexConstantData[_index++] = rawData[11];
        this.vertexConstantData[_index] = rawData[15];
    };
    AnimationRegisterCache.prototype.setFragmentConst = function (index /*int*/, x, y, z, w) {
        if (x === void 0) { x = 0; }
        if (y === void 0) { y = 0; }
        if (z === void 0) { z = 0; }
        if (w === void 0) { w = 0; }
        var _index = (index - this.fragmentConstantOffset) * 4;
        this.fragmentConstantData[_index++] = x;
        this.fragmentConstantData[_index++] = y;
        this.fragmentConstantData[_index++] = z;
        this.fragmentConstantData[_index] = w;
    };
    return AnimationRegisterCache;
})(ShaderRegisterCache);
module.exports = AnimationRegisterCache;

//# sourceMappingURL=data:application/json;base64,