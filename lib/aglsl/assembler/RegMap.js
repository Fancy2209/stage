var Reg = (function () {
    function Reg(code, desc) {
        this.code = code;
        this.desc = desc;
    }
    return Reg;
})();
var RegMap = (function () {
    /*
     public static va:Reg = new Reg( 0x00, "vertex attribute" );
     public static fc:Reg = new Reg( 0x01, "fragment constant" );
     public static vc:Reg = new Reg( 0x01, "vertex constant" );
     public static ft:Reg = new Reg( 0x02, "fragment temporary" );
     public static vt:Reg = new Reg( 0x02, "vertex temporary" );
     public static vo:Reg = new Reg( 0x03, "vertex output" );
     public static op:Reg = new Reg( 0x03, "vertex output" );
     public static fd:Reg = new Reg( 0x03, "fragment depth output" );
     public static fo:Reg = new Reg( 0x03, "fragment output" );
     public static oc:Reg = new Reg( 0x03, "fragment output" );
     public static v: Reg = new Reg( 0x04, "varying" );
     public static vi:Reg = new Reg( 0x04, "varying output" );
     public static fi:Reg = new Reg( 0x04, "varying input" );
     public static fs:Reg = new Reg( 0x05, "sampler" );
     */
    function RegMap() {
    }
    Object.defineProperty(RegMap, "map", {
        get: function () {
            if (!RegMap._map) {
                RegMap._map = new Array();
                RegMap._map['va'] = new Reg(0x00, "vertex attribute");
                RegMap._map['fc'] = new Reg(0x01, "fragment constant");
                RegMap._map['vc'] = new Reg(0x01, "vertex constant");
                RegMap._map['ft'] = new Reg(0x02, "fragment temporary");
                RegMap._map['vt'] = new Reg(0x02, "vertex temporary");
                RegMap._map['vo'] = new Reg(0x03, "vertex output");
                RegMap._map['op'] = new Reg(0x03, "vertex output");
                RegMap._map['fd'] = new Reg(0x03, "fragment depth output");
                RegMap._map['fo'] = new Reg(0x03, "fragment output");
                RegMap._map['oc'] = new Reg(0x03, "fragment output");
                RegMap._map['v'] = new Reg(0x04, "varying");
                RegMap._map['vi'] = new Reg(0x04, "varying output");
                RegMap._map['fi'] = new Reg(0x04, "varying input");
                RegMap._map['fs'] = new Reg(0x05, "sampler");
            }
            return RegMap._map;
        },
        enumerable: true,
        configurable: true
    });
    return RegMap;
})();
module.exports = RegMap;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9hZ2xzbC9hc3NlbWJsZXIvUmVnTWFwLnRzIl0sIm5hbWVzIjpbIlJlZyIsIlJlZy5jb25zdHJ1Y3RvciIsIlJlZ01hcCIsIlJlZ01hcC5jb25zdHJ1Y3RvciIsIlJlZ01hcC5tYXAiXSwibWFwcGluZ3MiOiJBQUNBLElBQU0sR0FBRztJQU1SQSxTQU5LQSxHQUFHQSxDQU1JQSxJQUFXQSxFQUFFQSxJQUFXQTtRQUVuQ0MsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDakJBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUNGRCxVQUFDQTtBQUFEQSxDQVhBLEFBV0NBLElBQUE7QUFFRCxJQUFNLE1BQU07SUFpRFhFOzs7Ozs7Ozs7Ozs7Ozs7T0FlR0E7SUFDSEEsU0FqRUtBLE1BQU1BO0lBbUVYQyxDQUFDQTtJQTlDREQsc0JBQWtCQSxhQUFHQTthQUFyQkE7WUFHQ0UsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRWxCQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtnQkFDbENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3REQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxtQkFBbUJBLENBQUNBLENBQUNBO2dCQUN2REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsaUJBQWlCQSxDQUFDQSxDQUFBQTtnQkFDcERBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO2dCQUN0REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ25EQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtnQkFDbkRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0E7Z0JBQzNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLENBQUNBLENBQUNBO2dCQUNyREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsaUJBQWlCQSxDQUFDQSxDQUFDQTtnQkFDckRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLFNBQVNBLENBQUNBLENBQUFBO2dCQUMzQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsZ0JBQWdCQSxDQUFDQSxDQUFDQTtnQkFDcERBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBO2dCQUNuREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7WUFHOUNBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBRXBCQSxDQUFDQTs7O09BQUFGO0lBcUJGQSxhQUFDQTtBQUFEQSxDQXBFQSxBQW9FQ0EsSUFBQTtBQUVELEFBQWdCLGlCQUFQLE1BQU0sQ0FBQyIsImZpbGUiOiJhZ2xzbC9hc3NlbWJsZXIvUmVnTWFwLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5jbGFzcyBSZWdcclxue1xyXG5cclxuXHRwdWJsaWMgY29kZTpudW1iZXI7XHJcblx0cHVibGljIGRlc2M6c3RyaW5nO1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihjb2RlOm51bWJlciwgZGVzYzpzdHJpbmcpXHJcblx0e1xyXG5cdFx0dGhpcy5jb2RlID0gY29kZTtcclxuXHRcdHRoaXMuZGVzYyA9IGRlc2M7XHJcblx0fVxyXG59XHJcblxyXG5jbGFzcyBSZWdNYXBcclxue1xyXG5cclxuXHQvKlxyXG5cdCBwdWJsaWMgc3RhdGljIG1hcCA9IFsgbmV3IFJlZyggMHgwMCwgXCJ2ZXJ0ZXggYXR0cmlidXRlXCIgKSxcclxuXHQgbmV3IFJlZyggMHgwMSwgXCJmcmFnbWVudCBjb25zdGFudFwiICksXHJcblx0IG5ldyBSZWcoIDB4MDEsIFwidmVydGV4IGNvbnN0YW50XCIgKSxcclxuXHQgbmV3IFJlZyggMHgwMiwgXCJmcmFnbWVudCB0ZW1wb3JhcnlcIiApLFxyXG5cdCBuZXcgUmVnKCAweDAyLCBcInZlcnRleCB0ZW1wb3JhcnlcIiApLFxyXG5cdCBuZXcgUmVnKCAweDAzLCBcInZlcnRleCBvdXRwdXRcIiApLFxyXG5cdCBuZXcgUmVnKCAweDAzLCBcInZlcnRleCBvdXRwdXRcIiApLFxyXG5cdCBuZXcgUmVnKCAweDAzLCBcImZyYWdtZW50IGRlcHRoIG91dHB1dFwiICksXHJcblx0IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgb3V0cHV0XCIgKSxcclxuXHQgbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIiApLFxyXG5cdCBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmdcIiApLFxyXG5cdCBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmcgb3V0cHV0XCIgKSxcclxuXHQgbmV3IFJlZyggMHgwNCwgXCJ2YXJ5aW5nIGlucHV0XCIgKSxcclxuXHQgbmV3IFJlZyggMHgwNSwgXCJzYW1wbGVyXCIgKSBdO1xyXG5cdCAqL1xyXG5cclxuXHRwcml2YXRlIHN0YXRpYyBfbWFwOmFueVtdO1xyXG5cdHB1YmxpYyBzdGF0aWMgZ2V0IG1hcCgpOmFueVtdXHJcblx0e1xyXG5cclxuXHRcdGlmICghUmVnTWFwLl9tYXApIHtcclxuXHJcblx0XHRcdFJlZ01hcC5fbWFwID0gbmV3IEFycmF5PE9iamVjdD4oKTtcclxuXHRcdFx0UmVnTWFwLl9tYXBbJ3ZhJ10gPSBuZXcgUmVnKDB4MDAsIFwidmVydGV4IGF0dHJpYnV0ZVwiKTtcclxuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZjJ10gPSBuZXcgUmVnKDB4MDEsIFwiZnJhZ21lbnQgY29uc3RhbnRcIik7XHJcblx0XHRcdFJlZ01hcC5fbWFwWyd2YyddID0gbmV3IFJlZygweDAxLCBcInZlcnRleCBjb25zdGFudFwiKVxyXG5cdFx0XHRSZWdNYXAuX21hcFsnZnQnXSA9IG5ldyBSZWcoMHgwMiwgXCJmcmFnbWVudCB0ZW1wb3JhcnlcIik7XHJcblx0XHRcdFJlZ01hcC5fbWFwWyd2dCddID0gbmV3IFJlZygweDAyLCBcInZlcnRleCB0ZW1wb3JhcnlcIik7XHJcblx0XHRcdFJlZ01hcC5fbWFwWyd2byddID0gbmV3IFJlZygweDAzLCBcInZlcnRleCBvdXRwdXRcIik7XHJcblx0XHRcdFJlZ01hcC5fbWFwWydvcCddID0gbmV3IFJlZygweDAzLCBcInZlcnRleCBvdXRwdXRcIik7XHJcblx0XHRcdFJlZ01hcC5fbWFwWydmZCddID0gbmV3IFJlZygweDAzLCBcImZyYWdtZW50IGRlcHRoIG91dHB1dFwiKTtcclxuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZvJ10gPSBuZXcgUmVnKDB4MDMsIFwiZnJhZ21lbnQgb3V0cHV0XCIpO1xyXG5cdFx0XHRSZWdNYXAuX21hcFsnb2MnXSA9IG5ldyBSZWcoMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIik7XHJcblx0XHRcdFJlZ01hcC5fbWFwWyd2J10gPSBuZXcgUmVnKDB4MDQsIFwidmFyeWluZ1wiKVxyXG5cdFx0XHRSZWdNYXAuX21hcFsndmknXSA9IG5ldyBSZWcoMHgwNCwgXCJ2YXJ5aW5nIG91dHB1dFwiKTtcclxuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZpJ10gPSBuZXcgUmVnKDB4MDQsIFwidmFyeWluZyBpbnB1dFwiKTtcclxuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZzJ10gPSBuZXcgUmVnKDB4MDUsIFwic2FtcGxlclwiKTtcclxuXHJcblxyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBSZWdNYXAuX21hcDtcclxuXHJcblx0fVxyXG5cclxuXHQvKlxyXG5cdCBwdWJsaWMgc3RhdGljIHZhOlJlZyA9IG5ldyBSZWcoIDB4MDAsIFwidmVydGV4IGF0dHJpYnV0ZVwiICk7XHJcblx0IHB1YmxpYyBzdGF0aWMgZmM6UmVnID0gbmV3IFJlZyggMHgwMSwgXCJmcmFnbWVudCBjb25zdGFudFwiICk7XHJcblx0IHB1YmxpYyBzdGF0aWMgdmM6UmVnID0gbmV3IFJlZyggMHgwMSwgXCJ2ZXJ0ZXggY29uc3RhbnRcIiApO1xyXG5cdCBwdWJsaWMgc3RhdGljIGZ0OlJlZyA9IG5ldyBSZWcoIDB4MDIsIFwiZnJhZ21lbnQgdGVtcG9yYXJ5XCIgKTtcclxuXHQgcHVibGljIHN0YXRpYyB2dDpSZWcgPSBuZXcgUmVnKCAweDAyLCBcInZlcnRleCB0ZW1wb3JhcnlcIiApO1xyXG5cdCBwdWJsaWMgc3RhdGljIHZvOlJlZyA9IG5ldyBSZWcoIDB4MDMsIFwidmVydGV4IG91dHB1dFwiICk7XHJcblx0IHB1YmxpYyBzdGF0aWMgb3A6UmVnID0gbmV3IFJlZyggMHgwMywgXCJ2ZXJ0ZXggb3V0cHV0XCIgKTtcclxuXHQgcHVibGljIHN0YXRpYyBmZDpSZWcgPSBuZXcgUmVnKCAweDAzLCBcImZyYWdtZW50IGRlcHRoIG91dHB1dFwiICk7XHJcblx0IHB1YmxpYyBzdGF0aWMgZm86UmVnID0gbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIiApO1xyXG5cdCBwdWJsaWMgc3RhdGljIG9jOlJlZyA9IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgb3V0cHV0XCIgKTtcclxuXHQgcHVibGljIHN0YXRpYyB2OiBSZWcgPSBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmdcIiApO1xyXG5cdCBwdWJsaWMgc3RhdGljIHZpOlJlZyA9IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZyBvdXRwdXRcIiApO1xyXG5cdCBwdWJsaWMgc3RhdGljIGZpOlJlZyA9IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZyBpbnB1dFwiICk7XHJcblx0IHB1YmxpYyBzdGF0aWMgZnM6UmVnID0gbmV3IFJlZyggMHgwNSwgXCJzYW1wbGVyXCIgKTtcclxuXHQgKi9cclxuXHRjb25zdHJ1Y3RvcigpXHJcblx0e1xyXG5cdH1cclxufVxyXG5cclxuZXhwb3J0ID0gUmVnTWFwOyJdfQ==