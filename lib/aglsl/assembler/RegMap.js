var Reg = (function () {
    function Reg(code, desc) {
        this.code = code;
        this.desc = desc;
    }
    return Reg;
})();
var RegMap = (function () {
    /*
     public static va:Reg = new Reg( 0x00, "vertex attribute" );
     public static fc:Reg = new Reg( 0x01, "fragment constant" );
     public static vc:Reg = new Reg( 0x01, "vertex constant" );
     public static ft:Reg = new Reg( 0x02, "fragment temporary" );
     public static vt:Reg = new Reg( 0x02, "vertex temporary" );
     public static vo:Reg = new Reg( 0x03, "vertex output" );
     public static op:Reg = new Reg( 0x03, "vertex output" );
     public static fd:Reg = new Reg( 0x03, "fragment depth output" );
     public static fo:Reg = new Reg( 0x03, "fragment output" );
     public static oc:Reg = new Reg( 0x03, "fragment output" );
     public static v: Reg = new Reg( 0x04, "varying" );
     public static vi:Reg = new Reg( 0x04, "varying output" );
     public static fi:Reg = new Reg( 0x04, "varying input" );
     public static fs:Reg = new Reg( 0x05, "sampler" );
     */
    function RegMap() {
    }
    Object.defineProperty(RegMap, "map", {
        get: function () {
            if (!RegMap._map) {
                RegMap._map = new Array();
                RegMap._map['va'] = new Reg(0x00, "vertex attribute");
                RegMap._map['fc'] = new Reg(0x01, "fragment constant");
                RegMap._map['vc'] = new Reg(0x01, "vertex constant");
                RegMap._map['ft'] = new Reg(0x02, "fragment temporary");
                RegMap._map['vt'] = new Reg(0x02, "vertex temporary");
                RegMap._map['vo'] = new Reg(0x03, "vertex output");
                RegMap._map['op'] = new Reg(0x03, "vertex output");
                RegMap._map['fd'] = new Reg(0x03, "fragment depth output");
                RegMap._map['fo'] = new Reg(0x03, "fragment output");
                RegMap._map['oc'] = new Reg(0x03, "fragment output");
                RegMap._map['v'] = new Reg(0x04, "varying");
                RegMap._map['vi'] = new Reg(0x04, "varying output");
                RegMap._map['fi'] = new Reg(0x04, "varying input");
                RegMap._map['fs'] = new Reg(0x05, "sampler");
            }
            return RegMap._map;
        },
        enumerable: true,
        configurable: true
    });
    return RegMap;
})();
module.exports = RegMap;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFnbHNsL2Fzc2VtYmxlci9yZWdtYXAudHMiXSwibmFtZXMiOlsiUmVnIiwiUmVnLmNvbnN0cnVjdG9yIiwiUmVnTWFwIiwiUmVnTWFwLmNvbnN0cnVjdG9yIiwiUmVnTWFwLm1hcCJdLCJtYXBwaW5ncyI6IkFBQ0EsSUFBTSxHQUFHO0lBTVJBLFNBTktBLEdBQUdBLENBTUlBLElBQVdBLEVBQUVBLElBQVdBO1FBRW5DQyxJQUFJQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxDQUFDQTtRQUNqQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDbEJBLENBQUNBO0lBQ0ZELFVBQUNBO0FBQURBLENBWEEsQUFXQ0EsSUFBQTtBQUVELElBQU0sTUFBTTtJQWlEWEU7Ozs7Ozs7Ozs7Ozs7OztPQWVHQTtJQUNIQSxTQWpFS0EsTUFBTUE7SUFtRVhDLENBQUNBO0lBOUNERCxzQkFBa0JBLGFBQUdBO2FBQXJCQTtZQUdDRSxFQUFFQSxDQUFDQSxDQUFDQSxDQUFDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFFbEJBLE1BQU1BLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLEtBQUtBLEVBQVVBLENBQUNBO2dCQUNsQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsa0JBQWtCQSxDQUFDQSxDQUFDQTtnQkFDdERBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLG1CQUFtQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3ZEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLENBQUNBLENBQUFBO2dCQUNwREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsb0JBQW9CQSxDQUFDQSxDQUFDQTtnQkFDeERBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3REQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtnQkFDbkRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBO2dCQUNuREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsdUJBQXVCQSxDQUFDQSxDQUFDQTtnQkFDM0RBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGlCQUFpQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3JEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLENBQUNBLENBQUNBO2dCQUNyREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQUE7Z0JBQzNDQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxnQkFBZ0JBLENBQUNBLENBQUNBO2dCQUNwREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ25EQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxTQUFTQSxDQUFDQSxDQUFDQTtZQUc5Q0EsQ0FBQ0E7WUFFREEsTUFBTUEsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0E7UUFFcEJBLENBQUNBOzs7T0FBQUY7SUFxQkZBLGFBQUNBO0FBQURBLENBcEVBLEFBb0VDQSxJQUFBO0FBRUQsQUFBZ0IsaUJBQVAsTUFBTSxDQUFDIiwiZmlsZSI6ImFnbHNsL2Fzc2VtYmxlci9SZWdNYXAuanMiLCJzb3VyY2VSb290IjoiL1VzZXJzL3JvYmJhdGVtYW4vV2Vic3Rvcm1Qcm9qZWN0cy9hd2F5anMtc3RhZ2VnbC8iLCJzb3VyY2VzQ29udGVudCI6WyJcbmNsYXNzIFJlZ1xue1xuXG5cdHB1YmxpYyBjb2RlOm51bWJlcjtcblx0cHVibGljIGRlc2M6c3RyaW5nO1xuXG5cdGNvbnN0cnVjdG9yKGNvZGU6bnVtYmVyLCBkZXNjOnN0cmluZylcblx0e1xuXHRcdHRoaXMuY29kZSA9IGNvZGU7XG5cdFx0dGhpcy5kZXNjID0gZGVzYztcblx0fVxufVxuXG5jbGFzcyBSZWdNYXBcbntcblxuXHQvKlxuXHQgcHVibGljIHN0YXRpYyBtYXAgPSBbIG5ldyBSZWcoIDB4MDAsIFwidmVydGV4IGF0dHJpYnV0ZVwiICksXG5cdCBuZXcgUmVnKCAweDAxLCBcImZyYWdtZW50IGNvbnN0YW50XCIgKSxcblx0IG5ldyBSZWcoIDB4MDEsIFwidmVydGV4IGNvbnN0YW50XCIgKSxcblx0IG5ldyBSZWcoIDB4MDIsIFwiZnJhZ21lbnQgdGVtcG9yYXJ5XCIgKSxcblx0IG5ldyBSZWcoIDB4MDIsIFwidmVydGV4IHRlbXBvcmFyeVwiICksXG5cdCBuZXcgUmVnKCAweDAzLCBcInZlcnRleCBvdXRwdXRcIiApLFxuXHQgbmV3IFJlZyggMHgwMywgXCJ2ZXJ0ZXggb3V0cHV0XCIgKSxcblx0IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgZGVwdGggb3V0cHV0XCIgKSxcblx0IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgb3V0cHV0XCIgKSxcblx0IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgb3V0cHV0XCIgKSxcblx0IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZ1wiICksXG5cdCBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmcgb3V0cHV0XCIgKSxcblx0IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZyBpbnB1dFwiICksXG5cdCBuZXcgUmVnKCAweDA1LCBcInNhbXBsZXJcIiApIF07XG5cdCAqL1xuXG5cdHByaXZhdGUgc3RhdGljIF9tYXA6YW55W107XG5cdHB1YmxpYyBzdGF0aWMgZ2V0IG1hcCgpOmFueVtdXG5cdHtcblxuXHRcdGlmICghUmVnTWFwLl9tYXApIHtcblxuXHRcdFx0UmVnTWFwLl9tYXAgPSBuZXcgQXJyYXk8T2JqZWN0PigpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ3ZhJ10gPSBuZXcgUmVnKDB4MDAsIFwidmVydGV4IGF0dHJpYnV0ZVwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWydmYyddID0gbmV3IFJlZygweDAxLCBcImZyYWdtZW50IGNvbnN0YW50XCIpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ3ZjJ10gPSBuZXcgUmVnKDB4MDEsIFwidmVydGV4IGNvbnN0YW50XCIpXG5cdFx0XHRSZWdNYXAuX21hcFsnZnQnXSA9IG5ldyBSZWcoMHgwMiwgXCJmcmFnbWVudCB0ZW1wb3JhcnlcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsndnQnXSA9IG5ldyBSZWcoMHgwMiwgXCJ2ZXJ0ZXggdGVtcG9yYXJ5XCIpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ3ZvJ10gPSBuZXcgUmVnKDB4MDMsIFwidmVydGV4IG91dHB1dFwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWydvcCddID0gbmV3IFJlZygweDAzLCBcInZlcnRleCBvdXRwdXRcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsnZmQnXSA9IG5ldyBSZWcoMHgwMywgXCJmcmFnbWVudCBkZXB0aCBvdXRwdXRcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsnZm8nXSA9IG5ldyBSZWcoMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsnb2MnXSA9IG5ldyBSZWcoMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsndiddID0gbmV3IFJlZygweDA0LCBcInZhcnlpbmdcIilcblx0XHRcdFJlZ01hcC5fbWFwWyd2aSddID0gbmV3IFJlZygweDA0LCBcInZhcnlpbmcgb3V0cHV0XCIpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZpJ10gPSBuZXcgUmVnKDB4MDQsIFwidmFyeWluZyBpbnB1dFwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWydmcyddID0gbmV3IFJlZygweDA1LCBcInNhbXBsZXJcIik7XG5cblxuXHRcdH1cblxuXHRcdHJldHVybiBSZWdNYXAuX21hcDtcblxuXHR9XG5cblx0Lypcblx0IHB1YmxpYyBzdGF0aWMgdmE6UmVnID0gbmV3IFJlZyggMHgwMCwgXCJ2ZXJ0ZXggYXR0cmlidXRlXCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgZmM6UmVnID0gbmV3IFJlZyggMHgwMSwgXCJmcmFnbWVudCBjb25zdGFudFwiICk7XG5cdCBwdWJsaWMgc3RhdGljIHZjOlJlZyA9IG5ldyBSZWcoIDB4MDEsIFwidmVydGV4IGNvbnN0YW50XCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgZnQ6UmVnID0gbmV3IFJlZyggMHgwMiwgXCJmcmFnbWVudCB0ZW1wb3JhcnlcIiApO1xuXHQgcHVibGljIHN0YXRpYyB2dDpSZWcgPSBuZXcgUmVnKCAweDAyLCBcInZlcnRleCB0ZW1wb3JhcnlcIiApO1xuXHQgcHVibGljIHN0YXRpYyB2bzpSZWcgPSBuZXcgUmVnKCAweDAzLCBcInZlcnRleCBvdXRwdXRcIiApO1xuXHQgcHVibGljIHN0YXRpYyBvcDpSZWcgPSBuZXcgUmVnKCAweDAzLCBcInZlcnRleCBvdXRwdXRcIiApO1xuXHQgcHVibGljIHN0YXRpYyBmZDpSZWcgPSBuZXcgUmVnKCAweDAzLCBcImZyYWdtZW50IGRlcHRoIG91dHB1dFwiICk7XG5cdCBwdWJsaWMgc3RhdGljIGZvOlJlZyA9IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgb3V0cHV0XCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgb2M6UmVnID0gbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIiApO1xuXHQgcHVibGljIHN0YXRpYyB2OiBSZWcgPSBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmdcIiApO1xuXHQgcHVibGljIHN0YXRpYyB2aTpSZWcgPSBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmcgb3V0cHV0XCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgZmk6UmVnID0gbmV3IFJlZyggMHgwNCwgXCJ2YXJ5aW5nIGlucHV0XCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgZnM6UmVnID0gbmV3IFJlZyggMHgwNSwgXCJzYW1wbGVyXCIgKTtcblx0ICovXG5cdGNvbnN0cnVjdG9yKClcblx0e1xuXHR9XG59XG5cbmV4cG9ydCA9IFJlZ01hcDsiXX0=