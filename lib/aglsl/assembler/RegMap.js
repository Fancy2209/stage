var Reg = (function () {
    function Reg(code, desc) {
        this.code = code;
        this.desc = desc;
    }
    return Reg;
})();
var RegMap = (function () {
    /*
     public static va:Reg = new Reg( 0x00, "vertex attribute" );
     public static fc:Reg = new Reg( 0x01, "fragment constant" );
     public static vc:Reg = new Reg( 0x01, "vertex constant" );
     public static ft:Reg = new Reg( 0x02, "fragment temporary" );
     public static vt:Reg = new Reg( 0x02, "vertex temporary" );
     public static vo:Reg = new Reg( 0x03, "vertex output" );
     public static op:Reg = new Reg( 0x03, "vertex output" );
     public static fd:Reg = new Reg( 0x03, "fragment depth output" );
     public static fo:Reg = new Reg( 0x03, "fragment output" );
     public static oc:Reg = new Reg( 0x03, "fragment output" );
     public static v: Reg = new Reg( 0x04, "varying" );
     public static vi:Reg = new Reg( 0x04, "varying output" );
     public static fi:Reg = new Reg( 0x04, "varying input" );
     public static fs:Reg = new Reg( 0x05, "sampler" );
     */
    function RegMap() {
    }
    Object.defineProperty(RegMap, "map", {
        get: function () {
            if (!RegMap._map) {
                RegMap._map = new Array();
                RegMap._map['va'] = new Reg(0x00, "vertex attribute");
                RegMap._map['fc'] = new Reg(0x01, "fragment constant");
                RegMap._map['vc'] = new Reg(0x01, "vertex constant");
                RegMap._map['ft'] = new Reg(0x02, "fragment temporary");
                RegMap._map['vt'] = new Reg(0x02, "vertex temporary");
                RegMap._map['vo'] = new Reg(0x03, "vertex output");
                RegMap._map['op'] = new Reg(0x03, "vertex output");
                RegMap._map['fd'] = new Reg(0x03, "fragment depth output");
                RegMap._map['fo'] = new Reg(0x03, "fragment output");
                RegMap._map['oc'] = new Reg(0x03, "fragment output");
                RegMap._map['v'] = new Reg(0x04, "varying");
                RegMap._map['vi'] = new Reg(0x04, "varying output");
                RegMap._map['fi'] = new Reg(0x04, "varying input");
                RegMap._map['fs'] = new Reg(0x05, "sampler");
            }
            return RegMap._map;
        },
        enumerable: true,
        configurable: true
    });
    return RegMap;
})();
module.exports = RegMap;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9hZ2xzbC9hc3NlbWJsZXIvUmVnTWFwLnRzIl0sIm5hbWVzIjpbIlJlZyIsIlJlZy5jb25zdHJ1Y3RvciIsIlJlZ01hcCIsIlJlZ01hcC5jb25zdHJ1Y3RvciIsIlJlZ01hcC5tYXAiXSwibWFwcGluZ3MiOiJBQUNBLElBQU0sR0FBRztJQU1SQSxTQU5LQSxHQUFHQSxDQU1JQSxJQUFXQSxFQUFFQSxJQUFXQTtRQUVuQ0MsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFDakJBLElBQUlBLENBQUNBLElBQUlBLEdBQUdBLElBQUlBLENBQUNBO0lBQ2xCQSxDQUFDQTtJQUNGRCxVQUFDQTtBQUFEQSxDQVhBLEFBV0NBLElBQUE7QUFFRCxJQUFNLE1BQU07SUFpRFhFOzs7Ozs7Ozs7Ozs7Ozs7T0FlR0E7SUFDSEEsU0FqRUtBLE1BQU1BO0lBbUVYQyxDQUFDQTtJQTlDREQsc0JBQWtCQSxhQUFHQTthQUFyQkE7WUFHQ0UsRUFBRUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7Z0JBRWxCQSxNQUFNQSxDQUFDQSxJQUFJQSxHQUFHQSxJQUFJQSxLQUFLQSxFQUFVQSxDQUFDQTtnQkFDbENBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGtCQUFrQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3REQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxtQkFBbUJBLENBQUNBLENBQUNBO2dCQUN2REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsaUJBQWlCQSxDQUFDQSxDQUFBQTtnQkFDcERBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLG9CQUFvQkEsQ0FBQ0EsQ0FBQ0E7Z0JBQ3hEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxrQkFBa0JBLENBQUNBLENBQUNBO2dCQUN0REEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsZUFBZUEsQ0FBQ0EsQ0FBQ0E7Z0JBQ25EQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxlQUFlQSxDQUFDQSxDQUFDQTtnQkFDbkRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLHVCQUF1QkEsQ0FBQ0EsQ0FBQ0E7Z0JBQzNEQSxNQUFNQSxDQUFDQSxJQUFJQSxDQUFDQSxJQUFJQSxDQUFDQSxHQUFHQSxJQUFJQSxHQUFHQSxDQUFDQSxJQUFJQSxFQUFFQSxpQkFBaUJBLENBQUNBLENBQUNBO2dCQUNyREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsaUJBQWlCQSxDQUFDQSxDQUFDQTtnQkFDckRBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLFNBQVNBLENBQUNBLENBQUFBO2dCQUMzQ0EsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsZ0JBQWdCQSxDQUFDQSxDQUFDQTtnQkFDcERBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLEdBQUdBLElBQUlBLEdBQUdBLENBQUNBLElBQUlBLEVBQUVBLGVBQWVBLENBQUNBLENBQUNBO2dCQUNuREEsTUFBTUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsSUFBSUEsQ0FBQ0EsR0FBR0EsSUFBSUEsR0FBR0EsQ0FBQ0EsSUFBSUEsRUFBRUEsU0FBU0EsQ0FBQ0EsQ0FBQ0E7WUFHOUNBLENBQUNBO1lBRURBLE1BQU1BLENBQUNBLE1BQU1BLENBQUNBLElBQUlBLENBQUNBO1FBRXBCQSxDQUFDQTs7O09BQUFGO0lBcUJGQSxhQUFDQTtBQUFEQSxDQXBFQSxBQW9FQ0EsSUFBQTtBQUVELEFBQWdCLGlCQUFQLE1BQU0sQ0FBQyIsImZpbGUiOiJhZ2xzbC9hc3NlbWJsZXIvUmVnTWFwLmpzIiwic291cmNlUm9vdCI6Ii4uLyIsInNvdXJjZXNDb250ZW50IjpbIlxuY2xhc3MgUmVnXG57XG5cblx0cHVibGljIGNvZGU6bnVtYmVyO1xuXHRwdWJsaWMgZGVzYzpzdHJpbmc7XG5cblx0Y29uc3RydWN0b3IoY29kZTpudW1iZXIsIGRlc2M6c3RyaW5nKVxuXHR7XG5cdFx0dGhpcy5jb2RlID0gY29kZTtcblx0XHR0aGlzLmRlc2MgPSBkZXNjO1xuXHR9XG59XG5cbmNsYXNzIFJlZ01hcFxue1xuXG5cdC8qXG5cdCBwdWJsaWMgc3RhdGljIG1hcCA9IFsgbmV3IFJlZyggMHgwMCwgXCJ2ZXJ0ZXggYXR0cmlidXRlXCIgKSxcblx0IG5ldyBSZWcoIDB4MDEsIFwiZnJhZ21lbnQgY29uc3RhbnRcIiApLFxuXHQgbmV3IFJlZyggMHgwMSwgXCJ2ZXJ0ZXggY29uc3RhbnRcIiApLFxuXHQgbmV3IFJlZyggMHgwMiwgXCJmcmFnbWVudCB0ZW1wb3JhcnlcIiApLFxuXHQgbmV3IFJlZyggMHgwMiwgXCJ2ZXJ0ZXggdGVtcG9yYXJ5XCIgKSxcblx0IG5ldyBSZWcoIDB4MDMsIFwidmVydGV4IG91dHB1dFwiICksXG5cdCBuZXcgUmVnKCAweDAzLCBcInZlcnRleCBvdXRwdXRcIiApLFxuXHQgbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBkZXB0aCBvdXRwdXRcIiApLFxuXHQgbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIiApLFxuXHQgbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIiApLFxuXHQgbmV3IFJlZyggMHgwNCwgXCJ2YXJ5aW5nXCIgKSxcblx0IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZyBvdXRwdXRcIiApLFxuXHQgbmV3IFJlZyggMHgwNCwgXCJ2YXJ5aW5nIGlucHV0XCIgKSxcblx0IG5ldyBSZWcoIDB4MDUsIFwic2FtcGxlclwiICkgXTtcblx0ICovXG5cblx0cHJpdmF0ZSBzdGF0aWMgX21hcDphbnlbXTtcblx0cHVibGljIHN0YXRpYyBnZXQgbWFwKCk6YW55W11cblx0e1xuXG5cdFx0aWYgKCFSZWdNYXAuX21hcCkge1xuXG5cdFx0XHRSZWdNYXAuX21hcCA9IG5ldyBBcnJheTxPYmplY3Q+KCk7XG5cdFx0XHRSZWdNYXAuX21hcFsndmEnXSA9IG5ldyBSZWcoMHgwMCwgXCJ2ZXJ0ZXggYXR0cmlidXRlXCIpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZjJ10gPSBuZXcgUmVnKDB4MDEsIFwiZnJhZ21lbnQgY29uc3RhbnRcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsndmMnXSA9IG5ldyBSZWcoMHgwMSwgXCJ2ZXJ0ZXggY29uc3RhbnRcIilcblx0XHRcdFJlZ01hcC5fbWFwWydmdCddID0gbmV3IFJlZygweDAyLCBcImZyYWdtZW50IHRlbXBvcmFyeVwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWyd2dCddID0gbmV3IFJlZygweDAyLCBcInZlcnRleCB0ZW1wb3JhcnlcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsndm8nXSA9IG5ldyBSZWcoMHgwMywgXCJ2ZXJ0ZXggb3V0cHV0XCIpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ29wJ10gPSBuZXcgUmVnKDB4MDMsIFwidmVydGV4IG91dHB1dFwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWydmZCddID0gbmV3IFJlZygweDAzLCBcImZyYWdtZW50IGRlcHRoIG91dHB1dFwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWydmbyddID0gbmV3IFJlZygweDAzLCBcImZyYWdtZW50IG91dHB1dFwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWydvYyddID0gbmV3IFJlZygweDAzLCBcImZyYWdtZW50IG91dHB1dFwiKTtcblx0XHRcdFJlZ01hcC5fbWFwWyd2J10gPSBuZXcgUmVnKDB4MDQsIFwidmFyeWluZ1wiKVxuXHRcdFx0UmVnTWFwLl9tYXBbJ3ZpJ10gPSBuZXcgUmVnKDB4MDQsIFwidmFyeWluZyBvdXRwdXRcIik7XG5cdFx0XHRSZWdNYXAuX21hcFsnZmknXSA9IG5ldyBSZWcoMHgwNCwgXCJ2YXJ5aW5nIGlucHV0XCIpO1xuXHRcdFx0UmVnTWFwLl9tYXBbJ2ZzJ10gPSBuZXcgUmVnKDB4MDUsIFwic2FtcGxlclwiKTtcblxuXG5cdFx0fVxuXG5cdFx0cmV0dXJuIFJlZ01hcC5fbWFwO1xuXG5cdH1cblxuXHQvKlxuXHQgcHVibGljIHN0YXRpYyB2YTpSZWcgPSBuZXcgUmVnKCAweDAwLCBcInZlcnRleCBhdHRyaWJ1dGVcIiApO1xuXHQgcHVibGljIHN0YXRpYyBmYzpSZWcgPSBuZXcgUmVnKCAweDAxLCBcImZyYWdtZW50IGNvbnN0YW50XCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgdmM6UmVnID0gbmV3IFJlZyggMHgwMSwgXCJ2ZXJ0ZXggY29uc3RhbnRcIiApO1xuXHQgcHVibGljIHN0YXRpYyBmdDpSZWcgPSBuZXcgUmVnKCAweDAyLCBcImZyYWdtZW50IHRlbXBvcmFyeVwiICk7XG5cdCBwdWJsaWMgc3RhdGljIHZ0OlJlZyA9IG5ldyBSZWcoIDB4MDIsIFwidmVydGV4IHRlbXBvcmFyeVwiICk7XG5cdCBwdWJsaWMgc3RhdGljIHZvOlJlZyA9IG5ldyBSZWcoIDB4MDMsIFwidmVydGV4IG91dHB1dFwiICk7XG5cdCBwdWJsaWMgc3RhdGljIG9wOlJlZyA9IG5ldyBSZWcoIDB4MDMsIFwidmVydGV4IG91dHB1dFwiICk7XG5cdCBwdWJsaWMgc3RhdGljIGZkOlJlZyA9IG5ldyBSZWcoIDB4MDMsIFwiZnJhZ21lbnQgZGVwdGggb3V0cHV0XCIgKTtcblx0IHB1YmxpYyBzdGF0aWMgZm86UmVnID0gbmV3IFJlZyggMHgwMywgXCJmcmFnbWVudCBvdXRwdXRcIiApO1xuXHQgcHVibGljIHN0YXRpYyBvYzpSZWcgPSBuZXcgUmVnKCAweDAzLCBcImZyYWdtZW50IG91dHB1dFwiICk7XG5cdCBwdWJsaWMgc3RhdGljIHY6IFJlZyA9IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZ1wiICk7XG5cdCBwdWJsaWMgc3RhdGljIHZpOlJlZyA9IG5ldyBSZWcoIDB4MDQsIFwidmFyeWluZyBvdXRwdXRcIiApO1xuXHQgcHVibGljIHN0YXRpYyBmaTpSZWcgPSBuZXcgUmVnKCAweDA0LCBcInZhcnlpbmcgaW5wdXRcIiApO1xuXHQgcHVibGljIHN0YXRpYyBmczpSZWcgPSBuZXcgUmVnKCAweDA1LCBcInNhbXBsZXJcIiApO1xuXHQgKi9cblx0Y29uc3RydWN0b3IoKVxuXHR7XG5cdH1cbn1cblxuZXhwb3J0ID0gUmVnTWFwOyJdfQ==