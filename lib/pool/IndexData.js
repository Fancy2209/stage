/**
 *
 */
var IndexData = (function () {
    function IndexData(level) {
        this._dataDirty = true;
        this.invalid = new Array(8);
        this.contexts = new Array(8);
        this.buffers = new Array(8);
        this.level = level;
    }
    IndexData.prototype.updateData = function (offset, indices, numVertices) {
        if (this._dataDirty) {
            this._dataDirty = false;
            if (indices.length < IndexData.LIMIT_INDICES && numVertices < IndexData.LIMIT_VERTS) {
                //shortcut for those buffers that fit into the maximum buffer sizes
                this.indexMappings = null;
                this.originalIndices = null;
                this.setData(indices);
                this.offset = indices.length;
            }
            else {
                var i;
                var len;
                var outIndex;
                var j;
                var k;
                var splitIndices = new Array();
                this.indexMappings = new Array(indices.length);
                this.originalIndices = new Array();
                i = this.indexMappings.length;
                while (i--)
                    this.indexMappings[i] = -1;
                var originalIndex;
                var splitIndex;
                // Loop over all triangles
                outIndex = 0;
                len = indices.length;
                i = offset;
                k = 0;
                while (i < len && outIndex + 3 < IndexData.LIMIT_INDICES && k + 3 < IndexData.LIMIT_VERTS) {
                    for (j = 0; j < 3; j++) {
                        originalIndex = indices[i + j];
                        if (this.indexMappings[originalIndex] >= 0) {
                            splitIndex = this.indexMappings[originalIndex];
                        }
                        else {
                            // This vertex does not yet exist in the split list and
                            // needs to be copied from the long list.
                            splitIndex = k++;
                            this.indexMappings[originalIndex] = splitIndex;
                            this.originalIndices.push(originalIndex);
                        }
                        // Store new index, which may have come from the mapping look-up,
                        // or from copying a new set of vertex data from the original vector
                        splitIndices[outIndex + j] = splitIndex;
                    }
                    outIndex += 3;
                    i += 3;
                }
                this.setData(splitIndices);
                this.offset = i;
            }
        }
    };
    IndexData.prototype.invalidateData = function () {
        this._dataDirty = true;
    };
    IndexData.prototype.dispose = function () {
        for (var i = 0; i < 8; ++i) {
            if (this.contexts[i]) {
                this.buffers[i].dispose();
                this.buffers[i] = null;
                this.contexts[i] = null;
            }
        }
    };
    /**
     * @private
     */
    IndexData.prototype.disposeBuffers = function () {
        for (var i = 0; i < 8; ++i) {
            if (this.buffers[i]) {
                this.buffers[i].dispose();
                this.buffers[i] = null;
            }
        }
    };
    /**
     * @private
     */
    IndexData.prototype.invalidateBuffers = function () {
        for (var i = 0; i < 8; ++i)
            this.invalid[i] = true;
    };
    /**
     *
     * @param data
     * @private
     */
    IndexData.prototype.setData = function (data) {
        if (this.data && this.data.length != data.length)
            this.disposeBuffers();
        else
            this.invalidateBuffers();
        this.data = data;
    };
    IndexData.LIMIT_VERTS = 0xffff;
    IndexData.LIMIT_INDICES = 0xffffff;
    return IndexData;
})();
module.exports = IndexData;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL2luZGV4ZGF0YS50cyJdLCJuYW1lcyI6WyJJbmRleERhdGEiLCJJbmRleERhdGEuY29uc3RydWN0b3IiLCJJbmRleERhdGEudXBkYXRlRGF0YSIsIkluZGV4RGF0YS5pbnZhbGlkYXRlRGF0YSIsIkluZGV4RGF0YS5kaXNwb3NlIiwiSW5kZXhEYXRhLmRpc3Bvc2VCdWZmZXJzIiwiSW5kZXhEYXRhLmludmFsaWRhdGVCdWZmZXJzIiwiSW5kZXhEYXRhLnNldERhdGEiXSwibWFwcGluZ3MiOiJBQUtBLEFBR0E7O0dBREc7SUFDRyxTQUFTO0lBd0JkQSxTQXhCS0EsU0FBU0EsQ0F3QkZBLEtBQVlBO1FBbEJoQkMsZUFBVUEsR0FBR0EsSUFBSUEsQ0FBQ0E7UUFFbkJBLFlBQU9BLEdBQWtCQSxJQUFJQSxLQUFLQSxDQUFDQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUV0Q0EsYUFBUUEsR0FBMEJBLElBQUlBLEtBQUtBLENBQWtCQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUVoRUEsWUFBT0EsR0FBdUJBLElBQUlBLEtBQUtBLENBQWVBLENBQUNBLENBQUNBLENBQUNBO1FBYy9EQSxJQUFJQSxDQUFDQSxLQUFLQSxHQUFHQSxLQUFLQSxDQUFDQTtJQUNwQkEsQ0FBQ0E7SUFFTUQsOEJBQVVBLEdBQWpCQSxVQUFrQkEsTUFBYUEsRUFBRUEsT0FBcUJBLEVBQUVBLFdBQWtCQTtRQUV6RUUsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDckJBLElBQUlBLENBQUNBLFVBQVVBLEdBQUdBLEtBQUtBLENBQUNBO1lBRXhCQSxFQUFFQSxDQUFDQSxDQUFDQSxPQUFPQSxDQUFDQSxNQUFNQSxHQUFHQSxTQUFTQSxDQUFDQSxhQUFhQSxJQUFJQSxXQUFXQSxHQUFHQSxTQUFTQSxDQUFDQSxXQUFXQSxDQUFDQSxDQUFDQSxDQUFDQTtnQkFDckZBLEFBQ0FBLG1FQURtRUE7Z0JBQ25FQSxJ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T0FBT0EsRUFBRUEsQ0FBQ0E7Z0JBQzFCQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUN4QkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7SUFDRkEsQ0FBQ0E7SUFFREw7O09BRUdBO0lBQ0tBLHFDQUFpQkEsR0FBekJBO1FBRUNNLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO1lBQ2hDQSxJQUFJQSxDQUFDQSxPQUFPQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtJQUN6QkEsQ0FBQ0E7SUFFRE47Ozs7T0FJR0E7SUFDS0EsMkJBQU9BLEdBQWZBLFVBQWdCQSxJQUFrQkE7UUFFakNPLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLElBQUlBLElBQUlBLElBQUlBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLElBQUlBLENBQUNBLE1BQU1BLENBQUNBO1lBQ2hEQSxJQUFJQSxDQUFDQSxjQUFjQSxFQUFFQSxDQUFDQTtRQUN2QkEsSUFBSUE7WUFDSEEsSUFBSUEsQ0FBQ0EsaUJBQWlCQSxFQUFFQSxDQUFDQTtRQUUxQkEsSUFBSUEsQ0FBQ0EsSUFBSUEsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDbEJBLENBQUNBO0lBakpjUCxxQkFBV0EsR0FBVUEsTUFBTUEsQ0FBQ0E7SUFFNUJBLHVCQUFhQSxHQUFVQSxRQUFRQSxDQUFDQTtJQWdKaERBLGdCQUFDQTtBQUFEQSxDQXBKQSxBQW9KQ0EsSUFBQTtBQUVELEFBQW1CLGlCQUFWLFNBQVMsQ0FBQyIsImZpbGUiOiJwb29sL0luZGV4RGF0YS5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3ViR2VvbWV0cnlCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9TdWJHZW9tZXRyeUJhc2VcIik7XG5cbmltcG9ydCBJQ29udGV4dFN0YWdlR0xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9iYXNlL0lDb250ZXh0U3RhZ2VHTFwiKTtcbmltcG9ydCBJSW5kZXhCdWZmZXJcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL2Jhc2UvSUluZGV4QnVmZmVyXCIpO1xuXG4vKipcbiAqXG4gKi9cbmNsYXNzIEluZGV4RGF0YVxue1xuXHRwcml2YXRlIHN0YXRpYyBMSU1JVF9WRVJUUzpudW1iZXIgPSAweGZmZmY7XG5cblx0cHJpdmF0ZSBzdGF0aWMgTElNSVRfSU5ESUNFUzpudW1iZXIgPSAweGZmZmZmZjtcblxuXHRwcml2YXRlIF9kYXRhRGlydHkgPSB0cnVlO1xuXG5cdHB1YmxpYyBpbnZhbGlkOkFycmF5PGJvb2xlYW4+ID0gbmV3IEFycmF5KDgpO1xuXG5cdHB1YmxpYyBjb250ZXh0czpBcnJheTxJQ29udGV4dFN0YWdlR0w+ID0gbmV3IEFycmF5PElDb250ZXh0U3RhZ2VHTD4oOCk7XG5cblx0cHVibGljIGJ1ZmZlcnM6QXJyYXk8SUluZGV4QnVmZmVyPiA9IG5ldyBBcnJheTxJSW5kZXhCdWZmZXI+KDgpO1xuXG5cdHB1YmxpYyBkYXRhOkFycmF5PG51bWJlcj47XG5cblx0cHVibGljIGluZGV4TWFwcGluZ3M6QXJyYXk8bnVtYmVyPjtcblxuXHRwdWJsaWMgb3JpZ2luYWxJbmRpY2VzOkFycmF5PG51bWJlcj47XG5cblx0cHVibGljIG9mZnNldDpudW1iZXI7XG5cblx0cHVibGljIGxldmVsOm51bWJlcjtcblxuXHRjb25zdHJ1Y3RvcihsZXZlbDpudW1iZXIpXG5cdHtcblx0XHR0aGlzLmxldmVsID0gbGV2ZWw7XG5cdH1cblxuXHRwdWJsaWMgdXBkYXRlRGF0YShvZmZzZXQ6bnVtYmVyLCBpbmRpY2VzOkFycmF5PG51bWJlcj4sIG51bVZlcnRpY2VzOm51bWJlcilcblx0e1xuXHRcdGlmICh0aGlzLl9kYXRhRGlydHkpIHtcblx0XHRcdHRoaXMuX2RhdGFEaXJ0eSA9IGZhbHNlO1xuXG5cdFx0XHRpZiAoaW5kaWNlcy5sZW5ndGggPCBJbmRleERhdGEuTElNSVRfSU5ESUNFUyAmJiBudW1WZXJ0aWNlcyA8IEluZGV4RGF0YS5MSU1JVF9WRVJUUykge1xuXHRcdFx0XHQvL3Nob3J0Y3V0IGZvciB0aG9zZSBidWZmZXJzIHRoYXQgZml0IGludG8gdGhlIG1heGltdW0gYnVmZmVyIHNpemVzXG5cdFx0XHRcdHRoaXMuaW5kZXhNYXBwaW5ncyA9IG51bGw7XG5cdFx0XHRcdHRoaXMub3JpZ2luYWxJbmRpY2VzID0gbnVsbDtcblx0XHRcdFx0dGhpcy5zZXREYXRhKGluZGljZXMpO1xuXHRcdFx0XHR0aGlzLm9mZnNldCA9IGluZGljZXMubGVuZ3RoO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGk6bnVtYmVyO1xuXHRcdFx0XHR2YXIgbGVuOm51bWJlcjtcblx0XHRcdFx0dmFyIG91dEluZGV4Om51bWJlcjtcblx0XHRcdFx0dmFyIGo6bnVtYmVyO1xuXHRcdFx0XHR2YXIgazpudW1iZXI7XG5cdFx0XHRcdHZhciBzcGxpdEluZGljZXM6QXJyYXk8bnVtYmVyPiA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cblx0XHRcdFx0dGhpcy5pbmRleE1hcHBpbmdzID0gbmV3IEFycmF5PG51bWJlcj4oaW5kaWNlcy5sZW5ndGgpO1xuXHRcdFx0XHR0aGlzLm9yaWdpbmFsSW5kaWNlcyA9IG5ldyBBcnJheTxudW1iZXI+KCk7XG5cblx0XHRcdFx0aSA9IHRoaXMuaW5kZXhNYXBwaW5ncy5sZW5ndGg7XG5cblx0XHRcdFx0d2hpbGUgKGktLSlcblx0XHRcdFx0XHR0aGlzLmluZGV4TWFwcGluZ3NbaV0gPSAtMTtcblxuXHRcdFx0XHR2YXIgb3JpZ2luYWxJbmRleDpudW1iZXI7XG5cdFx0XHRcdHZhciBzcGxpdEluZGV4Om51bWJlcjtcblxuXHRcdFx0XHQvLyBMb29wIG92ZXIgYWxsIHRyaWFuZ2xlc1xuXHRcdFx0XHRvdXRJbmRleCA9IDA7XG5cdFx0XHRcdGxlbiA9IGluZGljZXMubGVuZ3RoO1xuXHRcdFx0XHRpID0gb2Zmc2V0O1xuXHRcdFx0XHRrID0gMDtcblx0XHRcdFx0d2hpbGUgKGkgPCBsZW4gJiYgb3V0SW5kZXggKyAzIDwgSW5kZXhEYXRhLkxJTUlUX0lORElDRVMgJiYgayArIDMgPCBJbmRleERhdGEuTElNSVRfVkVSVFMpIHtcblx0XHRcdFx0XHQvLyBMb29wIG92ZXIgYWxsIHZlcnRpY2VzIGluIGEgdHJpYW5nbGUgLy9UT0RPIGVuc3VyZSB0aGlzIHdvcmtzIGZvciBzZWdtZW50cyBvciBhbnkgZ3JvdXBpbmdcblx0XHRcdFx0XHRmb3IgKGogPSAwOyBqIDwgMzsgaisrKSB7XG5cblx0XHRcdFx0XHRcdG9yaWdpbmFsSW5kZXggPSBpbmRpY2VzW2kgKyBqXTtcblxuXHRcdFx0XHRcdFx0aWYgKHRoaXMuaW5kZXhNYXBwaW5nc1tvcmlnaW5hbEluZGV4XSA+PSAwKSB7XG5cdFx0XHRcdFx0XHRcdHNwbGl0SW5kZXggPSB0aGlzLmluZGV4TWFwcGluZ3Nbb3JpZ2luYWxJbmRleF07XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgdmVydGV4IGRvZXMgbm90IHlldCBleGlzdCBpbiB0aGUgc3BsaXQgbGlzdCBhbmRcblx0XHRcdFx0XHRcdFx0Ly8gbmVlZHMgdG8gYmUgY29waWVkIGZyb20gdGhlIGxvbmcgbGlzdC5cblx0XHRcdFx0XHRcdFx0c3BsaXRJbmRleCA9IGsrKztcblx0XHRcdFx0XHRcdFx0dGhpcy5pbmRleE1hcHBpbmdzW29yaWdpbmFsSW5kZXhdID0gc3BsaXRJbmRleDtcblx0XHRcdFx0XHRcdFx0dGhpcy5vcmlnaW5hbEluZGljZXMucHVzaChvcmlnaW5hbEluZGV4KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gU3RvcmUgbmV3IGluZGV4LCB3aGljaCBtYXkgaGF2ZSBjb21lIGZyb20gdGhlIG1hcHBpbmcgbG9vay11cCxcblx0XHRcdFx0XHRcdC8vIG9yIGZyb20gY29weWluZyBhIG5ldyBzZXQgb2YgdmVydGV4IGRhdGEgZnJvbSB0aGUgb3JpZ2luYWwgdmVjdG9yXG5cdFx0XHRcdFx0XHRzcGxpdEluZGljZXNbb3V0SW5kZXggKyBqXSA9IHNwbGl0SW5kZXg7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0b3V0SW5kZXggKz0gMztcblx0XHRcdFx0XHRpICs9IDNcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHRoaXMuc2V0RGF0YShzcGxpdEluZGljZXMpO1xuXHRcdFx0XHR0aGlzLm9mZnNldCA9IGk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cHVibGljIGludmFsaWRhdGVEYXRhKClcblx0e1xuXHRcdHRoaXMuX2RhdGFEaXJ0eSA9IHRydWU7XG5cdH1cblxuXHRwdWJsaWMgZGlzcG9zZSgpXG5cdHtcblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA4OyArK2kpIHtcblx0XHRcdGlmICh0aGlzLmNvbnRleHRzW2ldKSB7XG5cdFx0XHRcdHRoaXMuYnVmZmVyc1tpXS5kaXNwb3NlKCk7XG5cdFx0XHRcdHRoaXMuYnVmZmVyc1tpXSA9IG51bGw7XG5cdFx0XHRcdHRoaXMuY29udGV4dHNbaV0gPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBkaXNwb3NlQnVmZmVycygpXG5cdHtcblx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCA4OyArK2kpIHtcblx0XHRcdGlmICh0aGlzLmJ1ZmZlcnNbaV0pIHtcblx0XHRcdFx0dGhpcy5idWZmZXJzW2ldLmRpc3Bvc2UoKTtcblx0XHRcdFx0dGhpcy5idWZmZXJzW2ldID0gbnVsbDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdHByaXZhdGUgaW52YWxpZGF0ZUJ1ZmZlcnMoKVxuXHR7XG5cdFx0Zm9yICh2YXIgaTpudW1iZXIgPSAwOyBpIDwgODsgKytpKVxuXHRcdFx0dGhpcy5pbnZhbGlkW2ldID0gdHJ1ZTtcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKiBAcGFyYW0gZGF0YVxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBzZXREYXRhKGRhdGE6QXJyYXk8bnVtYmVyPilcblx0e1xuXHRcdGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCAhPSBkYXRhLmxlbmd0aClcblx0XHRcdHRoaXMuZGlzcG9zZUJ1ZmZlcnMoKTtcblx0XHRlbHNlXG5cdFx0XHR0aGlzLmludmFsaWRhdGVCdWZmZXJzKCk7XG5cblx0XHR0aGlzLmRhdGEgPSBkYXRhO1xuXHR9XG59XG5cbmV4cG9ydCA9IEluZGV4RGF0YTsiXX0=