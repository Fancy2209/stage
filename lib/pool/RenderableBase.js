var AbstractMethodError = require("awayjs-core/lib/errors/AbstractMethodError");
var SubGeometryBase = require("awayjs-display/lib/base/SubGeometryBase");
var TriangleSubGeometry = require("awayjs-display/lib/base/TriangleSubGeometry");
var SubGeometryEvent = require("awayjs-display/lib/events/SubGeometryEvent");
var IndexDataPool = require("awayjs-stagegl/lib/pool/IndexDataPool");
var VertexDataPool = require("awayjs-stagegl/lib/pool/VertexDataPool");
/**
 * @class RenderableListItem
 */
var RenderableBase = (function () {
    /**
     *
     * @param sourceEntity
     * @param materialOwner
     * @param subGeometry
     * @param animationSubGeometry
     */
    function RenderableBase(pool, sourceEntity, materialOwner, level, indexOffset) {
        var _this = this;
        if (level === void 0) { level = 0; }
        if (indexOffset === void 0) { indexOffset = 0; }
        this._geometryDirty = true;
        this._indexDataDirty = true;
        this._vertexData = new Object();
        this._pVertexDataDirty = new Object();
        this._vertexOffset = new Object();
        this._onIndicesUpdatedDelegate = function (event) { return _this._onIndicesUpdated(event); };
        this._onVerticesUpdatedDelegate = function (event) { return _this._onVerticesUpdated(event); };
        //store a reference to the pool for later disposal
        this._pool = pool;
        //reference to level of overflow
        this._level = level;
        //reference to the offset on indices (if this is an overflow renderable)
        this._indexOffset = indexOffset;
        this.sourceEntity = sourceEntity;
        this.materialOwner = materialOwner;
    }
    Object.defineProperty(RenderableBase.prototype, "overflow", {
        /**
         *
         */
        get: function () {
            if (this._indexDataDirty)
                this._updateIndexData();
            return this._overflow;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RenderableBase.prototype, "numTriangles", {
        /**
         *
         */
        get: function () {
            return this._numTriangles;
        },
        enumerable: true,
        configurable: true
    });
    /**
     *
     */
    RenderableBase.prototype.getIndexData = function () {
        if (this._indexDataDirty)
            this._updateIndexData();
        return this._indexData;
    };
    /**
     *
     */
    RenderableBase.prototype.getVertexData = function (dataType) {
        if (this._indexDataDirty)
            this._updateIndexData();
        if (this._pVertexDataDirty[dataType])
            this._updateVertexData(dataType);
        return this._vertexData[this._concatenateArrays ? TriangleSubGeometry.VERTEX_DATA : dataType];
    };
    /**
     *
     */
    RenderableBase.prototype.getVertexOffset = function (dataType) {
        if (this._indexDataDirty)
            this._updateIndexData();
        if (this._pVertexDataDirty[dataType])
            this._updateVertexData(dataType);
        return this._vertexOffset[dataType];
    };
    RenderableBase.prototype.dispose = function () {
        this._pool.disposeItem(this.materialOwner);
        this._indexData.dispose();
        this._indexData = null;
        for (var dataType in this._vertexData) {
            this._vertexData[dataType].dispose();
            this._vertexData[dataType] = null;
        }
        if (this._overflow) {
            this._overflow.dispose();
            this._overflow = null;
        }
    };
    RenderableBase.prototype.invalidateGeometry = function () {
        this._geometryDirty = true;
        //invalidate indices
        if (this._level == 0)
            this._indexDataDirty = true;
        if (this._overflow)
            this._overflow.invalidateGeometry();
    };
    /**
     *
     */
    RenderableBase.prototype.invalidateIndexData = function () {
        this._indexDataDirty = true;
    };
    /**
     * //TODO
     *
     * @param dataType
     */
    RenderableBase.prototype.invalidateVertexData = function (dataType) {
        this._pVertexDataDirty[dataType] = true;
    };
    RenderableBase.prototype._pGetSubGeometry = function () {
        throw new AbstractMethodError();
    };
    /**
     * //TODO
     *
     * @param subGeometry
     * @param offset
     * @internal
     */
    RenderableBase.prototype._iFillIndexData = function (indexOffset) {
        if (this._geometryDirty)
            this._updateGeometry();
        this._indexData = IndexDataPool.getItem(this._subGeometry, this._level, indexOffset);
        this._numTriangles = this._indexData.data.length / 3;
        indexOffset = this._indexData.offset;
        //check if there is more to split
        if (indexOffset < this._subGeometry.indices.length) {
            if (!this._overflow)
                this._overflow = this._pGetOverflowRenderable(this._pool, this.materialOwner, indexOffset, this._level + 1);
            this._overflow._iFillIndexData(indexOffset);
        }
        else if (this._overflow) {
            this._overflow.dispose();
            this._overflow = null;
        }
    };
    RenderableBase.prototype._pGetOverflowRenderable = function (pool, materialOwner, level, indexOffset) {
        throw new AbstractMethodError();
    };
    /**
     * //TODO
     *
     * @private
     */
    RenderableBase.prototype._updateGeometry = function () {
        if (this._subGeometry) {
            if (this._level == 0)
                this._subGeometry.removeEventListener(SubGeometryEvent.INDICES_UPDATED, this._onIndicesUpdatedDelegate);
            this._subGeometry.removeEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
        }
        this._subGeometry = this._pGetSubGeometry();
        this._concatenateArrays = this._subGeometry.concatenateArrays;
        if (this._subGeometry) {
            if (this._level == 0)
                this._subGeometry.addEventListener(SubGeometryEvent.INDICES_UPDATED, this._onIndicesUpdatedDelegate);
            this._subGeometry.addEventListener(SubGeometryEvent.VERTICES_UPDATED, this._onVerticesUpdatedDelegate);
        }
        //dispose
        //			if (this._indexData) {
        //				this._indexData.dispose(); //TODO where is a good place to dispose?
        //				this._indexData = null;
        //			}
        //			for (var dataType in this._vertexData) {
        //				(<VertexData> this._vertexData[dataType]).dispose(); //TODO where is a good place to dispose?
        //				this._vertexData[dataType] = null;
        //			}
        this._geometryDirty = false;
        //specific vertex data types have to be invalidated in the specific renderable
    };
    /**
     * //TODO
     *
     * @private
     */
    RenderableBase.prototype._updateIndexData = function () {
        this._iFillIndexData(this._indexOffset);
        this._indexDataDirty = false;
    };
    /**
     * //TODO
     *
     * @param dataType
     * @private
     */
    RenderableBase.prototype._updateVertexData = function (dataType) {
        this._vertexOffset[dataType] = this._subGeometry.getOffset(dataType);
        if (this._subGeometry.concatenateArrays)
            dataType = SubGeometryBase.VERTEX_DATA;
        this._vertexData[dataType] = VertexDataPool.getItem(this._subGeometry, this.getIndexData(), dataType);
        this._pVertexDataDirty[dataType] = false;
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    RenderableBase.prototype._onIndicesUpdated = function (event) {
        this.invalidateIndexData();
    };
    /**
     * //TODO
     *
     * @param event
     * @private
     */
    RenderableBase.prototype._onVerticesUpdated = function (event) {
        this._concatenateArrays = event.target.concatenateArrays;
        this.invalidateVertexData(event.dataType);
    };
    return RenderableBase;
})();
module.exports = RenderableBase;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL3JlbmRlcmFibGViYXNlLnRzIl0sIm5hbWVzIjpbIlJlbmRlcmFibGVCYXNlIiwiUmVuZGVyYWJsZUJhc2UuY29uc3RydWN0b3IiLCJSZW5kZXJhYmxlQmFzZS5vdmVyZmxvdyIsIlJlbmRlcmFibGVCYXNlLm51bVRyaWFuZ2xlcyIsIlJlbmRlcmFibGVCYXNlLmdldEluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLmdldFZlcnRleERhdGEiLCJSZW5kZXJhYmxlQmFzZS5nZXRWZXJ0ZXhPZmZzZXQiLCJSZW5kZXJhYmxlQmFzZS5kaXNwb3NlIiwiUmVuZGVyYWJsZUJhc2UuaW52YWxpZGF0ZUdlb21ldHJ5IiwiUmVuZGVyYWJsZUJhc2UuaW52YWxpZGF0ZUluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLmludmFsaWRhdGVWZXJ0ZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX3BHZXRTdWJHZW9tZXRyeSIsIlJlbmRlcmFibGVCYXNlLl9pRmlsbEluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLl9wR2V0T3ZlcmZsb3dSZW5kZXJhYmxlIiwiUmVuZGVyYWJsZUJhc2UuX3VwZGF0ZUdlb21ldHJ5IiwiUmVuZGVyYWJsZUJhc2UuX3VwZGF0ZUluZGV4RGF0YSIsIlJlbmRlcmFibGVCYXNlLl91cGRhdGVWZXJ0ZXhEYXRhIiwiUmVuZGVyYWJsZUJhc2UuX29uSW5kaWNlc1VwZGF0ZWQiLCJSZW5kZXJhYmxlQmFzZS5fb25WZXJ0aWNlc1VwZGF0ZWQiXSwibWFwcGluZ3MiOiJBQUNBLElBQU8sbUJBQW1CLFdBQWEsNENBQTRDLENBQUMsQ0FBQztBQUdyRixJQUFPLGVBQWUsV0FBYyx5Q0FBeUMsQ0FBQyxDQUFDO0FBQy9FLElBQU8sbUJBQW1CLFdBQWEsNkNBQTZDLENBQUMsQ0FBQztBQUl0RixJQUFPLGdCQUFnQixXQUFjLDRDQUE0QyxDQUFDLENBQUM7QUFJbkYsSUFBTyxhQUFhLFdBQWMsdUNBQXVDLENBQUMsQ0FBQztB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Q0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsbUJBQW1CQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsQ0FBQ0E7WUFDekdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLG1CQUFtQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0E7UUFDM0dBLENBQUNBO1FBRURBLElBQUlBLENBQUNBLFlBQVlBLEdBQUdBLElBQUlBLENBQUNBLGdCQUFnQkEsRUFBRUEsQ0FBQ0E7UUFFNUNBLElBQUlBLENBQUNBLGtCQUFrQkEsR0FBR0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtRQUU5REEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0E7WUFDdkJBLEVBQUVBLENBQUNBLENBQUNBLElBQUlBLENBQUNBLE1BQU1BLElBQUlBLENBQUNBLENBQUNBO2dCQUNwQkEsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLENBQUNBLGVBQWVBLEVBQUVBLElBQUlBLENBQUNBLHlCQUF5QkEsQ0FBQ0EsQ0FBQ0E7WUFDdEdBLElBQUlBLENBQUNBLFlBQVlBLENBQUNBLGdCQUFnQkEsQ0FBQ0EsZ0JBQWdCQSxDQUFDQSxnQkFBZ0JBLEVBQUVBLElBQUlBLENBQUNBLDBCQUEwQkEsQ0FBQ0EsQ0FBQ0E7UUFDeEdBLENBQUNBO1FBRURBLEFBV0FBLFNBWFNBO1FBQ1hBLDJCQUEyQkE7UUFDM0JBLHlFQUF5RUE7UUFDekVBLDZCQUE2QkE7UUFDN0JBLE1BQU1BO1FBRU5BLDZDQUE2Q0E7UUFDN0NBLG1HQUFtR0E7UUFDbkdBLHdDQUF3Q0E7UUFDeENBLE1BQU1BO1FBRUpBLElBQUlBLENBQUNBLGNBQWNBLEdBQUdBLEtBQUtBLENBQUNBO1FBRTVCQSw4RUFBOEVBO0lBQy9FQSxDQUFDQTtJQUVEZDs7OztPQUlHQTtJQUNLQSx5Q0FBZ0JBLEdBQXhCQTtRQUVDZSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxDQUFDQTtRQUV4Q0EsSUFBSUEsQ0FBQ0EsZUFBZUEsR0FBR0EsS0FBS0EsQ0FBQ0E7SUFDOUJBLENBQUNBO0lBRURmOzs7OztPQUtHQTtJQUNLQSwwQ0FBaUJBLEdBQXpCQSxVQUEwQkEsUUFBZUE7UUFFeENnQixJQUFJQSxDQUFDQSxhQUFhQSxDQUFDQSxRQUFRQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQSxZQUFZQSxDQUFDQSxTQUFTQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUVyRUEsRUFBRUEsQ0FBQ0EsQ0FBQ0EsSUFBSUEsQ0FBQ0EsWUFBWUEsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtZQUN2Q0EsUUFBUUEsR0FBR0EsZUFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFFeENBLElBQUlBLENBQUNBLFdBQVdBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLGNBQWNBLENBQUNBLE9BQU9BLENBQUNBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLElBQUlBLENBQUNBLFlBQVlBLEVBQUVBLEVBQUVBLFFBQVFBLENBQUNBLENBQUNBO1FBRXRHQSxJQUFJQSxDQUFDQSxpQkFBaUJBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLEtBQUtBLENBQUNBO0lBQzFDQSxDQUFDQTtJQUVEaEI7Ozs7O09BS0dBO0lBQ0tBLDBDQUFpQkEsR0FBekJBLFVBQTBCQSxLQUFzQkE7UUFFL0NpQixJQUFJQSxDQUFDQSxtQkFBbUJBLEVBQUVBLENBQUNBO0lBQzVCQSxDQUFDQTtJQUVEakI7Ozs7O09BS0dBO0lBQ0tBLDJDQUFrQkEsR0FBMUJBLFVBQTJCQSxLQUFzQkE7UUFFaERrQixJQUFJQSxDQUFDQSxrQkFBa0JBLEdBQXNCQSxLQUFLQSxDQUFDQSxNQUFPQSxDQUFDQSxpQkFBaUJBLENBQUNBO1FBRTdFQSxJQUFJQSxDQUFDQSxvQkFBb0JBLENBQUNBLEtBQUtBLENBQUNBLFFBQVFBLENBQUNBLENBQUNBO0lBQzNDQSxDQUFDQTtJQUNGbEIscUJBQUNBO0FBQURBLENBaFZBLEFBZ1ZDQSxJQUFBO0FBRUQsQUFBd0IsaUJBQWYsY0FBYyxDQUFDIiwiZmlsZSI6InBvb2wvUmVuZGVyYWJsZUJhc2UuanMiLCJzb3VyY2VSb290IjoiLi4vIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1hdHJpeDNEXHRcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWNvcmUvbGliL2dlb20vTWF0cml4M0RcIik7XG5pbXBvcnQgQWJzdHJhY3RNZXRob2RFcnJvclx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1jb3JlL2xpYi9lcnJvcnMvQWJzdHJhY3RNZXRob2RFcnJvclwiKTtcblxuaW1wb3J0IElNYXRlcmlhbE93bmVyXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvYmFzZS9JTWF0ZXJpYWxPd25lclwiKTtcbmltcG9ydCBTdWJHZW9tZXRyeUJhc2VcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9iYXNlL1N1Ykdlb21ldHJ5QmFzZVwiKTtcbmltcG9ydCBUcmlhbmdsZVN1Ykdlb21ldHJ5XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL2Jhc2UvVHJpYW5nbGVTdWJHZW9tZXRyeVwiKTtcbmltcG9ydCBJUmVuZGVyYWJsZVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtZGlzcGxheS9saWIvcG9vbC9JUmVuZGVyYWJsZVwiKTtcbmltcG9ydCBSZW5kZXJhYmxlUG9vbFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL3Bvb2wvUmVuZGVyYWJsZVBvb2xcIik7XG5pbXBvcnQgSUVudGl0eVx0XHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9lbnRpdGllcy9JRW50aXR5XCIpO1xuaW1wb3J0IFN1Ykdlb21ldHJ5RXZlbnRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1kaXNwbGF5L2xpYi9ldmVudHMvU3ViR2VvbWV0cnlFdmVudFwiKTtcbmltcG9ydCBNYXRlcmlhbEJhc2VcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLWRpc3BsYXkvbGliL21hdGVyaWFscy9NYXRlcmlhbEJhc2VcIik7XG5cbmltcG9ydCBJbmRleERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvSW5kZXhEYXRhXCIpO1xuaW1wb3J0IEluZGV4RGF0YVBvb2xcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL0luZGV4RGF0YVBvb2xcIik7XG5pbXBvcnQgVmVydGV4RGF0YVx0XHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9WZXJ0ZXhEYXRhXCIpO1xuaW1wb3J0IFZlcnRleERhdGFQb29sXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtc3RhZ2VnbC9saWIvcG9vbC9WZXJ0ZXhEYXRhUG9vbFwiKTtcblxuLyoqXG4gKiBAY2xhc3MgUmVuZGVyYWJsZUxpc3RJdGVtXG4gKi9cbmNsYXNzIFJlbmRlcmFibGVCYXNlIGltcGxlbWVudHMgSVJlbmRlcmFibGVcbntcblx0cHJpdmF0ZSBfb25JbmRpY2VzVXBkYXRlZERlbGVnYXRlOihldmVudDpTdWJHZW9tZXRyeUV2ZW50KSA9PiB2b2lkO1xuXHRwcml2YXRlIF9vblZlcnRpY2VzVXBkYXRlZERlbGVnYXRlOihldmVudDpTdWJHZW9tZXRyeUV2ZW50KSA9PiB2b2lkO1xuXG5cdHByaXZhdGUgX3N1Ykdlb21ldHJ5OlN1Ykdlb21ldHJ5QmFzZTtcblx0cHJpdmF0ZSBfZ2VvbWV0cnlEaXJ0eTpib29sZWFuID0gdHJ1ZTtcblx0cHJpdmF0ZSBfaW5kZXhEYXRhOkluZGV4RGF0YTtcblx0cHJpdmF0ZSBfaW5kZXhEYXRhRGlydHk6Ym9vbGVhbiA9IHRydWU7XG5cdHByaXZhdGUgX3ZlcnRleERhdGE6T2JqZWN0ID0gbmV3IE9iamVjdCgpO1xuXHRwdWJsaWMgX3BWZXJ0ZXhEYXRhRGlydHk6T2JqZWN0ID0gbmV3IE9iamVjdCgpO1xuXHRwcml2YXRlIF92ZXJ0ZXhPZmZzZXQ6T2JqZWN0ID0gbmV3IE9iamVjdCgpO1xuXG5cdHByaXZhdGUgX2xldmVsOm51bWJlcjtcblx0cHJpdmF0ZSBfaW5kZXhPZmZzZXQ6bnVtYmVyO1xuXHRwcml2YXRlIF9vdmVyZmxvdzpSZW5kZXJhYmxlQmFzZTtcblx0cHJpdmF0ZSBfbnVtVHJpYW5nbGVzOm51bWJlcjtcblx0cHJpdmF0ZSBfY29uY2F0ZW5hdGVBcnJheXM6Ym9vbGVhbjtcblxuXG5cdHB1YmxpYyBKT0lOVF9JTkRFWF9GT1JNQVQ6c3RyaW5nO1xuXHRwdWJsaWMgSk9JTlRfV0VJR0hUX0ZPUk1BVDpzdHJpbmc7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgX3Bvb2w6UmVuZGVyYWJsZVBvb2w7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IG92ZXJmbG93KCk6UmVuZGVyYWJsZUJhc2Vcblx0e1xuXHRcdGlmICh0aGlzLl9pbmRleERhdGFEaXJ0eSlcblx0XHRcdHRoaXMuX3VwZGF0ZUluZGV4RGF0YSgpO1xuXG5cdFx0cmV0dXJuIHRoaXMuX292ZXJmbG93O1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgZ2V0IG51bVRyaWFuZ2xlcygpOm51bWJlclxuXHR7XG5cdFx0cmV0dXJuIHRoaXMuX251bVRyaWFuZ2xlcztcblx0fVxuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIG5leHQ6UmVuZGVyYWJsZUJhc2U7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgbWF0ZXJpYWxJZDpudW1iZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgcmVuZGVyT3JkZXJJZDpudW1iZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgekluZGV4Om51bWJlcjtcblxuXHQvKipcblx0ICpcblx0ICovXG5cdHB1YmxpYyBjYXNjYWRlZDpib29sZWFuO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHJlbmRlclNjZW5lVHJhbnNmb3JtOk1hdHJpeDNEO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIHNvdXJjZUVudGl0eTpJRW50aXR5O1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIG1hdGVyaWFsT3duZXI6SU1hdGVyaWFsT3duZXI7XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgbWF0ZXJpYWw6TWF0ZXJpYWxCYXNlO1xuXG5cdC8qKlxuXHQgKlxuXHQgKi9cblx0cHVibGljIGdldEluZGV4RGF0YSgpOkluZGV4RGF0YVxuXHR7XG5cdFx0aWYgKHRoaXMuX2luZGV4RGF0YURpcnR5KVxuXHRcdFx0dGhpcy5fdXBkYXRlSW5kZXhEYXRhKCk7XG5cblx0XHRyZXR1cm4gdGhpcy5faW5kZXhEYXRhO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgZ2V0VmVydGV4RGF0YShkYXRhVHlwZTpzdHJpbmcpOlZlcnRleERhdGFcblx0e1xuXHRcdGlmICh0aGlzLl9pbmRleERhdGFEaXJ0eSlcblx0XHRcdHRoaXMuX3VwZGF0ZUluZGV4RGF0YSgpO1xuXG5cdFx0aWYgKHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbZGF0YVR5cGVdKVxuXHRcdFx0dGhpcy5fdXBkYXRlVmVydGV4RGF0YShkYXRhVHlwZSk7XG5cblx0XHRyZXR1cm4gdGhpcy5fdmVydGV4RGF0YVt0aGlzLl9jb25jYXRlbmF0ZUFycmF5cz8gVHJpYW5nbGVTdWJHZW9tZXRyeS5WRVJURVhfREFUQSA6IGRhdGFUeXBlXVxuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgZ2V0VmVydGV4T2Zmc2V0KGRhdGFUeXBlOnN0cmluZyk6bnVtYmVyXG5cdHtcblx0XHRpZiAodGhpcy5faW5kZXhEYXRhRGlydHkpXG5cdFx0XHR0aGlzLl91cGRhdGVJbmRleERhdGEoKTtcblxuXHRcdGlmICh0aGlzLl9wVmVydGV4RGF0YURpcnR5W2RhdGFUeXBlXSlcblx0XHRcdHRoaXMuX3VwZGF0ZVZlcnRleERhdGEoZGF0YVR5cGUpO1xuXG5cdFx0cmV0dXJuIHRoaXMuX3ZlcnRleE9mZnNldFtkYXRhVHlwZV07XG5cdH1cblxuXHQvKipcblx0ICpcblx0ICogQHBhcmFtIHNvdXJjZUVudGl0eVxuXHQgKiBAcGFyYW0gbWF0ZXJpYWxPd25lclxuXHQgKiBAcGFyYW0gc3ViR2VvbWV0cnlcblx0ICogQHBhcmFtIGFuaW1hdGlvblN1Ykdlb21ldHJ5XG5cdCAqL1xuXHRjb25zdHJ1Y3Rvcihwb29sOlJlbmRlcmFibGVQb29sLCBzb3VyY2VFbnRpdHk6SUVudGl0eSwgbWF0ZXJpYWxPd25lcjpJTWF0ZXJpYWxPd25lciwgbGV2ZWw6bnVtYmVyID0gMCwgaW5kZXhPZmZzZXQ6bnVtYmVyID0gMClcblx0e1xuXHRcdHRoaXMuX29uSW5kaWNlc1VwZGF0ZWREZWxlZ2F0ZSA9IChldmVudDpTdWJHZW9tZXRyeUV2ZW50KSA9PiB0aGlzLl9vbkluZGljZXNVcGRhdGVkKGV2ZW50KTtcblx0XHR0aGlzLl9vblZlcnRpY2VzVXBkYXRlZERlbGVnYXRlID0gKGV2ZW50OlN1Ykdlb21ldHJ5RXZlbnQpID0+IHRoaXMuX29uVmVydGljZXNVcGRhdGVkKGV2ZW50KTtcblxuXHRcdC8vc3RvcmUgYSByZWZlcmVuY2UgdG8gdGhlIHBvb2wgZm9yIGxhdGVyIGRpc3Bvc2FsXG5cdFx0dGhpcy5fcG9vbCA9IHBvb2w7XG5cblx0XHQvL3JlZmVyZW5jZSB0byBsZXZlbCBvZiBvdmVyZmxvd1xuXHRcdHRoaXMuX2xldmVsID0gbGV2ZWw7XG5cblx0XHQvL3JlZmVyZW5jZSB0byB0aGUgb2Zmc2V0IG9uIGluZGljZXMgKGlmIHRoaXMgaXMgYW4gb3ZlcmZsb3cgcmVuZGVyYWJsZSlcblx0XHR0aGlzLl9pbmRleE9mZnNldCA9IGluZGV4T2Zmc2V0O1xuXG5cdFx0dGhpcy5zb3VyY2VFbnRpdHkgPSBzb3VyY2VFbnRpdHk7XG5cdFx0dGhpcy5tYXRlcmlhbE93bmVyID0gbWF0ZXJpYWxPd25lcjtcblx0fVxuXG5cdHB1YmxpYyBkaXNwb3NlKClcblx0e1xuXHRcdHRoaXMuX3Bvb2wuZGlzcG9zZUl0ZW0odGhpcy5tYXRlcmlhbE93bmVyKTtcblxuXHRcdHRoaXMuX2luZGV4RGF0YS5kaXNwb3NlKCk7XG5cdFx0dGhpcy5faW5kZXhEYXRhID0gbnVsbDtcblxuXHRcdGZvciAodmFyIGRhdGFUeXBlIGluIHRoaXMuX3ZlcnRleERhdGEpIHtcblx0XHRcdCg8VmVydGV4RGF0YT4gdGhpcy5fdmVydGV4RGF0YVtkYXRhVHlwZV0pLmRpc3Bvc2UoKTtcblx0XHRcdHRoaXMuX3ZlcnRleERhdGFbZGF0YVR5cGVdID0gbnVsbDtcblx0XHR9XG5cblx0XHRpZiAodGhpcy5fb3ZlcmZsb3cpIHtcblx0XHRcdHRoaXMuX292ZXJmbG93LmRpc3Bvc2UoKTtcblx0XHRcdHRoaXMuX292ZXJmbG93ID0gbnVsbDtcblx0XHR9XG5cdH1cblxuXHRwdWJsaWMgaW52YWxpZGF0ZUdlb21ldHJ5KClcblx0e1xuXHRcdHRoaXMuX2dlb21ldHJ5RGlydHkgPSB0cnVlO1xuXG5cdFx0Ly9pbnZhbGlkYXRlIGluZGljZXNcblx0XHRpZiAodGhpcy5fbGV2ZWwgPT0gMClcblx0XHRcdHRoaXMuX2luZGV4RGF0YURpcnR5ID0gdHJ1ZTtcblxuXHRcdGlmICh0aGlzLl9vdmVyZmxvdylcblx0XHRcdHRoaXMuX292ZXJmbG93LmludmFsaWRhdGVHZW9tZXRyeSgpO1xuXHR9XG5cblx0LyoqXG5cdCAqXG5cdCAqL1xuXHRwdWJsaWMgaW52YWxpZGF0ZUluZGV4RGF0YSgpXG5cdHtcblx0XHR0aGlzLl9pbmRleERhdGFEaXJ0eSA9IHRydWU7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBkYXRhVHlwZVxuXHQgKi9cblx0cHVibGljIGludmFsaWRhdGVWZXJ0ZXhEYXRhKGRhdGFUeXBlOnN0cmluZylcblx0e1xuXHRcdHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbZGF0YVR5cGVdID0gdHJ1ZTtcblx0fVxuXG5cdHB1YmxpYyBfcEdldFN1Ykdlb21ldHJ5KCk6U3ViR2VvbWV0cnlCYXNlXG5cdHtcblx0XHR0aHJvdyBuZXcgQWJzdHJhY3RNZXRob2RFcnJvcigpO1xuXHR9XG5cblx0LyoqXG5cdCAqIC8vVE9ET1xuXHQgKlxuXHQgKiBAcGFyYW0gc3ViR2VvbWV0cnlcblx0ICogQHBhcmFtIG9mZnNldFxuXHQgKiBAaW50ZXJuYWxcblx0ICovXG5cdHB1YmxpYyBfaUZpbGxJbmRleERhdGEoaW5kZXhPZmZzZXQ6bnVtYmVyKVxuXHR7XG5cdFx0aWYgKHRoaXMuX2dlb21ldHJ5RGlydHkpXG5cdFx0XHR0aGlzLl91cGRhdGVHZW9tZXRyeSgpO1xuXG5cdFx0dGhpcy5faW5kZXhEYXRhID0gSW5kZXhEYXRhUG9vbC5nZXRJdGVtKHRoaXMuX3N1Ykdlb21ldHJ5LCB0aGlzLl9sZXZlbCwgaW5kZXhPZmZzZXQpO1xuXG5cdFx0dGhpcy5fbnVtVHJpYW5nbGVzID0gdGhpcy5faW5kZXhEYXRhLmRhdGEubGVuZ3RoLzM7XG5cblx0XHRpbmRleE9mZnNldCA9IHRoaXMuX2luZGV4RGF0YS5vZmZzZXQ7XG5cblx0XHQvL2NoZWNrIGlmIHRoZXJlIGlzIG1vcmUgdG8gc3BsaXRcblx0XHRpZiAoaW5kZXhPZmZzZXQgPCB0aGlzLl9zdWJHZW9tZXRyeS5pbmRpY2VzLmxlbmd0aCkge1xuXHRcdFx0aWYgKCF0aGlzLl9vdmVyZmxvdylcblx0XHRcdFx0dGhpcy5fb3ZlcmZsb3cgPSB0aGlzLl9wR2V0T3ZlcmZsb3dSZW5kZXJhYmxlKHRoaXMuX3Bvb2wsIHRoaXMubWF0ZXJpYWxPd25lciwgaW5kZXhPZmZzZXQsIHRoaXMuX2xldmVsICsgMSk7XG5cblx0XHRcdHRoaXMuX292ZXJmbG93Ll9pRmlsbEluZGV4RGF0YShpbmRleE9mZnNldCk7XG5cdFx0fSBlbHNlIGlmICh0aGlzLl9vdmVyZmxvdykge1xuXHRcdFx0dGhpcy5fb3ZlcmZsb3cuZGlzcG9zZSgpO1xuXHRcdFx0dGhpcy5fb3ZlcmZsb3cgPSBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHB1YmxpYyBfcEdldE92ZXJmbG93UmVuZGVyYWJsZShwb29sOlJlbmRlcmFibGVQb29sLCBtYXRlcmlhbE93bmVyOklNYXRlcmlhbE93bmVyLCBsZXZlbDpudW1iZXIsIGluZGV4T2Zmc2V0Om51bWJlcik6UmVuZGVyYWJsZUJhc2Vcblx0e1xuXHRcdHRocm93IG5ldyBBYnN0cmFjdE1ldGhvZEVycm9yKCk7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF91cGRhdGVHZW9tZXRyeSgpXG5cdHtcblx0XHRpZiAodGhpcy5fc3ViR2VvbWV0cnkpIHtcblx0XHRcdGlmICh0aGlzLl9sZXZlbCA9PSAwKVxuXHRcdFx0XHR0aGlzLl9zdWJHZW9tZXRyeS5yZW1vdmVFdmVudExpc3RlbmVyKFN1Ykdlb21ldHJ5RXZlbnQuSU5ESUNFU19VUERBVEVELCB0aGlzLl9vbkluZGljZXNVcGRhdGVkRGVsZWdhdGUpO1xuXHRcdFx0dGhpcy5fc3ViR2VvbWV0cnkucmVtb3ZlRXZlbnRMaXN0ZW5lcihTdWJHZW9tZXRyeUV2ZW50LlZFUlRJQ0VTX1VQREFURUQsIHRoaXMuX29uVmVydGljZXNVcGRhdGVkRGVsZWdhdGUpO1xuXHRcdH1cblxuXHRcdHRoaXMuX3N1Ykdlb21ldHJ5ID0gdGhpcy5fcEdldFN1Ykdlb21ldHJ5KCk7XG5cblx0XHR0aGlzLl9jb25jYXRlbmF0ZUFycmF5cyA9IHRoaXMuX3N1Ykdlb21ldHJ5LmNvbmNhdGVuYXRlQXJyYXlzO1xuXG5cdFx0aWYgKHRoaXMuX3N1Ykdlb21ldHJ5KSB7XG5cdFx0XHRpZiAodGhpcy5fbGV2ZWwgPT0gMClcblx0XHRcdFx0dGhpcy5fc3ViR2VvbWV0cnkuYWRkRXZlbnRMaXN0ZW5lcihTdWJHZW9tZXRyeUV2ZW50LklORElDRVNfVVBEQVRFRCwgdGhpcy5fb25JbmRpY2VzVXBkYXRlZERlbGVnYXRlKTtcblx0XHRcdHRoaXMuX3N1Ykdlb21ldHJ5LmFkZEV2ZW50TGlzdGVuZXIoU3ViR2VvbWV0cnlFdmVudC5WRVJUSUNFU19VUERBVEVELCB0aGlzLl9vblZlcnRpY2VzVXBkYXRlZERlbGVnYXRlKTtcblx0XHR9XG5cblx0XHQvL2Rpc3Bvc2Vcbi8vXHRcdFx0aWYgKHRoaXMuX2luZGV4RGF0YSkge1xuLy9cdFx0XHRcdHRoaXMuX2luZGV4RGF0YS5kaXNwb3NlKCk7IC8vVE9ETyB3aGVyZSBpcyBhIGdvb2QgcGxhY2UgdG8gZGlzcG9zZT9cbi8vXHRcdFx0XHR0aGlzLl9pbmRleERhdGEgPSBudWxsO1xuLy9cdFx0XHR9XG5cbi8vXHRcdFx0Zm9yICh2YXIgZGF0YVR5cGUgaW4gdGhpcy5fdmVydGV4RGF0YSkge1xuLy9cdFx0XHRcdCg8VmVydGV4RGF0YT4gdGhpcy5fdmVydGV4RGF0YVtkYXRhVHlwZV0pLmRpc3Bvc2UoKTsgLy9UT0RPIHdoZXJlIGlzIGEgZ29vZCBwbGFjZSB0byBkaXNwb3NlP1xuLy9cdFx0XHRcdHRoaXMuX3ZlcnRleERhdGFbZGF0YVR5cGVdID0gbnVsbDtcbi8vXHRcdFx0fVxuXG5cdFx0dGhpcy5fZ2VvbWV0cnlEaXJ0eSA9IGZhbHNlO1xuXG5cdFx0Ly9zcGVjaWZpYyB2ZXJ0ZXggZGF0YSB0eXBlcyBoYXZlIHRvIGJlIGludmFsaWRhdGVkIGluIHRoZSBzcGVjaWZpYyByZW5kZXJhYmxlXG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF91cGRhdGVJbmRleERhdGEoKVxuXHR7XG5cdFx0dGhpcy5faUZpbGxJbmRleERhdGEodGhpcy5faW5kZXhPZmZzZXQpO1xuXG5cdFx0dGhpcy5faW5kZXhEYXRhRGlydHkgPSBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiAvL1RPRE9cblx0ICpcblx0ICogQHBhcmFtIGRhdGFUeXBlXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRwcml2YXRlIF91cGRhdGVWZXJ0ZXhEYXRhKGRhdGFUeXBlOnN0cmluZylcblx0e1xuXHRcdHRoaXMuX3ZlcnRleE9mZnNldFtkYXRhVHlwZV0gPSB0aGlzLl9zdWJHZW9tZXRyeS5nZXRPZmZzZXQoZGF0YVR5cGUpO1xuXG5cdFx0aWYgKHRoaXMuX3N1Ykdlb21ldHJ5LmNvbmNhdGVuYXRlQXJyYXlzKVxuXHRcdFx0ZGF0YVR5cGUgPSBTdWJHZW9tZXRyeUJhc2UuVkVSVEVYX0RBVEE7XG5cblx0XHR0aGlzLl92ZXJ0ZXhEYXRhW2RhdGFUeXBlXSA9IFZlcnRleERhdGFQb29sLmdldEl0ZW0odGhpcy5fc3ViR2VvbWV0cnksIHRoaXMuZ2V0SW5kZXhEYXRhKCksIGRhdGFUeXBlKTtcblxuXHRcdHRoaXMuX3BWZXJ0ZXhEYXRhRGlydHlbZGF0YVR5cGVdID0gZmFsc2U7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfb25JbmRpY2VzVXBkYXRlZChldmVudDpTdWJHZW9tZXRyeUV2ZW50KVxuXHR7XG5cdFx0dGhpcy5pbnZhbGlkYXRlSW5kZXhEYXRhKCk7XG5cdH1cblxuXHQvKipcblx0ICogLy9UT0RPXG5cdCAqXG5cdCAqIEBwYXJhbSBldmVudFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBfb25WZXJ0aWNlc1VwZGF0ZWQoZXZlbnQ6U3ViR2VvbWV0cnlFdmVudClcblx0e1xuXHRcdHRoaXMuX2NvbmNhdGVuYXRlQXJyYXlzID0gKDxTdWJHZW9tZXRyeUJhc2U+IGV2ZW50LnRhcmdldCkuY29uY2F0ZW5hdGVBcnJheXM7XG5cblx0XHR0aGlzLmludmFsaWRhdGVWZXJ0ZXhEYXRhKGV2ZW50LmRhdGFUeXBlKTtcblx0fVxufVxuXG5leHBvcnQgPSBSZW5kZXJhYmxlQmFzZTsiXX0=