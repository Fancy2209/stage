var SubGeometryBase = require("awayjs-core/lib/data/SubGeometryBase");
var VertexData = require("awayjs-stagegl/lib/pool/VertexData");
/**
 *
 */
var VertexDataPool = (function () {
    function VertexDataPool() {
    }
    VertexDataPool.getItem = function (subGeometry, indexData, dataType) {
        if (subGeometry.concatenateArrays)
            dataType = SubGeometryBase.VERTEX_DATA;
        var subGeometryDictionary = (VertexDataPool._pool[subGeometry.id] || (VertexDataPool._pool[subGeometry.id] = new Object()));
        var subGeometryData = (subGeometryDictionary[dataType] || (subGeometryDictionary[dataType] = new Array()));
        var vertexData = subGeometryData[indexData.level] || (subGeometryData[indexData.level] = new VertexData(subGeometry, dataType));
        vertexData.updateData(indexData.originalIndices, indexData.indexMappings);
        return vertexData;
    };
    VertexDataPool.disposeItem = function (subGeometry, level, dataType) {
        var subGeometryDictionary = VertexDataPool._pool[subGeometry.id];
        var subGeometryData = subGeometryDictionary[dataType];
        subGeometryData[level].dispose();
        subGeometryData[level] = null;
    };
    VertexDataPool.prototype.disposeData = function (subGeometry) {
        var subGeometryDictionary = VertexDataPool._pool[subGeometry.id];
        for (var key in subGeometryDictionary) {
            var subGeometryData = subGeometryDictionary[key];
            var len = subGeometryData.length;
            for (var i = 0; i < len; i++) {
                subGeometryData[i].dispose();
                subGeometryData[i] = null;
            }
        }
        VertexDataPool._pool[subGeometry.id] = null;
    };
    VertexDataPool._pool = new Object();
    return VertexDataPool;
})();
module.exports = VertexDataPool;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL1ZlcnRleERhdGFQb29sLnRzIl0sIm5hbWVzIjpbIlZlcnRleERhdGFQb29sIiwiVmVydGV4RGF0YVBvb2wuY29uc3RydWN0b3IiLCJWZXJ0ZXhEYXRhUG9vbC5nZXRJdGVtIiwiVmVydGV4RGF0YVBvb2wuZGlzcG9zZUl0ZW0iLCJWZXJ0ZXhEYXRhUG9vbC5kaXNwb3NlRGF0YSJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBTyxlQUFlLFdBQWMsc0NBQXNDLENBQUMsQ0FBQztBQUc1RSxJQUFPLFVBQVUsV0FBZSxvQ0FBb0MsQ0FBQyxDQUFDO0FBRXRFLEFBR0E7O0dBREc7SUFDRyxjQUFjO0lBSW5CQSxTQUpLQSxjQUFjQTtJQU1uQkMsQ0FBQ0E7SUFFYUQsc0JBQU9BLEdBQXJCQSxVQUFzQkEsV0FBMkJBLEVBQUVBLFNBQW1CQSxFQUFFQSxRQUFlQTtRQUV0RkUsRUFBRUEsQ0FBQ0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsaUJBQWlCQSxDQUFDQTtZQUNqQ0EsUUFBUUEsR0FBR0EsZUFBZUEsQ0FBQ0EsV0FBV0EsQ0FBQ0E7UUFFeENBLElBQUlBLHFCQUFxQkEsR0FBbUJBLENBQUNBLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLElBQUlBLENBQUNBLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLElBQUlBLE1BQU1BLEVBQUVBLENBQUNBLENBQUNBLENBQUNBO1FBQzVJQSxJQUFJQSxlQUFlQSxHQUF5Q0EsQ0FBQ0EscUJBQXFCQSxDQUFDQSxRQUFRQSxDQUFDQSxJQUFJQSxDQUFDQSxxQkFBcUJBLENBQUNBLFFBQVFBLENBQUNBLEdBQUdBLElBQUlBLEtBQUtBLEVBQWNBLENBQUNBLENBQUNBLENBQUNBO1FBRTdKQSxJQUFJQSxVQUFVQSxHQUFjQSxlQUFlQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxJQUFJQSxDQUFDQSxlQUFlQSxDQUFDQSxTQUFTQSxDQUFDQSxLQUFLQSxDQUFDQSxHQUFHQSxJQUFJQSxVQUFVQSxDQUFDQSxXQUFXQSxFQUFFQSxRQUFRQSxDQUFDQSxDQUFDQSxDQUFDQTtRQUMzSUEsVUFBVUEsQ0FBQ0EsVUFBVUEsQ0FBQ0EsU0FBU0EsQ0FBQ0EsZUFBZUEsRUFBRUEsU0FBU0EsQ0FBQ0EsYUFBYUEsQ0FBQ0EsQ0FBQ0E7UUFFMUVBLE1BQU1BLENBQUNBLFVBQVVBLENBQUNBO0lBQ25CQSxDQUFDQTtJQUVhRiwwQkFBV0EsR0FBekJBLFVBQTBCQSxXQUEyQkEsRUFBRUEsS0FBWUEsRUFBRUEsUUFBZUE7UUFFbkZHLElBQUlBLHFCQUFxQkEsR0FBbUJBLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBQ2pGQSxJQUFJQSxlQUFlQSxHQUF5Q0EscUJBQXFCQSxDQUFDQSxRQUFRQSxDQUFDQSxDQUFDQTtRQUU1RkEsZUFBZUEsQ0FBQ0EsS0FBS0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7UUFDakNBLGVBQWVBLENBQUNBLEtBQUtBLENBQUNBLEdBQUdBLElBQUlBLENBQUNBO0lBQy9CQSxDQUFDQTtJQUVNSCxvQ0FBV0EsR0FBbEJBLFVBQW1CQSxXQUEyQkE7UUFFN0NJLElBQUlBLHFCQUFxQkEsR0FBbUJBLGNBQWNBLENBQUNBLEtBQUtBLENBQUNBLFdBQVdBLENBQUNBLEVBQUVBLENBQUNBLENBQUNBO1FBRWpGQSxHQUFHQSxDQUFDQSxDQUFDQSxHQUFHQSxDQUFDQSxHQUFHQSxJQUFJQSxxQkFBcUJBLENBQUNBLENBQUNBLENBQUNBO1lBQ3ZDQSxJQUFJQSxlQUFlQSxHQUF5Q0EscUJBQXFCQSxDQUFDQSxHQUFHQSxDQUFDQSxDQUFDQTtZQUV2RkEsSUFBSUEsR0FBR0EsR0FBVUEsZUFBZUEsQ0FBQ0EsTUFBTUEsQ0FBQ0E7WUFDeENBLEdBQUdBLENBQUNBLENBQUNBLEdBQUdBLENBQUNBLENBQUNBLEdBQVVBLENBQUNBLEVBQUVBLENBQUNBLEdBQUdBLEdBQUdBLEVBQUVBLENBQUNBLEVBQUVBLEVBQUVBLENBQUNBO2dCQUNyQ0EsZUFBZUEsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsQ0FBQ0EsT0FBT0EsRUFBRUEsQ0FBQ0E7Z0JBQzdCQSxlQUFlQSxDQUFDQSxDQUFDQSxDQUFDQSxHQUFHQSxJQUFJQSxDQUFDQTtZQUMzQkEsQ0FBQ0E7UUFDRkEsQ0FBQ0E7UUFFREEsY0FBY0EsQ0FBQ0EsS0FBS0EsQ0FBQ0EsV0FBV0EsQ0FBQ0EsRUFBRUEsQ0FBQ0EsR0FBR0EsSUFBSUEsQ0FBQ0E7SUFDN0NBLENBQUNBO0lBNUNjSixvQkFBS0EsR0FBVUEsSUFBSUEsTUFBTUEsRUFBRUEsQ0FBQ0E7SUE2QzVDQSxxQkFBQ0E7QUFBREEsQ0EvQ0EsQUErQ0NBLElBQUE7QUFFRCxBQUF3QixpQkFBZixjQUFjLENBQUMiLCJmaWxlIjoicG9vbC9WZXJ0ZXhEYXRhUG9vbC5qcyIsInNvdXJjZVJvb3QiOiIuLi8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3ViR2VvbWV0cnlCYXNlXHRcdFx0XHQ9IHJlcXVpcmUoXCJhd2F5anMtY29yZS9saWIvZGF0YS9TdWJHZW9tZXRyeUJhc2VcIik7XHJcblxyXG5pbXBvcnQgSW5kZXhEYXRhXHRcdFx0XHRcdD0gcmVxdWlyZShcImF3YXlqcy1zdGFnZWdsL2xpYi9wb29sL0luZGV4RGF0YVwiKTtcclxuaW1wb3J0IFZlcnRleERhdGFcdFx0XHRcdFx0PSByZXF1aXJlKFwiYXdheWpzLXN0YWdlZ2wvbGliL3Bvb2wvVmVydGV4RGF0YVwiKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKi9cclxuY2xhc3MgVmVydGV4RGF0YVBvb2xcclxue1xyXG5cdHByaXZhdGUgc3RhdGljIF9wb29sOk9iamVjdCA9IG5ldyBPYmplY3QoKTtcclxuXHJcblx0Y29uc3RydWN0b3IoKVxyXG5cdHtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBzdGF0aWMgZ2V0SXRlbShzdWJHZW9tZXRyeTpTdWJHZW9tZXRyeUJhc2UsIGluZGV4RGF0YTpJbmRleERhdGEsIGRhdGFUeXBlOnN0cmluZyk6VmVydGV4RGF0YVxyXG5cdHtcclxuXHRcdGlmIChzdWJHZW9tZXRyeS5jb25jYXRlbmF0ZUFycmF5cylcclxuXHRcdFx0ZGF0YVR5cGUgPSBTdWJHZW9tZXRyeUJhc2UuVkVSVEVYX0RBVEE7XHJcblxyXG5cdFx0dmFyIHN1Ykdlb21ldHJ5RGljdGlvbmFyeTpPYmplY3QgPSA8T2JqZWN0PiAoVmVydGV4RGF0YVBvb2wuX3Bvb2xbc3ViR2VvbWV0cnkuaWRdIHx8IChWZXJ0ZXhEYXRhUG9vbC5fcG9vbFtzdWJHZW9tZXRyeS5pZF0gPSBuZXcgT2JqZWN0KCkpKTtcclxuXHRcdHZhciBzdWJHZW9tZXRyeURhdGE6QXJyYXk8VmVydGV4RGF0YT4gPSA8QXJyYXk8VmVydGV4RGF0YT4+IChzdWJHZW9tZXRyeURpY3Rpb25hcnlbZGF0YVR5cGVdIHx8IChzdWJHZW9tZXRyeURpY3Rpb25hcnlbZGF0YVR5cGVdID0gbmV3IEFycmF5PFZlcnRleERhdGE+KCkpKTtcclxuXHJcblx0XHR2YXIgdmVydGV4RGF0YTpWZXJ0ZXhEYXRhID0gc3ViR2VvbWV0cnlEYXRhW2luZGV4RGF0YS5sZXZlbF0gfHwgKHN1Ykdlb21ldHJ5RGF0YVtpbmRleERhdGEubGV2ZWxdID0gbmV3IFZlcnRleERhdGEoc3ViR2VvbWV0cnksIGRhdGFUeXBlKSk7XHJcblx0XHR2ZXJ0ZXhEYXRhLnVwZGF0ZURhdGEoaW5kZXhEYXRhLm9yaWdpbmFsSW5kaWNlcywgaW5kZXhEYXRhLmluZGV4TWFwcGluZ3MpO1xyXG5cclxuXHRcdHJldHVybiB2ZXJ0ZXhEYXRhO1xyXG5cdH1cclxuXHJcblx0cHVibGljIHN0YXRpYyBkaXNwb3NlSXRlbShzdWJHZW9tZXRyeTpTdWJHZW9tZXRyeUJhc2UsIGxldmVsOm51bWJlciwgZGF0YVR5cGU6c3RyaW5nKVxyXG5cdHtcclxuXHRcdHZhciBzdWJHZW9tZXRyeURpY3Rpb25hcnk6T2JqZWN0ID0gPE9iamVjdD4gVmVydGV4RGF0YVBvb2wuX3Bvb2xbc3ViR2VvbWV0cnkuaWRdO1xyXG5cdFx0dmFyIHN1Ykdlb21ldHJ5RGF0YTpBcnJheTxWZXJ0ZXhEYXRhPiA9IDxBcnJheTxWZXJ0ZXhEYXRhPj4gc3ViR2VvbWV0cnlEaWN0aW9uYXJ5W2RhdGFUeXBlXTtcclxuXHJcblx0XHRzdWJHZW9tZXRyeURhdGFbbGV2ZWxdLmRpc3Bvc2UoKTtcclxuXHRcdHN1Ykdlb21ldHJ5RGF0YVtsZXZlbF0gPSBudWxsO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGRpc3Bvc2VEYXRhKHN1Ykdlb21ldHJ5OlN1Ykdlb21ldHJ5QmFzZSlcclxuXHR7XHJcblx0XHR2YXIgc3ViR2VvbWV0cnlEaWN0aW9uYXJ5Ok9iamVjdCA9IDxPYmplY3Q+IFZlcnRleERhdGFQb29sLl9wb29sW3N1Ykdlb21ldHJ5LmlkXTtcclxuXHJcblx0XHRmb3IgKHZhciBrZXkgaW4gc3ViR2VvbWV0cnlEaWN0aW9uYXJ5KSB7XHJcblx0XHRcdHZhciBzdWJHZW9tZXRyeURhdGE6QXJyYXk8VmVydGV4RGF0YT4gPSA8QXJyYXk8VmVydGV4RGF0YT4+IHN1Ykdlb21ldHJ5RGljdGlvbmFyeVtrZXldO1xyXG5cclxuXHRcdFx0dmFyIGxlbjpudW1iZXIgPSBzdWJHZW9tZXRyeURhdGEubGVuZ3RoO1xyXG5cdFx0XHRmb3IgKHZhciBpOm51bWJlciA9IDA7IGkgPCBsZW47IGkrKykge1xyXG5cdFx0XHRcdHN1Ykdlb21ldHJ5RGF0YVtpXS5kaXNwb3NlKCk7XHJcblx0XHRcdFx0c3ViR2VvbWV0cnlEYXRhW2ldID0gbnVsbDtcclxuXHRcdFx0fVxyXG5cdFx0fVxyXG5cclxuXHRcdFZlcnRleERhdGFQb29sLl9wb29sW3N1Ykdlb21ldHJ5LmlkXSA9IG51bGw7XHJcblx0fVxyXG59XHJcblxyXG5leHBvcnQgPSBWZXJ0ZXhEYXRhUG9vbDsiXX0=